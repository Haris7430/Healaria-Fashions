
This is my productSchema.js code:- 
const mongoose = require("mongoose");
const { Schema } = mongoose;

const productSchema = new Schema({
    productName: {
        type: String,
        required: true
    },
    description: {
        type: String,
        default: ''
    },
    category: {
        type: Schema.Types.ObjectId,
        ref: "Category",
        required: true
    },
    regularPrice: {
        type: Number,
        required: true
    },
    
    variants: [{
        color: { type: String, required: true },
        sizes: [{
            size: { type: Number, required: true },
            quantity: { type: Number, required: true }
        }],
        images: [{
            filename: { type: String, required: true },
            contentType: { type: String, default: 'image/jpeg' }
        }],
        isListed: { type: Boolean, default: true },
        mainImage: { type: Boolean, default: false }  
    }],
    
    isBlocked: {
        type: Boolean,
        default: false
    },
   
}, { timestamps: true });

const Product = mongoose.model("Product", productSchema);
module.exports = Product;

This is my offerSchema.js code:- 

const mongoose = require("mongoose");

const offerSchema = new mongoose.Schema(
  {
    offerType: {
      type: String,
      enum: ["product", "category", "referral"],
      required: true,
    },
    offerName: {
      type: String,
      required: true,
      trim: true
    },
    discount: {
      type: Number,
      required: true,
      min: 0,
      max: 100
    },
    expireDate: {
      type: Date,
      required: true
    },
    productIds: [{ 
      type: mongoose.Schema.Types.ObjectId,
      ref: "Product",
      required: function () {
        return this.offerType === "product";
      },
    }],
    categoryIds: [{ 
      type: mongoose.Schema.Types.ObjectId,
      ref: "Category",
      required: function () {
        return this.offerType === "category";
      },
    }],
    referralCode: {
      type: String,
      required: function () {
        return this.offerType === "referral";
      },
      unique: true,
      sparse: true
    },
    status: {
      type: String,
      enum: ["active", "inactive"],
      default: "active",
    },
    isListed: {
      type: Boolean,
      default: true
    }
  },
  { timestamps: true }
);

const Offer = mongoose.model("Offer", offerSchema);

module.exports = Offer;

This is my orderSchema.js code:- 
const mongoose = require('mongoose');
const { Schema } = mongoose;



const returnRequestSchema = new Schema({
    itemId: {
        type: Schema.Types.ObjectId,
        required: true
    },
    reason: {
        type: String,
        required: true
    },
    status: {
        type: String,
        enum: ['pending', 'approved', 'rejected'],
        default: 'pending'
    },
    adminResponse: {
        type: String,
        default: null
    },
    customReason: {
        type: String,
        default: null
    },
    refundAmount: {
        type: Number,
        required: true
    }
}, { timestamps: true });


const orderSchema = new Schema({
    orderId: {
        type: String,
        unique: true,
        default: function() {
           
            const timestamp = Date.now().toString().slice(-10);
            const randomStr = Math.random().toString(36).substr(2, 6).toUpperCase();
            return `ORD-${timestamp}-${randomStr}`;
        }
    },
    userId: {
        type: Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    items: [{
        productId: {
            type: Schema.Types.ObjectId,
            ref: 'Product',
            required: true
        },
        variantId: {
            type: Schema.Types.ObjectId,
            ref: 'Product'
        },
        color: {
            type: String,
            required: true
        },
        size: {
            type: Number,
            required: true
        },
        quantity: {
            type: Number,
            required: true
        },
        price: {
            type: Number,
            required: true
        },
        totalPrice: {
            type: Number,
            required: true
        },
        status: {
            type: String,
            enum: ['placed', 'cancelled', 'returned', 'return_requested', 'return_rejected'],
            default: 'placed'
        },
        returnRequest: returnRequestSchema
    }],
    // Embedded shipping address details
    shippingAddress: {
        name: {
            type: String,
            required: true,
            trim: true
        },
        addressType: {
            type: String,
            enum: ['Home', 'Work', 'Other'],
            required: true
        },
        city: {
            type: String,
            required: true,
            trim: true
        },
        landmark: {
            type: String,
            required: true,
            trim: true
        },
        state: {
            type: String,
            required: true,
            trim: true
        },
        pincode: {
            type: String,
            required: true,
            match: [/^[0-9]{6}$/, 'Please enter a valid 6-digit pincode']
        },
        phone: {
            type: String,
            required: true,
            validate: {
                validator: function(v) {
                    return /^[1-9][0-9]{9}$/.test(v);
                },
                message: props => `${props.value} is not a valid phone number!`
            }
        },
        altPhone: {
            type: String,
            validate: {
                validator: function(v) {
                    return v === '' || /^[1-9][0-9]{9}$/.test(v);
                },
                message: props => `${props.value} is not a valid phone number!`
            }
        }
    },
    paymentMethod: {
        type: String,
        required: true,
        enum: ['COD', 'RazorPay', 'Wallet']  // Added Wallet
    },
    walletAmountUsed: {
        type: Number,
        default: 0
    },
    subtotal: {
        type: Number,
        required: true
    },
    shippingCost: {
        type: Number,
        required: true
    },
    discountAmount: {
        type: Number,
        default: 0
    },
    total: {
        type: Number,
        required: true
    },
    couponApplied: {
        code: {
            type: String,
            default: null
        },
        discountPercentage: {
            type: Number,
            default: null
        },
        discountAmount: {
            type: Number,
            default: null
        }
    },
    
    paymentStatus: {
        type: String,
        enum: ['pending', 'paid', 'failed'],
        default: 'pending'
    },
    status: {
        type: String,
        required: true,
        enum: ['pending', 'processing', 'shipped', 'delivered', 'cancelled']
    },
    paymentDetails: {
        razorpay_payment_id: String,
        razorpay_order_id: String,
        razorpay_signature: String
    },

    totalDiscount: {
        type: Number,
        default: 0,
        comment: 'Total discount including product discount and coupon discount'
    }
}, { timestamps: true });

const Order = mongoose.model('Order', orderSchema);
module.exports = Order;


This is my userRouter.js code:- 

router.get('/search', userController.searchProducts);
router.get('/shop-page', userController.shopingPage);
router.get('/productDetails', userController.getProductDetails);
router.get('/product/:productId/variant/:variantId', userController.getVariantDetails);

This is my userController.js code:- 


const searchProducts = async (req, res) => {
    try {
        const searchTerm = req.query.q ? req.query.q.toString() : '';
        const page = parseInt(req.query.page) || 1;
        const limit = 9;
        const skip = (page - 1) * limit;
        const categoryFilter = req.query.category;
        const globalSearch = req.query.globalSearch === 'true';

        // Create a base query
        const query = {
            isBlocked: false,
            productName: { $regex: searchTerm, $options: 'i' }
        };

        // Handle category filtering
        if (categoryFilter && categoryFilter !== '') {
            const selectedCategory = await Category.findOne({ name: categoryFilter });
            if (selectedCategory) {
                if (!globalSearch) {
                    // If not global search, strictly match the selected category
                    query.category = selectedCategory._id;
                }
            }
        }

        // Get total count of matching products
        const totalProducts = await Product.countDocuments(query);
        const totalPages = Math.ceil(totalProducts / limit);

        // Find products matching the criteria
        let products = await Product.find(query)
            .populate('category')
            .skip(skip)
            .limit(limit)
            .lean();

        // Process products to include necessary information
        products = await Promise.all(products.map(async (product) => {
            // Find applicable offers
            const offers = await Offer.find({
                $or: [
                    { offerType: 'product', productIds: product._id },
                    { offerType: 'category', categoryIds: product.category._id }
                ],
                status: 'active',
                expireDate: { $gte: new Date() }
            });

            // Calculate best offer
            let bestOffer = null;
            let offerPercentage = 0;

            if (offers.length > 0) {
                bestOffer = offers.reduce((max, offer) => 
                    offer.discount > max.discount ? offer : max
                );
                offerPercentage = bestOffer.discount;
            }

            return {
                ...product,
                offerPercentage
            };
        }));

        // Prepare the response message
        let noProductsMessage = '';
        if (products.length === 0) {
            if (categoryFilter && !globalSearch) {
                noProductsMessage = `No products found for "${searchTerm}" in the "${categoryFilter}" category. 
                    Check the global search option to search across all categories.`;
            } else {
                noProductsMessage = `No products found for "${searchTerm}".`;
            }
        }

        // Send JSON response
        res.json({
            products,
            pagination: {
                currentPage: page,
                totalPages,
                hasNext: page < totalPages,
                hasPrev: page > 1
            },
            noProductsMessage,
            searchTerm
        });

    } catch (error) {
        console.error('Search Products Error:', error);
        res.status(500).json({ error: 'Server Error during search' });
    }
};


const shopingPage = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = 9; 
        const sort = req.query.sort || 'default';
        const categoryFilter = req.query.category; // New category filter
        const user = req.session.user;
        
        // Get all listed categories
        const categories = await Category.find({ isListed: true });
        
        // Base query 
        let query = {
            isBlocked: false,
            category: { $in: categories.map(category => category._id) },
        };

        // Add category filter to query if specified
        if (categoryFilter) {
            const selectedCategory = await Category.findOne({ name: categoryFilter });
            if (selectedCategory) {
                query.category = selectedCategory._id;
            }
        }

        const skip = (page - 1) * limit;

        // Sort criteria logic remains the same as before
        let sortCriteria = {};
        switch(sort) {
            case 'price-low':
                sortCriteria = { regularPrice: 1 };
                break;
            case 'price-high':
                sortCriteria = { regularPrice: -1 };
                break;
            case 'name-asc':
                sortCriteria = { productName: 1 };
                break;
            case 'name-desc':
                sortCriteria = { productName: -1 };
                break;
            case 'new-arrivals':
                sortCriteria = { createdAt: -1 };
                break;
            default:
                sortCriteria = { createdAt: -1 };
        }

        // Get total count for pagination
        const totalProducts = await Product.countDocuments(query);
        const totalPages = Math.ceil(totalProducts / limit);

        // Validate page number
        if (page > totalPages) {
            return res.redirect(`/shop-page?page=1&sort=${sort}&category=${categoryFilter || ''}`);
        }

        // Get products with pagination and sorting
        let products = await Product.find(query)
            .populate('category')
            .sort(sortCriteria)
            .skip(skip)
            .limit(limit)
            .lean(); 

        // Get current date for offer calculations
        const currentDate = new Date();

        // Find active offers
        const offers = await Offer.find({
            status: 'active',
            expireDate: { $gte: currentDate }
        });

        // Calculate the best offer for each product
        products = await Promise.all(products.map(async (product) => {
            let bestOffer = null;
            let offerPercentage = 0;

            // Find product-specific offers
            const productOffers = offers.filter(offer =>
                offer.offerType === 'product' &&
                offer.productIds.some(id => id.toString() === product._id.toString())
            );

            // Find category-specific offers
            const categoryOffers = offers.filter(offer =>
                offer.offerType === 'category' &&
                offer.categoryIds.some(id => id.toString() === product.category._id.toString())
            );

            // Combine all applicable offers
            const allProductOffers = [...productOffers, ...categoryOffers];

            // Find the best offer
            if (allProductOffers.length > 0) {
                bestOffer = allProductOffers.reduce((maxOffer, currentOffer) =>
                    (currentOffer.discount > maxOffer.discount) ? currentOffer : maxOffer
                );
                offerPercentage = bestOffer.discount;
            }

            // Calculate the offer price
            const offerPrice = offerPercentage
                ? product.regularPrice * (1 - offerPercentage / 100)
                : null;

            // Get the first image
            const firstImage = product.variants.reduce((img, variant) => {
                if (!img && variant.images && variant.images.length > 0) {
                    return variant.images[0].filename;
                }
                return img;
            }, null);

            return {
                ...product,
                productImages: [firstImage || 'default-image.jpg'],
                bestOffer: bestOffer,
                offerPercentage: offerPercentage,
                offerPrice: offerPrice
            };
        }));


        // Pagination logic remains the same
        const pagination = {
            currentPage: page,
            totalPages: totalPages,
            hasNext: page < totalPages,
            hasPrev: page > 1,
            pages: Array.from({ length: totalPages }, (_, i) => i + 1),
            startPage: Math.max(1, page - 2),
            endPage: Math.min(totalPages, page + 2)
        };

        // Render data
        const renderData = {
            products: products,
            pagination: pagination,
            currentSort: sort,
            currentCategory: categoryFilter || '',
            categories: categories, 
            itemsPerPage: limit,
            totalItems: totalProducts
        };

        if (req.headers['x-requested-with'] === 'XMLHttpRequest') {
            return res.json({
                products,
                pagination,
                currentSort: sort,
                currentCategory: categoryFilter || ''
            });
        }

        if (user) {
            const userData = await User.findOne({ _id: user._id }).lean();
            renderData.user = userData;
        }

        res.render("shop-page", renderData);
    } catch (error) {
        console.log('Shop Page Error:', error);
        res.status(500).send('Server Error: Shop Page Not Found');
    }
};
 

// userController.js - Updated getProductDetails function
const getProductDetails = async (req, res) => {
    try {
        const productId = req.query.id;
        const product = await Product.findById(productId)
            .populate('category')
            .populate('variants');
        
        if (!product) {
            return res.status(404).render('error', { message: 'Product not found' });
        }

        // Find applicable offers
        const offers = await Offer.find({
            $or: [
                { offerType: 'product', productIds: productId },
                { offerType: 'category', categoryIds: product.category._id }
            ],
            status: 'active',
            expireDate: { $gte: new Date() }
        });

        // Calculate the maximum discount
        let maxDiscount = 0;
        let applicableOfferName = '';
        
        offers.forEach(offer => {
            if (offer.offerType === 'product' && offer.productIds.includes(productId)) {
                maxDiscount = Math.max(maxDiscount, offer.discount);
                applicableOfferName = offer.offerName;
            } else if (offer.offerType === 'category' && offer.categoryIds.includes(product.category._id)) {
                maxDiscount = Math.max(maxDiscount, offer.discount);
                applicableOfferName = offer.offerName;
            }
        });

        // Calculate discounted price
        const discountedPrice = product.regularPrice * (1 - maxDiscount / 100);

        const variants = product.variants.filter(variant => variant.isListed);
        const initialVariant = variants[0];

        const variantSizes = initialVariant.sizes.map(sizeObj => ({
            size: sizeObj.size,
            quantity: sizeObj.quantity
        }));

        res.render('product', {
            product: {
                ...product.toObject(),
                regularPrice: product.regularPrice,
                discountedPrice: discountedPrice,
                maxDiscount,
                applicableOfferName
            },
            variants,
            initialVariant,
            variantSizes,
            categoryName: product.category.name,
            isLoggedIn: !!req.session.user,
        });
    } catch (error) {
        console.error('Error fetching product details:', error);
        res.status(500).render('error', { message: 'Internal Server Error' });
    }
};



const getVariantDetails = async (req, res) => {
    try {
        const { productId, variantId } = req.params;
        
        const product = await Product.findById(productId);
        if (!product) {
            return res.status(404).json({ message: 'Product not found' });
        }

        const variant = product.variants.id(variantId);
        if (!variant) {
            return res.status(404).json({ message: 'Variant not found' });
        }

        // Transform variant images with full path
        const images = variant.images.map(img => ({
            filename: img.filename,
            fullPath: `/uploads/product-images/${img.filename}`
        }));

        const sizes = variant.sizes.map(sizeObj => ({
            size: sizeObj.size,
            quantity: sizeObj.quantity
        }));

        res.json({
            images,
            sizes
        });
    } catch (error) {
        console.error('Get Variant Details Error:', error);
        res.status(500).json({ message: 'Failed to fetch variant details' });
    }
};

This is my This is my shop-page.ejs page code:-


	<div class="container">
		<div class="row">
			<div class="col-xl-3 col-lg-4 col-md-5">
				<div class="sidebar-categories">
					<div class="head">Sort By</div>
					<div class="common-filter">
						<form action="/shop-page" method="GET" id="sortForm">
							<ul class="filter-options">
								<li class="filter-list">
									<div class="filter-box">
										<input class="pixel-radio" type="radio" id="default" name="sort" value="default" 
											<%= currentSort === 'default' ? 'checked' : '' %> onchange="this.form.submit()">
										<label for="default">Default sorting</label>
									</div>
								</li>
								<li class="filter-list">
									<div class="filter-box">
										<input class="pixel-radio" type="radio" id="price-low" name="sort" value="price-low" 
											<%= currentSort === 'price-low' ? 'checked' : '' %> onchange="this.form.submit()">
										<label for="price-low">Price: Low to High</label>
									</div>
								</li>
								<li class="filter-list">
									<div class="filter-box">
										<input class="pixel-radio" type="radio" id="price-high" name="sort" value="price-high" 
											<%= currentSort === 'price-high' ? 'checked' : '' %> onchange="this.form.submit()">
										<label for="price-high">Price: High to Low</label>
									</div>
								</li>
								<li class="filter-list">
									<div class="filter-box">
										<input class="pixel-radio" type="radio" id="name-asc" name="sort" value="name-asc" 
											<%= currentSort === 'name-asc' ? 'checked' : '' %> onchange="this.form.submit()">
										<label for="name-asc">Name: A to Z</label>
									</div>
								</li>
								<li class="filter-list">
									<div class="filter-box">
										<input class="pixel-radio" type="radio" id="name-desc" name="sort" value="name-desc" 
											<%= currentSort === 'name-desc' ? 'checked' : '' %> onchange="this.form.submit()">
										<label for="name-desc">Name: Z to A</label>
									</div>
								</li>
								<li class="filter-list">
									<div class="filter-box">
										<input class="pixel-radio" type="radio" id="new-arrivals" name="sort" value="new-arrivals" 
											<%= currentSort === 'new-arrivals' ? 'checked' : '' %> onchange="this.form.submit()">
										<label for="new-arrivals">New Arrivals</label>
									</div>
								</li>
							</ul>
						</form>
					</div>

					<div class="head">Filter by Category</div>
<div class="common-filter">
    <form action="/shop-page" method="GET" id="categoryForm">
        <ul class="filter-options">
            <li class="filter-list">
				<div class="filter-box">
					<input class="pixel-radio" type="radio" id="all-categories" name="category" value="" 
						<%= !currentCategory ? 'checked' : '' %> onchange="this.form.submit()">
					<label for="all-categories">
						All Categories 
						<% if (locals.globalSearch) { %>
							<span class="text-primary">(Global Search Enabled)</span>
						<% } %>
					</label>
				</div>
			</li>
            <% categories.forEach(function(category) { %>
                <li class="filter-list">
                    <div class="filter-box">
                        <input class="pixel-radio" type="radio" id="<%= category.name %>" name="category" value="<%= category.name %>" 
                            <%= currentCategory === category.name ? 'checked' : '' %> onchange="this.form.submit()">
                        <label for="<%= category.name %>"><%= category.name %></label>
                    </div>
                </li>
            <% }) %>
        </ul>
    </form>
</div>
				</div>
			</div>



			<div class="col-xl-9 col-lg-8 col-md-7">
				
				<!-- Start Best Seller -->
				<section class="lattest-product-area pb-40 category-list">
					
						<div class="row">
							
							<!-- single product -->
							<% products.forEach(product => { %>
								<div class="col-lg-4 col-md-6">
									<div class="single-product">
										<a href="/productDetails?id=<%= product._id %>">
											<div class="product-image-container" style="position: relative;">
												<% const firstImage = product.variants.reduce((img, variant) => {
													if (!img && variant.images && variant.images.length > 0) {
														return variant.images[0].filename;
													}
													return img;
												}, null); %>
							
												<img class="img-fluid" 
													 src="/uploads/product-images/<%= firstImage || 'placeholder.jpg' %>" 
													 alt="<%= product.productName %>">
							
												<% if (product.offerPercentage && product.offerPercentage > 0) { %>
													<div style="position: absolute; top: 10px; right: 10px; background-color: red; color: white; padding: 5px; border-radius: 3px;">
														<%= product.offerPercentage %>% OFF
													</div>
												<% } %>
											</div>
										</a>
							
										<div class="product-details">
											<h6><%= product.productName.length > 20 ? product.productName.substring(0, 20) + '...' : product.productName %></h6>
											<div class="price">
												<% const offerPrice = product.offerPercentage ? product.regularPrice * (1 - product.offerPercentage / 100) : null; %>
												<% if (offerPrice && offerPrice < product.regularPrice) { %>
													<h6>₹ <%= Math.round(offerPrice) %></h6>
													<h6 class="l-through text-muted">₹ <%= product.regularPrice %></h6>
												<% } else { %>
													<h6>₹ <%= product.regularPrice %></h6>
												<% } %>
											</div>
											<div class="prd-bottom">
												<a href="#" class="social-info add-to-cart" data-product-id="<%= product._id %>">
													<span class="ti-bag"></span>
													<p class="hover-text">add to cart</p>
												</a>
												<a href="#" class="social-info add-to-wishlist" data-product-id="<%= product._id %>">
													<span class="lnr lnr-heart"></span>
													<p class="hover-text">Wishlist</p>
												</a>
											</div>
											
										</div>
									</div>
								</div>
							<% }); %>
					</div>



					<% if (locals.searchTerm) { %>
						<div class="search-results-header">
							<h3>Search Results for "<%= searchTerm %>"</h3>
							<% if (products.length === 0) { %>
								<% if (locals.noProductsInCategory) { %>
									<div class="alert alert-warning">
										<p>No products found in the "<%= currentCategory %>" category. 
										   <% if (locals.suggestGlobalSearch) { %>
											   Please check the global search option to search across all categories.
										   <% } %>
										</p>
									</div>
								<% } else { %>
									<p>No products found matching your search.</p>
								<% } %>
							<% } %>
						</div>
					<% } %>

					<% if (locals.noProductsMessage) { %>
						<div class="alert alert-warning text-center">
							<%= noProductsMessage %>
						</div>
					<% } %>
				</section>

            
				<!-- Start Filter Bar -->
				<div class="filter-bar d-flex flex-wrap align-items-center">

					<div class="sorting">
						<div class="sorting-options">
							<form action="/shop-page" method="GET" id="sortForm">
								<select name="sort" class="form-control" onchange="this.form.submit()">
									<option value="default" <%= currentSort === 'default' ? 'selected' : '' %>>Default sorting</option>
									<option value="price-low" <%= currentSort === 'price-low' ? 'selected' : '' %>>Price: Low to High</option>
									<option value="price-high" <%= currentSort === 'price-high' ? 'selected' : '' %>>Price: High to Low</option>
									<option value="name-asc" <%= currentSort === 'name-asc' ? 'selected' : '' %>>Name: A to Z</option>
									<option value="name-desc" <%= currentSort === 'name-desc' ? 'selected' : '' %>>Name: Z to A</option>
									<option value="new-arrivals" <%= currentSort === 'new-arrivals' ? 'selected' : '' %>>New Arrivals</option>
								</select>
							</form>
						</div>
					</div>
					<div class="sorting mr-auto">
						
					</div>
					<div class="filter-bar d-flex flex-wrap align-items-center">
						<% if (pagination.totalPages > 1) { %>
							<div class="pagination">
								<% if (pagination.hasPrev) { %>
									<a href="/shop-page?page=<%= pagination.currentPage - 1 %>&sort=<%= currentSort %>" class="prev-arrow">
										<i class="fa fa-long-arrow-left" aria-hidden="true"></i>
									</a>
								<% } %>
					
								<% 
								let startPage = Math.max(1, pagination.currentPage - 2);
								let endPage = Math.min(pagination.totalPages, pagination.currentPage + 2);
								
								if (startPage > 1) { %>
									<a href="/shop-page?page=1&sort=<%= currentSort %>">1</a>
									<% if (startPage > 2) { %>
										<span class="dot-dot">...</span>
									<% } %>
								<% } %>
					
								<% for(let i = startPage; i <= endPage; i++) { %>
									<a href="/shop-page?page=<%= i %>&sort=<%= currentSort %>" 
									   class="<%= pagination.currentPage === i ? 'active' : '' %>">
										<%= i %>
									</a>
								<% } %>
					
								<% if (endPage < pagination.totalPages) { %>
									<% if (endPage < pagination.totalPages - 1) { %>
										<span class="dot-dot">...</span>
									<% } %>
									<a href="/shop-page?page=<%= pagination.totalPages %>&sort=<%= currentSort %>">
										<%= pagination.totalPages %>
									</a>
								<% } %>
					
								<% if (pagination.hasNext) { %>
									<a href="/shop-page?page=<%= pagination.currentPage + 1 %>&sort=<%= currentSort %>" class="next-arrow">
										<i class="fa fa-long-arrow-right" aria-hidden="true"></i>
									</a>
								<% } %>
							</div>
						<% } %>
					</div>
				</div>
				<!-- End Filter Bar -->
			</div>
		</div>
	</div>

    <script src="js/vendor/jquery-2.2.4.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js" integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4"
	 crossorigin="anonymous"></script>
	<script src="js/vendor/bootstrap.min.js"></script>
	<script src="js/jquery.ajaxchimp.min.js"></script>
	<script src="js/jquery.nice-select.min.js"></script>
	<script src="js/jquery.sticky.js"></script>
	<script src="js/nouislider.min.js"></script>
	<script src="js/jquery.magnific-popup.min.js"></script>
	<script src="js/owl.carousel.min.js"></script>
	<!--gmaps Js-->
	<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCjCGmQ0Uq4exrzdcL6rvxywDDOvfAu6eE"></script>
	<script src="js/gmaps.min.js"></script>
	<script src="js/main.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>



	<script>
        // Add this code at the bottom of your shop-page.ejs file, replacing the existing search-related JavaScript
document.addEventListener('DOMContentLoaded', function() {
    const searchForm = document.querySelector('#search_input_box form');
    const searchInput = document.getElementById('search_input');
    const globalSearchToggle = document.getElementById('globalSearchToggle');
    const resultsContainer = document.querySelector('.category-list .row');
    const currentCategory = document.querySelector('input[name="category"]:checked')?.value || '';

    if (searchForm) {
        searchForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            try {
                const searchTerm = searchInput.value;
                const isGlobalSearch = globalSearchToggle.checked;
                
                // Get the current selected category
                const selectedCategory = document.querySelector('input[name="category"]:checked')?.value || '';
                
                // Make the search request
                const response = await fetch(`/search?q=${encodeURIComponent(searchTerm)}&category=${encodeURIComponent(selectedCategory)}&globalSearch=${isGlobalSearch}`, {
                    method: 'GET',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                if (!response.ok) {
                    throw new Error('Search request failed');
                }

                const data = await response.json();

                // Update the products display
                if (data.products.length === 0) {
                    resultsContainer.innerHTML = `
                        <div class="col-12">
                            <div class="alert alert-warning text-center">
                                ${data.noProductsMessage || 'No products found matching your search criteria.'}
                            </div>
                        </div>
                    `;
                } else {
                    resultsContainer.innerHTML = data.products.map(product => {
                        const firstImage = product.variants.reduce((img, variant) => {
                            if (!img && variant.images && variant.images.length > 0) {
                                return variant.images[0].filename;
                            }
                            return img;
                        }, null);

                        const offerPrice = product.offerPercentage ? 
                            product.regularPrice * (1 - product.offerPercentage / 100) : null;

                        return `
                            <div class="col-lg-4 col-md-6">
                                <div class="single-product">
                                    <a href="/productDetails?id=${product._id}">
                                        <div class="product-image-container" style="position: relative;">
                                            <img class="img-fluid" 
                                                src="/uploads/product-images/${firstImage || 'placeholder.jpg'}" 
                                                alt="${product.productName}">
                                            ${product.offerPercentage ? `
                                                <div style="position: absolute; top: 10px; right: 10px; background-color: red; color: white; padding: 5px; border-radius: 3px;">
                                                    ${product.offerPercentage}% OFF
                                                </div>
                                            ` : ''}
                                        </div>
                                    </a>
                                    <div class="product-details">
                                        <h6>${product.productName.length > 20 ? product.productName.substring(0, 20) + '...' : product.productName}</h6>
                                        <div class="price">
                                            ${offerPrice ? `
                                                <h6>₹ ${Math.round(offerPrice)}</h6>
                                                <h6 class="l-through text-muted">₹ ${product.regularPrice}</h6>
                                            ` : `
                                                <h6>₹ ${product.regularPrice}</h6>
                                            `}
                                        </div>
                                        <div class="prd-bottom">
                                            <a href="#" class="social-info add-to-cart" data-product-id="${product._id}">
                                                <span class="ti-bag"></span>
                                                <p class="hover-text">add to cart</p>
                                            </a>
                                            <a href="#" class="social-info add-to-wishlist" data-product-id="${product._id}">
                                                <span class="lnr lnr-heart"></span>
                                                <p class="hover-text">Wishlist</p>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `;
                    }).join('');
                }

                // Update pagination if provided
                const paginationContainer = document.querySelector('.pagination');
                if (paginationContainer && data.pagination) {
                    // Update pagination HTML here if needed
                }

            } catch (error) {
                console.error('Search error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Search Error',
                    text: 'An error occurred while searching. Please try again.'
                });
            }
        });
    }
});
    </script>



<!-- This is for my wishlist add botton -->
<script>
    

	// Update the add-to-wishlist click handler in shop-page.ejs
	document.addEventListener('DOMContentLoaded', function() {
    // Update wishlist click handler
    document.querySelectorAll('.add-to-wishlist').forEach(button => {
        button.addEventListener('click', async function(e) {
            e.preventDefault();
            const productId = this.dataset.productId;

            try {
                const response = await fetch('/add-to-wishlist', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content
                    },
                    body: JSON.stringify({ productId })
                });

                const data = await response.json();

                if (response.status === 401) {
                    // Handle unauthorized/not logged in
                    Swal.fire({
                        title: 'Please Login',
                        text: 'You need to login to add items to wishlist',
                        icon: 'info',
                        showCancelButton: true,
                        confirmButtonText: 'Login Now',
                        cancelButtonText: 'Cancel'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = '/login';
                        }
                    });
                    return;
                }

                if (!response.ok) {
                    throw new Error(data.message || 'Failed to add to wishlist');
                }

                if (data.isExisting) {
                    Swal.fire('Info', 'Product already in wishlist', 'info');
                } else {
                    Swal.fire('Success', 'Product added to wishlist', 'success');
                }
            } catch (error) {
                Swal.fire('Error', error.message, 'error');
            }
        });
    });
});
	</script>

