
This is my productSchema.js code:- 
const mongoose = require("mongoose");
const { Schema } = mongoose;

const productSchema = new Schema({
    productName: {
        type: String,
        required: true
    },
    description: {
        type: String,
        default: ''
    },
    category: {
        type: Schema.Types.ObjectId,
        ref: "Category",
        required: true
    },
    regularPrice: {
        type: Number,
        required: true
    },
    
    variants: [{
        color: { type: String, required: true },
        sizes: [{
            size: { type: Number, required: true },
            quantity: { type: Number, required: true }
        }],
        images: [{
            filename: { type: String, required: true },
            contentType: { type: String, default: 'image/jpeg' }
        }],
        isListed: { type: Boolean, default: true },
        mainImage: { type: Boolean, default: false }  
    }],
    
    isBlocked: {
        type: Boolean,
        default: false
    },
   
}, { timestamps: true });

const Product = mongoose.model("Product", productSchema);
module.exports = Product;



This is my offerSchema.js code:- 
const mongoose = require("mongoose");
const offerSchema = new mongoose.Schema(
  {
    offerType: {
      type: String,
      enum: ["product", "category", "referral"],
      required: true,
    },
    offerName: {
      type: String,
      required: true,
      trim: true
    },
    discount: {
      type: Number,
      required: true,
      min: 0,
      max: 100
    },
    expireDate: {
      type: Date,
      required: true
    },
    productIds: [{ 
      type: mongoose.Schema.Types.ObjectId,
      ref: "Product",
      required: function () {
        return this.offerType === "product";
      },
    }],
    categoryIds: [{ 
      type: mongoose.Schema.Types.ObjectId,
      ref: "Category",
      required: function () {
        return this.offerType === "category";
      },
    }],
    referralCode: {
      type: String,
      required: function () {
        return this.offerType === "referral";
      },
      unique: true,
      sparse: true
    },
    status: {
      type: String,
      enum: ["active", "inactive"],
      default: "active",
    },
    isListed: {
      type: Boolean,
      default: true
    }
  },
  { timestamps: true }
);
const Offer = mongoose.model("Offer", offerSchema);
module.exports = Offer;


This is my wishlistSchema.js code:- 
const mongoose = require("mongoose");
const { Schema } = mongoose;

const wishlistSchema = new Schema({
    userId: {
        type: Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    items: [{
        productId: {
            type: Schema.Types.ObjectId,
            ref: 'Product',
            required: true
        },
        selectedVariant: {
            color: String,
            size: Number
        },
        addedAt: {
            type: Date,
            default: Date.now
        } 
    }]
}, { timestamps: true });

const Wishlist = mongoose.model('Wishlist', wishlistSchema);
module.exports = Wishlist; 


This is my cartSchema.js code:- 
const mongoose= require('mongoose');
const {Schema}= mongoose;


const cartSchema = new mongoose.Schema({
    userId: {
        type: Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    items: [{
        productId: {
            type: Schema.Types.ObjectId,
            ref: 'Product',
            required: true
        },
        variantId: { 
            type: Schema.Types.ObjectId,
            default: null
        },
        size: {  
            type: Number,
            required: true
        },
        color: {  
            type: String,
            required: true
        },
        quantity: {
            type: Number,
            default: 1
        },
        price: {
            type: Number,
            required: true
        },
        totalPrice: {
            type: Number,
            required: true
        },
        status: {
            type: String,
            default: 'placed'
        },
        cancellationReason: {
            type: String,
            default: 'none'
        }
    }]
});

const Cart= mongoose.model('Cart',cartSchema)
module.exports= Cart



This is my userRouter.js code:- 

const express=require('express');
const router=express.Router();
const userController= require("../controllers/user/userController");
const userCartController = require('../controllers/user/userCartController');
const userProfileController = require('../controllers/user/userProfileController');
const checkoutController = require('../controllers/user/checkOutController')
const wishlistController = require('../controllers/user/wishlistController')
const { userAuth, adminAuth } = require('../middleware/auth');
const passport = require('passport');

router.get('/search', userController.searchProducts);

router.get('/shop-page', userController.shopingPage);
router.get('/productDetails', userController.getProductDetails);
router.get('/product/:productId/variant/:variantId', userController.getVariantDetails);
router.get('/product/:productId/variant/first', userAuth, userController.getVariantDetails);
router.get('/check-auth', userAuth, (req, res) => res.status(200).json({ authenticated: true }));
router.get('/product/:productId', userController.getProductForCart);
router.get('/product/:productId/offers', userController.getProductOffers);

router.get('/userCart',userAuth, userCartController.getCartPage); 
router.post('/addToCart/:id', userAuth, userCartController.addToCart);
router.delete('/removeFromCart/:productId', userAuth, userCartController.removeFromCart);
router.put('/updateCart/:productId', userAuth, userCartController.updateCart);
router.get('/check-stock/:productId', userAuth, userCartController.checkStockAvailability);
router.post('/check-cart-item', userAuth, userCartController.checkCartItem);

router.post('/add-to-wishlist', userAuth, wishlistController.addToWishlist);
router.get('/wishlist', userAuth, wishlistController.getWishlist);
router.delete('/remove-from-wishlist/:productId', userAuth, wishlistController.removeFromWishlist);
router.delete('/clear-wishlist', userAuth, wishlistController.clearWishlist);
router.post('/wishlist/add-all-to-cart', userAuth, wishlistController.addAllToCart);
router.patch('/update-wishlist-variant/:productId', userAuth, wishlistController.updateWishlistVariant);
router.get('/get-wishlist-items', userAuth, wishlistController.getWishlistItems);
router.get('/check-wishlist-item/:productId', userAuth, wishlistController.checkWishlistItem);

This is my userController.js code:- 




const shopingPage = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = 9; 
        const sort = req.query.sort || 'default';
        const categoryFilter = req.query.category || '';
        const user = req.session.user;
        
        // Get all listed categories
        const categories = await Category.find({ isListed: true });
        
        // Base query with isBlocked check
        let query = { isBlocked: false };

        // Important: Add category filter to query if specified
        if (categoryFilter && categoryFilter !== '') {
            const selectedCategory = await Category.findOne({ 
                name: categoryFilter,
                isListed: true 
            });
            if (selectedCategory) {
                // Ensure strict category matching
                query.category = selectedCategory._id;
            }
        }

        const skip = (page - 1) * limit;

        // Sort criteria
        let sortCriteria = {};
        switch(sort) {
            case 'price-low':
                sortCriteria = { regularPrice: 1 };
                break;
            case 'price-high':
                sortCriteria = { regularPrice: -1 };
                break;
            case 'name-asc':
                sortCriteria = { productName: 1 };
                break;
            case 'name-desc':
                sortCriteria = { productName: -1 };
                break;
            case 'new-arrivals':
                sortCriteria = { createdAt: -1 };
                break;
            default:
                sortCriteria = { createdAt: -1 };
        }

        // Get total count for selected category only
        const totalProducts = await Product.countDocuments(query);
        const totalPages = Math.ceil(totalProducts / limit);

        // Validate page number and adjust if necessary
        if (page > totalPages) {
            return res.redirect(`/shop-page?page=1&sort=${sort}&category=${categoryFilter || ''}`);
        }

        // Get products with category filter, pagination and sorting
        let products = await Product.find(query)
            .populate('category')
            .sort(sortCriteria)
            .skip(skip)
            .limit(limit)
            .lean();

        // Rest of your existing offer calculation code...
        const currentDate = new Date();
        const offers = await Offer.find({
            status: 'active',
            expireDate: { $gte: currentDate }
        });

        products = await Promise.all(products.map(async (product) => {
            // Your existing product mapping code...
            let bestOffer = null;
            let offerPercentage = 0;

            const productOffers = offers.filter(offer =>
                offer.offerType === 'product' &&
                offer.productIds.some(id => id.toString() === product._id.toString())
            );

            const categoryOffers = offers.filter(offer =>
                offer.offerType === 'category' &&
                offer.categoryIds.some(id => id.toString() === product.category._id.toString())
            );

            const allProductOffers = [...productOffers, ...categoryOffers];

            if (allProductOffers.length > 0) {
                bestOffer = allProductOffers.reduce((maxOffer, currentOffer) =>
                    (currentOffer.discount > maxOffer.discount) ? currentOffer : maxOffer
                );
                offerPercentage = bestOffer.discount;
            }

            const offerPrice = offerPercentage
                ? product.regularPrice * (1 - offerPercentage / 100)
                : null;

            const firstImage = product.variants.reduce((img, variant) => {
                if (!img && variant.images && variant.images.length > 0) {
                    return variant.images[0].filename;
                }
                return img;
            }, null);

            let isInWishlist = false;
            if (req.session.user) {
                const wishlist = await Wishlist.findOne({
                    userId: req.session.user._id,
                    'products.productId': product._id
                });
                isInWishlist = !!wishlist;
            }

            return {
                ...product,
                productImages: [firstImage || 'default-image.jpg'],
                bestOffer: bestOffer,
                offerPercentage: offerPercentage,
                offerPrice: offerPrice,
                isInWishlist: isInWishlist
            };
        }));

        const pagination = {
            currentPage: page,
            totalPages: totalPages,
            hasNext: page < totalPages,
            hasPrev: page > 1,
            pages: Array.from({ length: totalPages }, (_, i) => i + 1),
            startPage: Math.max(1, page - 2),
            endPage: Math.min(totalPages, page + 2)
        };

        const renderData = {
            products: products,
            pagination: pagination,
            currentSort: sort,
            currentCategory: categoryFilter,
            categories: categories,
            itemsPerPage: limit,
            totalItems: totalProducts
        };

        if (req.headers['x-requested-with'] === 'XMLHttpRequest') {
            return res.json(renderData);
        }

        if (user) {
            const userData = await User.findOne({ _id: user._id }).lean();
            renderData.user = userData;
        }

        res.render("shop-page", renderData);
    } catch (error) {
        console.log('Shop Page Error:', error);
        res.status(500).send('Server Error: Shop Page Not Found');
    }
};
 

 
 
const getProductForCart = async (req, res) => {
    try {
        const product = await Product.findById(req.params.productId)
            .populate('category')
            .select('productName regularPrice variants');
        res.json(product);
    } catch (error) {
        res.status(500).json({ error: 'Failed to fetch product details' });
    }
};


const getProductOffers = async (req, res) => {
    try {
        const productId = req.params.productId;
        const product = await Product.findById(productId).populate('category');
        
        if (!product) {
            return res.status(404).json({ message: 'Product not found' });
        }

        const offers = await Offer.find({
            $or: [
                { offerType: 'product', productIds: productId },
                { offerType: 'category', categoryIds: product.category._id }
            ],
            status: 'active',
            expireDate: { $gte: new Date() }
        });

        res.json({ offers });
    } catch (error) {
        console.error('Error fetching offers:', error);
        res.status(500).json({ message: 'Failed to fetch offers' });
    }
};

This is my This is my shop-page.ejs page code:-


<style>
    /* Update your existing wishlist button styles */
    .add-to-wishlist .wishlist-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 35px;
        height: 35px;
        background: #828bb3; /* Default gray background */
        border-radius: 50%;
        margin: 0 auto;
        transition: all 0.3s ease;
    }
    
    .add-to-wishlist .fa-heart {
        color: white !important; /* Always white heart */
        transition: transform 0.3s ease;
    }
    
    .add-to-wishlist.in-wishlist .wishlist-icon {
        background-color: #ff0000; /* Red background when in wishlist */
    }
    
    /* Hover effects */
    .add-to-wishlist:hover .wishlist-icon {
        transform: scale(1.1);
    }
    
    .add-to-wishlist:hover .fa-heart {
        transform: scale(1.2);
    }
    
        </style>
    
        
    <!-- card modal styles -->
    <style>
    
        /* Add these styles to make the modal more compact */
    .product-modal .modal-dialog {
        max-width: 350px; /* Reduced width */
    }
    
    .product-modal .modal-header {
        padding: 0.75rem;
        background: #384aeb;
        border-bottom: none;
    }
    
    .product-modal .modal-body {
        padding: 0;
    }
    
    .product-modal .product-carousel {
        max-height: 200px; /* Reduced height */
    }
    
    .product-modal .carousel-inner img {
        height: 150px; /* Reduced height */
        object-fit: contain;
    }
    
    .product-modal .product-info {
        padding: 1rem !important; 
    }
    
    /* Improved thumbnail styling */
    .carousel-thumbnails {
        padding: 0.25rem;
        gap: 0.25rem;
        background: #f8f9fa;
    }
    
    .carousel-thumbnail {
        width: 30px; 
        height: 30px;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    /* Improved size selection */
    .size-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(45px, 1fr));
        gap: 0.5rem;
        padding: 0.75rem;
    }
    
    .size-box {
        height: 35px;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 0.9rem;
    }
    
    .size-box.selected {
        background: #384aeb;
        color: white;
        border-color: #384aeb;
    }
    
    /* Price section styling */
    .price-section {
        padding: 0.75rem;
        background: #f8f9fa;
        border-radius: 4px;
        margin: 0.75rem;
    }
    
    .offer-price {
        font-size: 1.25rem;
        font-weight: 600;
        color: #384aeb;
    }
    
    .regular-price {
        text-decoration: line-through;
        color: #6c757d;
        font-size: 0.9rem;
    }
    
    /* Footer styling */
    .modal-footer {
        padding: 0.75rem;
        border-top: none;
        justify-content: space-between;
    }
    
    .btn-add-cart {
        background: #384aeb;
        color: white;
        border-radius: 25px;
        padding: 0.5rem 1.5rem;
        transition: all 0.3s ease;
    }
    
    .btn-add-cart:hover {
        background: #2a3eb1;
        transform: translateY(-1px);
    }
        </style>
    
    <div class="container">
		<div class="row">
			<div class="col-xl-3 col-lg-4 col-md-5">
				<div class="sidebar-categories">
					<div class="head">Sort By</div>
					<div class="common-filter">
						<form action="/shop-page" method="GET" id="sortForm">
							<input type="hidden" name="category" value="<%= currentCategory %>">
							<ul class="filter-options">
								<li class="filter-list">
									<div class="filter-box">
										<input class="pixel-radio" type="radio" id="default" name="sort" value="default" 
											<%= currentSort === 'default' ? 'checked' : '' %> onchange="this.form.submit()">
										<label for="default">Default sorting</label>
									</div>
								</li>
								<li class="filter-list">
									<div class="filter-box">
										<input class="pixel-radio" type="radio" id="price-low" name="sort" value="price-low" 
											<%= currentSort === 'price-low' ? 'checked' : '' %> onchange="this.form.submit()">
										<label for="price-low">Price: Low to High</label>
									</div>
								</li>
								<li class="filter-list">
									<div class="filter-box">
										<input class="pixel-radio" type="radio" id="price-high" name="sort" value="price-high" 
											<%= currentSort === 'price-high' ? 'checked' : '' %> onchange="this.form.submit()">
										<label for="price-high">Price: High to Low</label>
									</div>
								</li>
								<li class="filter-list">
									<div class="filter-box">
										<input class="pixel-radio" type="radio" id="name-asc" name="sort" value="name-asc" 
											<%= currentSort === 'name-asc' ? 'checked' : '' %> onchange="this.form.submit()">
										<label for="name-asc">Name: A to Z</label>
									</div>
								</li>
								<li class="filter-list">
									<div class="filter-box">
										<input class="pixel-radio" type="radio" id="name-desc" name="sort" value="name-desc" 
											<%= currentSort === 'name-desc' ? 'checked' : '' %> onchange="this.form.submit()">
										<label for="name-desc">Name: Z to A</label>
									</div>
								</li>
								<li class="filter-list">
									<div class="filter-box">
										<input class="pixel-radio" type="radio" id="new-arrivals" name="sort" value="new-arrivals" 
											<%= currentSort === 'new-arrivals' ? 'checked' : '' %> onchange="this.form.submit()">
										<label for="new-arrivals">New Arrivals</label>
									</div>
								</li>
							</ul>
						</form>
					</div>

					<div class="head">Filter by Category</div>
<div class="common-filter">
    <!-- Replace your existing category form -->
<form action="/shop-page" method="GET" id="categoryForm">
    <input type="hidden" name="sort" value="<%= currentSort %>">
    <ul class="filter-options">
        <li class="filter-list">
            <div class="filter-box">
                <input class="pixel-radio" type="radio" id="all-categories" name="category" value="" 
                    <%= !currentCategory ? 'checked' : '' %> onchange="this.form.submit()">
                <label for="all-categories">All Categories</label>
            </div>
        </li>
        <% categories.forEach(function(category) { %>
            <li class="filter-list">
                <div class="filter-box">
                    <input class="pixel-radio" type="radio" id="<%= category.name %>" name="category" value="<%= category.name %>" 
                        <%= currentCategory === category.name ? 'checked' : '' %> onchange="this.form.submit()">
                    <label for="<%= category.name %>"><%= category.name %></label>
                </div>
            </li>
        <% }) %>
    </ul>
</form>
</div>
				</div>
			</div>



			<div class="col-xl-9 col-lg-8 col-md-7">
				
				<!-- Start Best Seller -->
				<section class="lattest-product-area pb-40 category-list">
					
						<div class="row">
							
							<!-- single product -->
							<% products.forEach(product => { %>
								<div class="col-lg-4 col-md-6">
									<div class="single-product">
										<a href="/productDetails?id=<%= product._id %>">
											<div class="product-image-container" style="position: relative;">
												<% const firstImage = product.variants.reduce((img, variant) => {
													if (!img && variant.images && variant.images.length > 0) {
														return variant.images[0].filename;
													}
													return img;
												}, null); %>
							
												<img class="img-fluid" 
													 src="/uploads/product-images/<%= firstImage || 'placeholder.jpg' %>" 
													 alt="<%= product.productName %>">
							
												<% if (product.offerPercentage && product.offerPercentage > 0) { %>
													<div style="position: absolute; top: 10px; right: 10px; background-color: red; color: white; padding: 5px; border-radius: 3px;">
														<%= product.offerPercentage %>% OFF
													</div>
												<% } %>
											</div>
										</a>
							
										<div class="product-details">
											<h6><%= product.productName.length > 20 ? product.productName.substring(0, 20) + '...' : product.productName %></h6>
											<div class="price">
												<% const offerPrice = product.offerPercentage ? product.regularPrice * (1 - product.offerPercentage / 100) : null; %>
												<% if (offerPrice && offerPrice < product.regularPrice) { %>
													<h6>₹ <%= Math.round(offerPrice) %></h6>
													<h6 class="l-through text-muted">₹ <%= product.regularPrice %></h6>
												<% } else { %>
													<h6>₹ <%= product.regularPrice %></h6>
												<% } %>
											</div>
											<div class="prd-bottom">
												<a href="#" class="social-info add-to-cart" data-product-id="<%= product._id %>">
													<span class="ti-bag"></span>
													<p class="hover-text">add to cart</p>
													
												</a>
												<a href="#" class="social-info add-to-wishlist <%= product.isInWishlist ? 'in-wishlist' : '' %>" 
													data-product-id="<%= product._id %>">
													 <span class="wishlist-icon">
														 <i class="fa fa-heart" style="color: '<%= product.isInWishlist ? 'rgb(255, 0, 0)' : '#828bb3' %>'"></i>
													 </span>
													 <p class="hover-text">Wishlist</p>
												 </a>
											</div>
											
										</div>
									</div>
								</div>
							<% }); %>
					</div>



					<% if (locals.searchTerm) { %>
						<div class="search-results-header">
							<h3>Search Results for "<%= searchTerm %>"</h3>
							<% if (products.length === 0) { %>
								<% if (locals.noProductsInCategory) { %>
									<div class="alert alert-warning">
										<p>No products found in the "<%= currentCategory %>" category. 
										   <% if (locals.suggestGlobalSearch) { %>
											   Please check the global search option to search across all categories.
										   <% } %>
										</p>
									</div>
								<% } else { %>
									<p>No products found matching your search.</p>
								<% } %>
							<% } %>
						</div>
					<% } %>

					<% if (locals.noProductsMessage) { %>
						<div class="alert alert-warning text-center">
							<%= noProductsMessage %>
						</div>
					<% } %>
				</section>

            
				<!-- Start Filter Bar -->
				<div class="filter-bar d-flex flex-wrap align-items-center">

					<div class="sorting">
						<div class="sorting-options">
							<form action="/shop-page" method="GET" id="sortDropdownForm">
								<input type="hidden" name="category" value="<%= currentCategory %>">
								<select name="sort" class="form-control" onchange="this.form.submit()">
									<option value="default" <%= currentSort === 'default' ? 'selected' : '' %>>Default sorting</option>
									<option value="price-low" <%= currentSort === 'price-low' ? 'selected' : '' %>>Price: Low to High</option>
									<option value="price-high" <%= currentSort === 'price-high' ? 'selected' : '' %>>Price: High to Low</option>
									<option value="name-asc" <%= currentSort === 'name-asc' ? 'selected' : '' %>>Name: A to Z</option>
									<option value="name-desc" <%= currentSort === 'name-desc' ? 'selected' : '' %>>Name: Z to A</option>
									<option value="new-arrivals" <%= currentSort === 'new-arrivals' ? 'selected' : '' %>>New Arrivals</option>
								</select>
							</form>
						</div>
					</div>
					
					<div class="sorting mr-auto">
						
					</div>
					<div class="filter-bar d-flex flex-wrap align-items-center">
						
						<div class="pagination">
							<% if (pagination.totalPages > 0) { %>
								<!-- Previous button - always visible -->
								<a href="/shop-page?page=<%= pagination.currentPage - 1 %>&sort=<%= currentSort %>&category=<%= currentCategory %>" 
								   class="prev-arrow <%= pagination.currentPage <= 1 ? 'disabled' : '' %>">
									<i class="fa fa-long-arrow-left" aria-hidden="true"></i>
								</a>
						
								<!-- First page - always visible -->
								<a href="/shop-page?page=1&sort=<%= currentSort %>&category=<%= currentCategory %>" 
								   class="<%= pagination.currentPage === 1 ? 'active' : '' %>">1</a>
						
								<% 
								let totalVisible = 5;
								let startPage = Math.max(2, pagination.currentPage - Math.floor(totalVisible/2));
								let endPage = Math.min(pagination.totalPages - 1, startPage + totalVisible - 1);
								
								if (startPage > 2) { %>
									<span class="dot-dot">...</span>
								<% } 
								
								for (let i = startPage; i <= endPage; i++) { %>
									<a href="/shop-page?page=<%= i %>&sort=<%= currentSort %>&category=<%= currentCategory %>" 
									   class="<%= pagination.currentPage === i ? 'active' : '' %>"><%= i %></a>
								<% } 
								
								if (endPage < pagination.totalPages - 1) { %>
									<span class="dot-dot">...</span>
								<% } %>
						
								<!-- Last page - always visible if not first page -->
								<% if (pagination.totalPages > 1) { %>
									<a href="/shop-page?page=<%= pagination.totalPages %>&sort=<%= currentSort %>&category=<%= currentCategory %>" 
									   class="<%= pagination.currentPage === pagination.totalPages ? 'active' : '' %>">
										<%= pagination.totalPages %>
									</a>
								<% } %>
						
								<!-- Next button - always visible -->
								<a href="/shop-page?page=<%= pagination.currentPage + 1 %>&sort=<%= currentSort %>&category=<%= currentCategory %>" 
								   class="next-arrow <%= pagination.currentPage >= pagination.totalPages ? 'disabled' : '' %>">
									<i class="fa fa-long-arrow-right" aria-hidden="true"></i>
								</a>
							<% } %>
						</div>

					</div>
				</div>
				
			</div>
		</div>
	</div>


	<!-- add Tp Cart modal -->
	<div class="modal fade product-modal" id="addToCartModal" tabindex="-1">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header bg-primary text-white">
					<h5 class="modal-title">
						<i class="fa fa-shopping-cart mr-2"></i>
						Add to Cart
					</h5>
					<button type="button" class="close text-white" data-dismiss="modal">&times;</button>
				</div>
				<div class="modal-body p-0">
					<!-- Product Image Carousel with Thumbnails -->
					<div class="product-carousel">
						<div id="productImageCarousel" class="carousel slide" data-ride="carousel">
							<div class="carousel-inner" id="carouselInner">
								<!-- Images dynamically added here -->
							</div>
							<a class="carousel-control-prev" href="#productImageCarousel" role="button" data-slide="prev">
								<span class="carousel-control-prev-icon"></span>
							</a>
							<a class="carousel-control-next" href="#productImageCarousel" role="button" data-slide="next">
								<span class="carousel-control-next-icon"></span>
							</a>
							<!-- Thumbnails -->
							<div class="carousel-thumbnails mt-3 d-flex justify-content-center">
								<!-- Thumbnails dynamically added here -->
							</div>
						</div>
					</div>
	
					<!-- Product Details Section -->
					<div class="product-info p-4">
						<h4 id="modalProductName" class="product-name mb-2"></h4>
						<p id="modalProductCategory" class="product-category text-muted"></p>
	
						<!-- Price Section with Animation -->
						<div class="price-section mb-4">
							<div class="d-flex align-items-center">
								<span id="modalOfferPrice" class="offer-price mr-3"></span>
								<span id="modalRegularPrice" class="regular-price mr-3"></span>
								<span id="modalDiscountBadge" class="discount-badge animate-pulse"></span>
							</div>
						</div>
	
						<!-- Size Selection with Visual Feedback -->
						<div class="size-section mb-4">
							<h6 class="size-title d-flex justify-content-between">
								<span>Select Size</span>
								<small class="text-primary">Size Guide</small>
							</h6>
							<div id="modalSizeBoxes" class="size-grid">
								<!-- Size boxes dynamically added here -->
							</div>
							<small id="sizeError" class="size-error text-danger mt-2" style="display: none;">
								<i class="fa fa-exclamation-circle mr-1"></i>
								Please select a size to continue
							</small>
						</div>
	
						<!-- Stock Status -->
						<div class="stock-status mb-3">
							<i class="fa fa-check-circle text-success mr-2"></i>
							<span>In Stock</span>
						</div>
	
						<!-- Product Link -->
						<a href="#" id="viewDetailsLink" class="btn btn-link text-primary w-100">
							<i class="fa fa-external-link mr-1"></i>
							View Full Details
						</a>
					</div>
				</div>
	
				<!-- Modal Footer with Enhanced Buttons -->
				<div class="modal-footer border-0 px-4 pb-4">
					<button type="button" class="btn btn-light" data-dismiss="modal">
						<i class="fa fa-times mr-1"></i>
						Close
					</button>
					<button type="button" class="btn btn-primary" id="confirmAddToCart" disabled>
						<i class="fa fa-shopping-cart mr-1"></i>
						Add to Cart
					</button>
				</div>
			</div>
		</div>
	</div>

    <script src="js/vendor/jquery-2.2.4.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js" integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4"
	 crossorigin="anonymous"></script>
	<script src="js/vendor/bootstrap.min.js"></script>
	<script src="js/jquery.ajaxchimp.min.js"></script>
	<script src="js/jquery.nice-select.min.js"></script>
	<script src="js/jquery.sticky.js"></script>
	<script src="js/nouislider.min.js"></script>
	<script src="js/jquery.magnific-popup.min.js"></script>
	<script src="js/owl.carousel.min.js"></script>
	<!--gmaps Js-->
	<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCjCGmQ0Uq4exrzdcL6rvxywDDOvfAu6eE"></script>
	<script src="js/gmaps.min.js"></script>
	<script src="js/main.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

	<script>
        // Add this code at the bottom of your shop-page.ejs file, replacing the existing search-related JavaScript
document.addEventListener('DOMContentLoaded', function() {
    const searchForm = document.querySelector('#search_input_box form');
    const searchInput = document.getElementById('search_input');
    const globalSearchToggle = document.getElementById('globalSearchToggle');
    const resultsContainer = document.querySelector('.category-list .row');
    const currentCategory = document.querySelector('input[name="category"]:checked')?.value || '';

    if (searchForm) {
        searchForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            try {
                const searchTerm = searchInput.value;
                const isGlobalSearch = globalSearchToggle.checked;
                
                // Get the current selected category
                const selectedCategory = document.querySelector('input[name="category"]:checked')?.value || '';
                
                // Make the search request
                const response = await fetch(`/search?q=${encodeURIComponent(searchTerm)}&category=${encodeURIComponent(selectedCategory)}&globalSearch=${isGlobalSearch}`, {
                    method: 'GET',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                if (!response.ok) {
                    throw new Error('Search request failed');
                }

                const data = await response.json();

                // Update the products display
                if (data.products.length === 0) {
                    resultsContainer.innerHTML = `
                        <div class="col-12">
                            <div class="alert alert-warning text-center">
                                ${data.noProductsMessage || 'No products found matching your search criteria.'}
                            </div>
                        </div>
                    `;
                } else {
                    resultsContainer.innerHTML = data.products.map(product => {
                        const firstImage = product.variants.reduce((img, variant) => {
                            if (!img && variant.images && variant.images.length > 0) {
                                return variant.images[0].filename;
                            }
                            return img;
                        }, null);

                        const offerPrice = product.offerPercentage ? 
                            product.regularPrice * (1 - product.offerPercentage / 100) : null;

                        return `
                            <div class="col-lg-4 col-md-6">
                                <div class="single-product">
                                    <a href="/productDetails?id=${product._id}">
                                        <div class="product-image-container" style="position: relative;">
                                            <img class="img-fluid" 
                                                src="/uploads/product-images/${firstImage || 'placeholder.jpg'}" 
                                                alt="${product.productName}">
                                            ${product.offerPercentage ? `
                                                <div style="position: absolute; top: 10px; right: 10px; background-color: red; color: white; padding: 5px; border-radius: 3px;">
                                                    ${product.offerPercentage}% OFF
                                                </div>
                                            ` : ''}
                                        </div>
                                    </a>
                                    <div class="product-details">
                                        <h6>${product.productName.length > 20 ? product.productName.substring(0, 20) + '...' : product.productName}</h6>
                                        <div class="price">
                                            ${offerPrice ? `
                                                <h6>₹ ${Math.round(offerPrice)}</h6>
                                                <h6 class="l-through text-muted">₹ ${product.regularPrice}</h6>
                                            ` : `
                                                <h6>₹ ${product.regularPrice}</h6>
                                            `}
                                        </div>
                                        <div class="prd-bottom">
                                            <a href="#" class="social-info add-to-cart" data-product-id="${product._id}">
                                                <span class="ti-bag"></span>
                                                <p class="hover-text">add to cart</p>
                                            </a>
                                            <a href="#" class="social-info add-to-wishlist" data-product-id="${product._id}">
                                                <span class="lnr lnr-heart"></span>
                                                <p class="hover-text">Wishlist</p>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `;
                    }).join('');
                }

                // Update pagination if provided
                const paginationContainer = document.querySelector('.pagination');
                if (paginationContainer && data.pagination) {
                    // Update pagination HTML here if needed
                }

            } catch (error) {
                console.error('Search error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Search Error',
                    text: 'An error occurred while searching. Please try again.'
                });
            }
        });
    }
});
    </script>



<!-- This is for my wishlist add botton -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    let currentProductDetails = null;
    let selectedSize = null;
    const confirmAddToCartBtn = document.getElementById('confirmAddToCart');


	 // Check authentication status
	 async function checkAuth() {
        try {
            const response = await fetch('/check-auth');
            return response.ok;
        } catch (error) {
            return false;
        }
    }
	

    // Show login prompt
    function showLoginPrompt(action) {
    return Swal.fire({
        title: 'Please Login',
        text: `You need to login to ${action}`,
        icon: 'info',
        showCancelButton: true,
        confirmButtonText: 'Go to Login',
        cancelButtonText: 'Close',
        confirmButtonColor: '#384aeb',
        cancelButtonColor: '#6c757d'
    }).then((result) => {
        if (result.isConfirmed) {
            window.location.href = '/login';
        }
    });
}


function handleAuthError(response) {
    if (response.status === 401) {
        return response.json().then(data => {
            return Swal.fire({
                title: data.title || 'Please Login',
                text: data.message || 'You need to login to continue',
                icon: data.type || 'info',
                showCancelButton: true,
                confirmButtonText: 'Go to Login',
                cancelButtonText: 'Close',
                confirmButtonColor: '#384aeb',
                cancelButtonColor: '#6c757d'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/login';
                }
                throw new Error('auth_required');
            });
        });
    }
    return response;
}


function updateWishlistButton(button, isInWishlist) {
    const wishlistIcon = button.querySelector('.wishlist-icon');
    const icon = button.querySelector('.fa-heart');
    
    if (isInWishlist) {
        button.classList.add('in-wishlist');
        wishlistIcon.style.backgroundColor = '#ff0000'; // Red circle when in wishlist
    } else {
        button.classList.remove('in-wishlist');
        wishlistIcon.style.backgroundColor = '#828bb3'; // Gray circle when not in wishlist
    }
    
    // Heart icon stays white in both states
    icon.style.color = 'white';
}

	async function initializeWishlistButtons() {
        const isAuthenticated = await checkAuth();
        if (!isAuthenticated) return;

        try {
            const response = await fetch('/get-wishlist-items');
            if (!response.ok) return;
            
            const wishlistItems = await response.json();
            document.querySelectorAll('.add-to-wishlist').forEach(button => {
                const productId = button.dataset.productId;
                const isInWishlist = wishlistItems.some(item => item.productId === productId);
                updateWishlistButton(button, isInWishlist);
            });
        } catch (error) {
            console.error('Failed to initialize wishlist states:', error);
        }
    }

    // Handle wishlist toggle
	async function handleWishlistToggle(button) {
    try {
        const productId = button.dataset.productId;
        const isInWishlist = button.classList.contains('in-wishlist');
        
        const response = await fetch(isInWishlist ? 
            `/remove-from-wishlist/${productId}` : 
            '/add-to-wishlist', {
                method: isInWishlist ? 'DELETE' : 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: isInWishlist ? null : JSON.stringify({ productId })
            });

        if (!response.ok) {
            if (response.status === 401) {
                return showLoginPrompt('add to wishlist');
            }
            throw new Error('Failed to update wishlist');
        }

        updateWishlistButton(button, !isInWishlist);
        
        Swal.fire({
            icon: 'success',
            title: isInWishlist ? 'Removed from Wishlist' : 'Added to Wishlist',
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 2000,
            timerProgressBar: true
        });
    } catch (error) {
        console.error('Wishlist error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to update wishlist',
            confirmButtonColor: '#384aeb'
        });
    }
}

    // Update wishlist button appearance
	async function updateModalContent(product, variant) {
    if (!product || !variant) return;

    const modal = document.getElementById('addToCartModal');
    if (!modal) return;

    // Set current product details
    currentProductDetails = product;

    // Update carousel images and thumbnails
    const carouselInner = document.getElementById('carouselInner');
    const thumbnailContainer = document.querySelector('.carousel-thumbnails');
    
    if (carouselInner && thumbnailContainer && variant.images) {
        // Clear existing content
        carouselInner.innerHTML = '';
        thumbnailContainer.innerHTML = '';

        // Add images to carousel and create thumbnails
        variant.images.forEach((image, index) => {
            // Add to carousel
            const carouselItem = document.createElement('div');
            carouselItem.className = `carousel-item ${index === 0 ? 'active' : ''}`;
            carouselItem.innerHTML = `
                <img src="/uploads/product-images/${image.filename}" 
                     class="d-block w-100" 
                     alt="${product.productName}">
            `;
            carouselInner.appendChild(carouselItem);

            // Create thumbnail
            const thumbnail = document.createElement('img');
            thumbnail.src = `/uploads/product-images/${image.filename}`;
            thumbnail.className = `carousel-thumbnail ${index === 0 ? 'active' : ''}`;
            thumbnail.dataset.slide = index;
            thumbnail.addEventListener('click', () => {
                $('.carousel').carousel(index);
                document.querySelectorAll('.carousel-thumbnail').forEach(thumb => 
                    thumb.classList.remove('active'));
                thumbnail.classList.add('active');
            });
            thumbnailContainer.appendChild(thumbnail);
        });
    }

    // Update carousel event listener
    $('#productImageCarousel').on('slide.bs.carousel', (e) => {
        const thumbnails = document.querySelectorAll('.carousel-thumbnail');
        thumbnails.forEach(thumb => thumb.classList.remove('active'));
        thumbnails[e.to].classList.add('active');
    });

    // Rest of your existing updateModalContent code...
    modal.querySelector('#modalProductName').textContent = product.productName;
    modal.querySelector('#modalProductCategory').textContent = 
        product.category ? `Category: ${product.category.name}` : '';

    // Update sizes with animation
    const sizeBoxesContainer = modal.querySelector('#modalSizeBoxes');
    if (sizeBoxesContainer && variant.sizes) {
        sizeBoxesContainer.innerHTML = variant.sizes
            .filter(size => size.quantity > 0)
            .map(size => `
                <div class="size-box" data-size="${size.size}">
                    ${size.size}
                </div>
            `).join('');

        // Add size selection handlers with animation
        sizeBoxesContainer.querySelectorAll('.size-box').forEach(box => {
            box.addEventListener('click', () => {
                sizeBoxesContainer.querySelectorAll('.size-box').forEach(b => 
                    b.classList.remove('selected'));
                box.classList.add('selected');
                selectedSize = parseInt(box.dataset.size);
                document.getElementById('sizeError').style.display = 'none';
                document.getElementById('confirmAddToCart').disabled = false;
            });
        });
    }

    // Fetch and update offers with animation
    try {
        const offersResponse = await fetch(`/product/${product._id}/offers`);
        const offersData = await offersResponse.json();
        
        const regularPrice = product.regularPrice;
        let finalPrice = regularPrice;
        let maxDiscount = 0;
        
        if (offersData?.offers) {
            maxDiscount = Math.max(...offersData.offers.map(o => o.discount));
            if (maxDiscount > 0) {
                finalPrice = regularPrice * (1 - maxDiscount / 100);
            }
        }

        // Animate price updates
        const offerPriceElement = modal.querySelector('#modalOfferPrice');
        offerPriceElement.style.opacity = '0';
        setTimeout(() => {
            offerPriceElement.textContent = maxDiscount > 0 ? 
                `₹${Math.round(finalPrice)}` : `₹${regularPrice}`;
            offerPriceElement.style.opacity = '1';
        }, 300);

        const regularPriceElement = modal.querySelector('#modalRegularPrice');
        regularPriceElement.style.opacity = '0';
        setTimeout(() => {
            regularPriceElement.textContent = `₹${regularPrice}`;
            regularPriceElement.style.display = maxDiscount > 0 ? 'inline' : 'none';
            regularPriceElement.style.opacity = '1';
        }, 300);

        const discountBadge = modal.querySelector('#modalDiscountBadge');
        discountBadge.textContent = `${maxDiscount}% OFF`;
        discountBadge.style.display = maxDiscount > 0 ? 'inline' : 'none';
    } catch (error) {
        console.error('Error updating offers:', error);
    }

    // Reset size selection
    selectedSize = null;
    document.getElementById('confirmAddToCart').disabled = true;
}

   
	// Add to cart handler
	document.querySelectorAll('.add-to-cart').forEach(button => {
    button.addEventListener('click', async function(e) {
        e.preventDefault();
        
        // Check authentication first
        const isAuthenticated = await checkAuth();
        if (!isAuthenticated) {
            return Swal.fire({
                title: 'Please Login',
                text: 'You need to login to add items to cart',
                icon: 'info',
                showCancelButton: true,
                confirmButtonText: 'Go to Login',
                cancelButtonText: 'Close',
                confirmButtonColor: '#384aeb',
                cancelButtonColor: '#6c757d'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/login';
                }
            });
        }

        try {
            const productId = this.dataset.productId;
            const response = await fetch(`/product/${productId}`);
            if (!response.ok) throw new Error('Failed to fetch product details');
            
            const product = await response.json();
            await updateModalContent(product, product.variants[0]);
            $('#addToCartModal').modal('show');
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                title: 'Error',
                text: 'Failed to load product details',
                icon: 'error',
                confirmButtonColor: '#384aeb'
            });
        }
    });
});

    // Confirm add to cart
    document.getElementById('confirmAddToCart').addEventListener('click', async function() {
    try {
        // Check authentication again before adding to cart
        const authResponse = await fetch('/check-auth');
        if (!authResponse.ok) {
            $('#addToCartModal').modal('hide');
            return Swal.fire({
                title: 'Please Login',
                text: 'You need to login to add items to cart',
                icon: 'info',
                showCancelButton: true,
                confirmButtonText: 'Go to Login',
                cancelButtonText: 'Close',
                confirmButtonColor: '#384aeb',
                cancelButtonColor: '#6c757d'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/login';
                }
            });
        }

        if (!selectedSize) {
            document.getElementById('sizeError').style.display = 'block';
            return;
        }

        const response = await fetch(`/addToCart/${currentProductDetails._id}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                size: selectedSize,
                color: currentProductDetails.variants[0].color,
                quantity: 1,
                variantId: currentProductDetails.variants[0]._id
            })
        });

        const data = await response.json();
        
        if (response.ok) {
            $('#addToCartModal').modal('hide');
            Swal.fire({
                title: 'Success!',
                text: 'Product added to cart successfully',
                icon: 'success',
                showCancelButton: true,
                confirmButtonText: 'Go to Cart',
                cancelButtonText: 'Continue Shopping',
                confirmButtonColor: '#384aeb',
                cancelButtonColor: '#6c757d'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/userCart';
                }
            });
        } else {
            Swal.fire('Error', data.message || 'Failed to add item to cart', 'error');
        }
    } catch (error) {
        console.error('Add to cart error:', error);
        Swal.fire('Error', 'Failed to add item to cart', 'error');
    }
});

    // Add wishlist event listeners
    document.querySelectorAll('.add-to-wishlist').forEach(button => {
        button.addEventListener('click', async (e) => {
            e.preventDefault();
            await handleWishlistToggle(button);
        });
    });

    // Initialize wishlist states
    initializeWishlistButtons();
});
  </script>
    





















    <style>

        /* Styling for product card bottom actions */
.prd-bottom {
    position: relative;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px;
    gap: 20px; /* Add space between cart and wishlist buttons */
}

/* Base styles for both cart and wishlist buttons */
.social-info {
    position: relative;
    text-align: center;
    width: 40px; /* Fixed width for icon container */
    height: 40px;
    line-height: 40px;
    border-radius: 50%;
    transition: all 0.3s ease;
}

/* Add to cart button specific styles */
.add-to-cart {
    background: #384aeb;
}

.add-to-cart .ti-bag {
    color: #fff;
}

/* Hover text styles */
.social-info .hover-text {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    min-width: 100px; /* Ensure enough space for text */
    top: -30px;
    background: #384aeb;
    padding: 5px 10px;
    color: #fff;
    border-radius: 4px;
    visibility: hidden;
    opacity: 0;
    transition: all 0.3s ease;
    white-space: nowrap; /* Prevent text wrapping */
}

/* Show hover text on hover */
.social-info:hover .hover-text {
    visibility: visible;
    opacity: 1;
}

/* Wishlist button specific styles */
.add-to-wishlist {
    margin-left: 10px; /* Add extra space from cart button */
}

.add-to-wishlist .wishlist-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 35px;
    height: 35px;
    background: #828bb3;
    border-radius: 50%;
    margin: 0 auto;
    transition: background-color 0.3s ease;
}

.add-to-wishlist .fa-heart {
    color: white !important;
}

.add-to-wishlist.in-wishlist .wishlist-icon {
    background-color: #ff0000;
}

/* Remove zoom effect on wishlist icon */
.add-to-wishlist:hover .fa-heart {
    transform: none;
}

.add-to-wishlist:hover .wishlist-icon {
    transform: none;
}
    </style>