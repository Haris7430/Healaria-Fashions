
This is my productSchema.js code:- 
const mongoose = require("mongoose");
const { Schema } = mongoose;

const productSchema = new Schema({
    productName: {
        type: String,
        required: true
    },
    description: {
        type: String,
        default: ''
    },
    category: {
        type: Schema.Types.ObjectId,
        ref: "Category",
        required: true
    },
    regularPrice: {
        type: Number,
        required: true
    },
    
    variants: [{
        color: { type: String, required: true },
        sizes: [{
            size: { type: Number, required: true },
            quantity: { type: Number, required: true }
        }],
        images: [{
            filename: { type: String, required: true },
            contentType: { type: String, default: 'image/jpeg' }
        }],
        isListed: { type: Boolean, default: true },
        mainImage: { type: Boolean, default: false }  
    }],
    
    isBlocked: {
        type: Boolean,
        default: false
    },
   
}, { timestamps: true });

const Product = mongoose.model("Product", productSchema);
module.exports = Product;



This is my offerSchema.js code:- 
const mongoose = require("mongoose");
const offerSchema = new mongoose.Schema(
  {
    offerType: {
      type: String,
      enum: ["product", "category", "referral"],
      required: true,
    },
    offerName: {
      type: String,
      required: true,
      trim: true
    },
    discount: {
      type: Number,
      required: true,
      min: 0,
      max: 100
    },
    expireDate: {
      type: Date,
      required: true
    },
    productIds: [{ 
      type: mongoose.Schema.Types.ObjectId,
      ref: "Product",
      required: function () {
        return this.offerType === "product";
      },
    }],
    categoryIds: [{ 
      type: mongoose.Schema.Types.ObjectId,
      ref: "Category",
      required: function () {
        return this.offerType === "category";
      },
    }],
    referralCode: {
      type: String,
      required: function () {
        return this.offerType === "referral";
      },
      unique: true,
      sparse: true
    },
    status: {
      type: String,
      enum: ["active", "inactive"],
      default: "active",
    },
    isListed: {
      type: Boolean,
      default: true
    }
  },
  { timestamps: true }
);
const Offer = mongoose.model("Offer", offerSchema);
module.exports = Offer;


This is my userSchema.js code:- 
const mongoose= require("mongoose");
const {Schema}= mongoose;

const userSchema= new Schema ({
    name:{
        type: String,
        required: true
    },
    email: {
        type: String,
        required: true,
        unique:true
    },
    phone: {
        type:String,
        required: false,
        unique: true,
        sparse:true,
        default:undefined
    },
    googleId:{
        type:String,
        unique:true,
        sparse:true
    },
    password: {
        type:String,
        required: false
    },
    isBlocked: {
        type: Boolean,
        default:false
    },
    isAdmin: {
        type: Boolean,
        default: false
    },
    cart: [{
        type: Schema.Types.ObjectId,
        ref: 'Cart'
    }],
    
    wallet: {
        type: Number,
        default:0,
    },
    wishlist: [{
        type: Schema.Types.ObjectId,
        ref: "wishlist"
    }],
    orderHistory: [{
        type: Schema.Types.ObjectId,
        ref: "Order"
    }],
    createdOn : {
        type:Date,
        default:Date.now,
    },
    referralCode: {
        type: String,
        // required:true
    },
    redeemed: {
        type: Boolean,
        // defaulte:false
 
    },
    redeemedUsers: [{
        type: Schema.Types.ObjectId,
        ref: "User",
        // required:true
    }],
    searchHistory: [{
        category: {
            type: Schema.Types.ObjectId,
            ref: "Category"
        },
        Brand: {
            type: String,

        },
        searchOn: {
            type: Date,
            default: Date.now
        }
    }]
},{timestamps:true})
const user= mongoose.model("User",userSchema);
module.exports= user

This is my couponSchema.js code:- 
const mongoose = require('mongoose');

const couponSchema = new mongoose.Schema({
    title: {
        type: String,
        required: true,
        trim: true,
        validate: {
            validator: function(v) {
                // Allow letters, numbers, and spaces
                return /^[A-Za-z0-9\s]+$/.test(v);
            },
            message: props => `${props.value} is not a valid title! Only letters, numbers, and spaces are allowed.`
        }
    },
    description: {
        type: String,
        trim: true
    },
    code: {
        type: String,
        required: true,
        unique: true,
        uppercase: true,
        trim: true
    },
    validFrom: {
        type: Date,
        required: true
    },
    expiryDate: {
        type: Date,
        required: true
    },
    discountPercentage: {
        type: Number,
        required: true,
        min: 1,
        max: 80
    },
    maxDiscountAmount: {
        type: Number,
        required: true,
        validate: {
            validator: function(v) {
                return typeof v === 'number' && v >= 0;
            },
            message: props => `${props.value} is not a valid maximum discount amount!`
        }
    },
    minPurchaseLimit: {
        type: Number,
        required: true, 
        min: 0
    },
    status: {
        type: String,
        enum: ['active', 'inactive'],
        default: 'active'
    }
}, { timestamps: true });
const Coupon = mongoose.model('Coupon', couponSchema);
module.exports = Coupon;

This is my orderSchema.js code:- 

const mongoose = require('mongoose');
const { Schema } = mongoose;



const returnRequestSchema = new Schema({
    itemId: {
        type: Schema.Types.ObjectId,
        required: true
    },
    reason: {
        type: String,
        required: true
    },
    status: {
        type: String,
        enum: ['pending', 'approved', 'rejected'],
        default: 'pending'
    },
    adminResponse: {
        type: String,
        default: null
    },
    customReason: {
        type: String,
        default: null
    },
    refundAmount: {
        type: Number,
        required: true
    }
}, { timestamps: true });


const orderSchema = new Schema({
    orderId: {
        type: String,
        unique: true,
        default: function() {
           
            const timestamp = Date.now().toString().slice(-10);
            const randomStr = Math.random().toString(36).substr(2, 6).toUpperCase();
            return `ORD-${timestamp}-${randomStr}`;
        }
    },
    userId: {
        type: Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    items: [{
        productId: {
            type: Schema.Types.ObjectId,
            ref: 'Product',
            required: true
        },
        variantId: {
            type: Schema.Types.ObjectId,
            ref: 'Product'
        },
        color: {
            type: String,
            required: true
        },
        size: {
            type: Number,
            required: true
        },
        quantity: {
            type: Number,
            required: true
        },
        price: {
            type: Number,
            required: true
        },
        totalPrice: {
            type: Number,
            required: true
        },
        status: {
            type: String,
            enum: ['placed', 'cancelled', 'returned', 'return_requested', 'return_rejected'],
            default: 'placed'
        },
        returnRequest: returnRequestSchema
    }],
    // Embedded shipping address details
    shippingAddress: {
        name: {
            type: String,
            required: true,
            trim: true
        },
        addressType: {
            type: String,
            enum: ['Home', 'Work', 'Other'],
            required: true
        },
        city: {
            type: String,
            required: true,
            trim: true
        },
        landmark: {
            type: String,
            required: true,
            trim: true
        },
        state: {
            type: String,
            required: true,
            trim: true
        },
        pincode: {
            type: String,
            required: true,
            match: [/^[0-9]{6}$/, 'Please enter a valid 6-digit pincode']
        },
        phone: {
            type: String,
            required: true,
            validate: {
                validator: function(v) {
                    return /^[1-9][0-9]{9}$/.test(v);
                },
                message: props => `${props.value} is not a valid phone number!`
            }
        },
        altPhone: {
            type: String,
            validate: {
                validator: function(v) {
                    return v === '' || /^[1-9][0-9]{9}$/.test(v);
                },
                message: props => `${props.value} is not a valid phone number!`
            }
        }
    },
    paymentMethod: {
        type: String,
        required: true,
        enum: ['COD', 'RazorPay', 'Wallet']  
    },
    walletAmountUsed: {
        type: Number,
        default: 0
    },
    subtotal: {
        type: Number,
        required: true
    },
    shippingCost: {
        type: Number,
        required: true
    },
    discountAmount: {
        type: Number,
        default: 0
    },
    total: {
        type: Number,
        required: true
    },
    couponApplied: {
        code: {
            type: String,
            default: null
        },
        discountPercentage: {
            type: Number,
            default: null
        },
        discountAmount: {
            type: Number,
            default: null
        }
    },
    
    paymentStatus: {
        type: String,
        enum: ['pending', 'paid', 'failed'],
        default: 'pending'
    },
    status: {
        type: String,
        required: true,
        enum: ['pending', 'processing', 'shipped', 'delivered', 'cancelled']
    },
    paymentDetails: {
        razorpay_payment_id: String,
        razorpay_order_id: String,
        razorpay_signature: String
    },

    totalDiscount: {
        type: Number,
        default: 0,
        comment: 'Total discount including product discount and coupon discount'
    }
}, { timestamps: true });

const Order = mongoose.model('Order', orderSchema);
module.exports = Order;


This is my userRouter.js code:- 


router.get('/search', userController.searchProducts);

router.get('/shop-page', userController.shopingPage);
router.get('/productDetails', userController.getProductDetails);
router.get('/product/:productId/variant/:variantId', userController.getVariantDetails);
router.get('/product/:productId/variant/first', userAuth, userController.getVariantDetails);
router.get('/check-auth', userAuth, (req, res) => res.status(200).json({ authenticated: true }));
router.get('/product/:productId', userController.getProductForCart);
router.get('/product/:productId/offers', userController.getProductOffers);
This is my userProfileController.js code:- 

This is my userController.js code:- 


const searchProducts = async (req, res) => {
    try {
        const searchTerm = req.query.q ? req.query.q.toString() : '';
        const page = parseInt(req.query.page) || 1;
        const limit = 9;
        const skip = (page - 1) * limit;
        const categoryFilter = req.query.category;
        const globalSearch = req.query.globalSearch === 'true';

        // Create a base query
        const query = {
            isBlocked: false,
            productName: { $regex: searchTerm, $options: 'i' }
        };

        // Handle category filtering
        if (categoryFilter && categoryFilter !== '') {
            const selectedCategory = await Category.findOne({ name: categoryFilter });
            if (selectedCategory) {
                if (!globalSearch) {
                    // If not global search, strictly match the selected category
                    query.category = selectedCategory._id;
                }
            }
        }

        // Get total count of matching products
        const totalProducts = await Product.countDocuments(query);
        const totalPages = Math.ceil(totalProducts / limit);

        // Find products matching the criteria
        let products = await Product.find(query)
            .populate('category')
            .skip(skip)
            .limit(limit)
            .lean();

        // Process products to include necessary information
        products = await Promise.all(products.map(async (product) => {
            // Find applicable offers
            const offers = await Offer.find({
                $or: [
                    { offerType: 'product', productIds: product._id },
                    { offerType: 'category', categoryIds: product.category._id }
                ],
                status: 'active',
                expireDate: { $gte: new Date() }
            });

            // Calculate best offer
            let bestOffer = null;
            let offerPercentage = 0;

            if (offers.length > 0) {
                bestOffer = offers.reduce((max, offer) => 
                    offer.discount > max.discount ? offer : max
                );
                offerPercentage = bestOffer.discount;
            }

            return {
                ...product,
                offerPercentage
            };
        }));

        // Prepare the response message
        let noProductsMessage = '';
        if (products.length === 0) {
            if (categoryFilter && !globalSearch) {
                noProductsMessage = `No products found for "${searchTerm}" in the "${categoryFilter}" category. 
                    Check the global search option to search across all categories.`;
            } else {
                noProductsMessage = `No products found for "${searchTerm}".`;
            }
        }

        // Send JSON response
        res.json({
            products,
            pagination: {
                currentPage: page,
                totalPages,
                hasNext: page < totalPages,
                hasPrev: page > 1
            },
            noProductsMessage,
            searchTerm
        });

    } catch (error) {
        console.error('Search Products Error:', error);
        res.status(500).json({ error: 'Server Error during search' });
    }
};


const shopingPage = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = 9;
        const sort = req.query.sort || 'default';
        const categoryFilter = req.query.category || '';
        const user = req.session.user;
        
        // Get all listed categories
        const categories = await Category.find({ isListed: true });
        
        // Base query with isBlocked check
        let query = { isBlocked: false };

        // Add category filter if specified
        if (categoryFilter && categoryFilter !== '') {
            const selectedCategory = await Category.findOne({ 
                name: categoryFilter,
                isListed: true 
            });
            if (selectedCategory) {
                query.category = selectedCategory._id;
            }
        }

        const skip = (page - 1) * limit;

        // First, get all products matching the query
        let products = await Product.find(query)
            .populate('category')
            .lean();

        // Get current date for offer validation
        const currentDate = new Date();

        // Fetch all active offers
        const offers = await Offer.find({
            status: 'active',
            expireDate: { $gte: currentDate }
        });

        // Calculate effective prices and add offer information
        products = await Promise.all(products.map(async (product) => {
            // Find applicable offers
            const productOffers = offers.filter(offer =>
                offer.offerType === 'product' &&
                offer.productIds.some(id => id.toString() === product._id.toString())
            );

            const categoryOffers = offers.filter(offer =>
                offer.offerType === 'category' &&
                offer.categoryIds.some(id => id.toString() === product.category._id.toString())
            );

            const allProductOffers = [...productOffers, ...categoryOffers];

            // Calculate best discount
            let bestOffer = null;
            let offerPercentage = 0;

            if (allProductOffers.length > 0) {
                bestOffer = allProductOffers.reduce((maxOffer, currentOffer) =>
                    (currentOffer.discount > maxOffer.discount) ? currentOffer : maxOffer
                );
                offerPercentage = bestOffer.discount;
            }

            // Calculate effective price
            const effectivePrice = offerPercentage
                ? product.regularPrice * (1 - offerPercentage / 100)
                : product.regularPrice;

            // Get first image
            const firstImage = product.variants.reduce((img, variant) => {
                if (!img && variant.images && variant.images.length > 0) {
                    return variant.images[0].filename;
                }
                return img;
            }, null);

            // Check wishlist status
            let isInWishlist = false;
            if (req.session.user) {
                const wishlist = await Wishlist.findOne({
                    userId: req.session.user._id,
                    'products.productId': product._id
                });
                isInWishlist = !!wishlist;
            }

            return {
                ...product,
                effectivePrice,
                regularPrice: product.regularPrice,
                offerPercentage,
                bestOffer,
                productImages: [firstImage || 'default-image.jpg'],
                isInWishlist
            };
        }));

        // Apply sorting
        switch(sort) {
            case 'price-low':
                products.sort((a, b) => a.effectivePrice - b.effectivePrice);
                break;
            case 'price-high':
                products.sort((a, b) => b.effectivePrice - a.effectivePrice);
                break;
            case 'name-asc':
                products.sort((a, b) => a.productName.localeCompare(b.productName));
                break;
            case 'name-desc':
                products.sort((a, b) => b.productName.localeCompare(a.productName));
                break;
            case 'new-arrivals':
                products.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
                break;
            default:
                products.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
        }

        // Apply pagination after sorting
        const totalProducts = products.length;
        const totalPages = Math.ceil(totalProducts / limit);
        
        // Validate page number
        if (page > totalPages) {
            return res.redirect(`/shop-page?page=1&sort=${sort}&category=${categoryFilter || ''}`);
        }

        // Slice products for pagination
        products = products.slice(skip, skip + limit);

        const pagination = {
            currentPage: page,
            totalPages: totalPages,
            hasNext: page < totalPages,
            hasPrev: page > 1,
            pages: Array.from({ length: totalPages }, (_, i) => i + 1),
            startPage: Math.max(1, page - 2),
            endPage: Math.min(totalPages, page + 2)
        };

        const renderData = {
            products,
            pagination,
            currentSort: sort,
            currentCategory: categoryFilter,
            categories,
            itemsPerPage: limit,
            totalItems: totalProducts
        };

        if (req.headers['x-requested-with'] === 'XMLHttpRequest') {
            return res.json(renderData);
        }

        if (user) {
            const userData = await User.findOne({ _id: user._id }).lean();
            renderData.user = userData;
        }

        res.render("shop-page", renderData);
    } catch (error) {
        console.log('Shop Page Error:', error);
        res.status(500).send('Server Error: Shop Page Not Found');
    }
};
 

// userController.js - Updated getProductDetails function
const getProductDetails = async (req, res) => {
    try {
        const productId = req.query.id;
        const product = await Product.findById(productId)
            .populate('category')
            .populate('variants');
        
        if (!product) {
            return res.status(404).render('error', { message: 'Product not found' });
        }

        // Find applicable offers
        const offers = await Offer.find({
            $or: [
                { offerType: 'product', productIds: productId },
                { offerType: 'category', categoryIds: product.category._id }
            ],
            status: 'active',
            expireDate: { $gte: new Date() }
        });

        // Calculate the maximum discount
        let maxDiscount = 0;
        let applicableOfferName = '';
        
        offers.forEach(offer => {
            if (offer.offerType === 'product' && offer.productIds.includes(productId)) {
                maxDiscount = Math.max(maxDiscount, offer.discount);
                applicableOfferName = offer.offerName;
            } else if (offer.offerType === 'category' && offer.categoryIds.includes(product.category._id)) {
                maxDiscount = Math.max(maxDiscount, offer.discount);
                applicableOfferName = offer.offerName;
            }
        });

        // Calculate discounted price
        const discountedPrice = product.regularPrice * (1 - maxDiscount / 100);

        const variants = product.variants.filter(variant => variant.isListed);
        const initialVariant = variants[0];

        const variantSizes = initialVariant.sizes.map(sizeObj => ({
            size: sizeObj.size,
            quantity: sizeObj.quantity
        }));

        res.render('product', {
            product: {
                ...product.toObject(),
                regularPrice: product.regularPrice,
                discountedPrice: discountedPrice,
                maxDiscount,
                applicableOfferName
            },
            variants,
            initialVariant,
            variantSizes,
            categoryName: product.category.name,
            isLoggedIn: !!req.session.user,
        });
    } catch (error) {
        console.error('Error fetching product details:', error);
        res.status(500).render('error', { message: 'Internal Server Error' });
    }
};



const getVariantDetails = async (req, res) => {
    try {
        const { productId, variantId } = req.params;
        
        const product = await Product.findById(productId);
        if (!product) {
            return res.status(404).json({ message: 'Product not found' });
        }

        const variant = product.variants.id(variantId);
        if (!variant) {
            return res.status(404).json({ message: 'Variant not found' });
        }

        // Transform variant images with full path
        const images = variant.images.map(img => ({
            filename: img.filename,
            fullPath: `/uploads/product-images/${img.filename}`
        }));

        const sizes = variant.sizes.map(sizeObj => ({
            size: sizeObj.size,
            quantity: sizeObj.quantity
        }));

        res.json({
            images,
            sizes
        });
    } catch (error) {
        console.error('Get Variant Details Error:', error);
        res.status(500).json({ message: 'Failed to fetch variant details' });
    }
};

 
 
const getProductForCart = async (req, res) => {
    try {
        const product = await Product.findById(req.params.productId)
            .populate('category')
            .select('productName regularPrice variants');
        res.json(product);
    } catch (error) {
        res.status(500).json({ error: 'Failed to fetch product details' });
    }
};


const getProductOffers = async (req, res) => {
    try {
        const productId = req.params.productId;
        const product = await Product.findById(productId).populate('category');
        
        if (!product) {
            return res.status(404).json({ message: 'Product not found' });
        }

        const offers = await Offer.find({
            $or: [
                { offerType: 'product', productIds: productId },
                { offerType: 'category', categoryIds: product.category._id }
            ],
            status: 'active',
            expireDate: { $gte: new Date() }
        });

        res.json({ offers });
    } catch (error) {
        console.error('Error fetching offers:', error);
        res.status(500).json({ message: 'Failed to fetch offers' });
    }
};

This is my admin-dashboard.ejs page code:- 



<%- include("../../views/partials/user/header/") %>

<style>

.product-price {
    font-size: 26px;
    margin-bottom: 25px;
}

.original-price {
    text-decoration: line-through;
    color: #888;
    font-size: 18px;
    margin-right: 10px;
}

.discounted-price {
    font-weight: bold;
    font-size: 26px;
}

.discount-badge {
    background-color: #ff0000;
    color: white;
    padding: 2px 6px;
    border-radius: 4px;
    margin-left: 10px;
    font-size: 14px;
}

.offer-type {
    font-size: 12px;
    color: #666;
    margin-top: 5px;
}

.product-category {
    font-size: 16px;
    color: #666;
    margin-bottom: 15px;
    font-style:normal;
}



.main-image {
        position: relative;
        overflow: hidden;
        width: 100%;
        height: 500px;
        border-radius: 8px;
        background: #f8f9fa;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: crosshair;
    }

    .zoom-image {
        width: 100%;
        height: 100%;
        object-fit: contain;
        transition: transform 0.2s ease;
    }

    .zoomed {
        transform: scale(2); /* Zoom level */
        cursor: move;
    }




.main-image {
        position: relative;
        overflow: hidden;
        width: 100%;
        height: 500px;
        border-radius: 8px;
        background: #f8f9fa;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: crosshair;
    }

    .main-image img {
        width: 100%;
        height: 100%;
        object-fit: contain;
        transition: transform 0.2s ease;
    }

    .main-image img.zoomed {
        transform: scale(3); /* Adjust zoom level */
    }




    .product-detail-area {
        padding: 60px 0;
        background: linear-gradient(to bottom, #f8f9fa, #ffffff);
    }

    /* Product Images */
    .product-images {
        background: #fff;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
    }

    .product-images:hover {
        box-shadow: 0 6px 20px rgba(0,0,0,0.12);
    }

    .main-image {
        width: 100%;
        height: 500px;
        border-radius: 8px;
        margin-bottom: 20px;
        overflow: hidden;
        background: #f8f9fa;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .main-image img {
        width: 100%;
        height: 100%;
        object-fit: contain;
        transition: transform 0.3s ease;
    }

    .main-image img:hover {
        transform: scale(1.05);
    }

    .thumbnail-row {
        display: flex;
        gap: 12px;
        overflow-x: auto;
        padding: 10px 0;
        scrollbar-width: thin;
    }

    .thumbnail-row::-webkit-scrollbar {
        height: 6px;
    }

    .thumbnail-row::-webkit-scrollbar-thumb {
        background: #384aeb;
        border-radius: 10px;
    }

    .thumbnail {
        width: 90px;
        height: 90px;
        border: 2px solid #eee;
        border-radius: 8px;
        cursor: pointer;
        overflow: hidden;
        flex-shrink: 0;
        transition: all 0.2s ease;
    }

    .thumbnail.active {
        border-color: #384aeb;
        transform: translateY(-2px);
    }

    .thumbnail:hover {
        border-color: #384aeb;
    }

    .thumbnail img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    /* Product Info */
    .product-info {
        background: #fff;
        padding: 35px;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
    }

    .product-title {
        font-size: 28px;
        color: #2d2d2d;
        margin-bottom: 20px;
        font-weight: 600;
    }

    /* .product-price {
        font-size: 26px;
        background: linear-gradient(45deg, #384aeb, #5c6bc0);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        font-weight: bold;
        margin-bottom: 25px;
    } */

    /* Variants */
    .variant-options {
        margin: 25px 0;
    }

    .variant-title {
        font-size: 18px;
        color: #333;
        margin-bottom: 15px;
        font-weight: 500;
    }

    .color-options {
        display: flex;
        gap: 15px;
        flex-wrap: wrap;
    }

    .color-option {
        width: 80px;
        height: 80px;
        border: 2px solid #eee;
        border-radius: 8px;
        cursor: pointer;
        overflow: hidden;
        position: relative;
        transition: all 0.3s ease;
    }

    .color-option::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(to bottom, transparent 60%, rgba(0,0,0,0.7));
        z-index: 1;
    }

    .color-option.active {
        border-color: #384aeb;
        transform: translateY(-3px);
        box-shadow: 0 4px 12px rgba(56,74,235,0.2);
    }

    .color-option:hover {
        transform: translateY(-3px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    .color-option img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .color-name {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        color: #fff;
        padding: 8px 4px;
        font-size: 12px;
        text-align: center;
        z-index: 2;
    }

    /* Size Options */
    .size-options {
        margin: 25px 0;
    }

    .size-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 12px;
        margin-top: 15px;
    }

    .size-btn {
        min-width: 85px;
        padding: 12px;
        border: 2px solid #eee;
        border-radius: 8px;
        background: #fff;
        cursor: pointer;
        text-align: center;
        transition: all 0.3s ease;
    }

    .size-btn:hover:not(.out-of-stock) {
        border-color: #384aeb;
        transform: translateY(-2px);
    }

    .size-btn.active {
        border-color: #384aeb;
        background: linear-gradient(45deg, #384aeb, #5c6bc0);
        color: #fff;
        transform: translateY(-2px);
    }

    .size-btn.out-of-stock {
        opacity: 0.6;
        cursor: not-allowed;
        background: #f5f5f5;
    }

    .stock-info {
        font-size: 11px;
        color: #666;
        margin-top: 6px;
    }

    /* Add to Cart Button */
    .add-cart-btn {
        width: 100%;
        padding: 16px;
        background: linear-gradient(45deg, #384aeb, #5c6bc0);
        color: #fff;
        border: none;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        position: relative;
        overflow: hidden;
    }

    .add-cart-btn:hover:not(:disabled) {
        background: linear-gradient(45deg, #2a3bcc, #4a5ab0);
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(56,74,235,0.3);
    }

    .add-cart-btn:disabled {
        background: linear-gradient(45deg, #ccc, #999);
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
    }

    .product-description {
        padding: 20px 0;
        border-top: 1px solid #eee;
        border-bottom: 1px solid #eee;
        margin: 20px 0;
        line-height: 1.6;
        color: #666;
    }
</style>





	<!-- End Header Area -->

	<!-- Start Banner Area -->
	<section class="banner-area organic-breadcrumb">
		<div class="container">
			<div class="breadcrumb-banner d-flex flex-wrap align-items-center justify-content-end">
				<div class="col-first">
					<h1>Product Details Page</h1>
					<nav class="d-flex align-items-center">
						<a href="index.html">Home<span class="lnr lnr-arrow-right"></span></a>
						<a href="#">Shop<span class="lnr lnr-arrow-right"></span></a>
						<a href="single-product.html">product-details</a>
					</nav>
				</div>
			</div>
		</div>
	</section>
	<!-- End Banner Area -->







<!--================Single Product Area =================-->
<% if (product) { %>
	<div class="product-detail-area">
		<div class="container">
			<div class="row">
				<!-- Product Images -->
				<div class="col-lg-6">
					<div class="product-images">
						<div>
							<input type="range" id="zoomLevel" min="1" max="5" step="0.1" value="2" />
						</div>
						<div class="main-image" id="imageZoomContainer">
							<% if (initialVariant && initialVariant.images && initialVariant.images.length > 0) { %>
								<img id="mainImage" 
									 src="/uploads/product-images/<%= initialVariant.images[0].filename %>" 
									 alt="<%= product.productName %>" 
									 class="zoom-image">
							<% } else { %>
								<img id="mainImage" 
									 src="/images/default-product.jpg" 
									 alt="Default product image" 
									 class="zoom-image">
							<% } %>
						</div>
						
						
						
						
						
						<!-- Thumbnails -->
						<div class="thumbnail-row">
							<% if (initialVariant && initialVariant.images && initialVariant.images.length > 0) { %>
								<% initialVariant.images.forEach((image, index) => { %>
									<div class="thumbnail <%= index === 0 ? 'active' : '' %>"
										 onclick="changeMainImage('/uploads/product-images/<%= image.filename %>', this, '<%= image.filename %>')">
										<img src="/uploads/product-images/<%= image.filename %>" 
											 alt="Product view <%= index + 1 %>">
									</div>
								<% }); %>
							<% } %>
						</div>
					</div>
				</div>
	
				<!-- Product Info -->
				<div class="col-lg-6">
					<div class="product-info">
						<h1 class="product-title"><%= product.productName %></h1>
						<!-- Price Section -->
						<div class="product-price">
							<% if (product.maxDiscount > 0) { %>
								<span class="original-price" style="text-decoration: line-through; color: #888; font-size: 0.7em; margin-right: 10px;">
									₹<%= product.regularPrice.toFixed(2) %>
								</span>
								<span class="discounted-price" style="color: #000; font-weight: bold; font-size: 1.2em;">
									₹<%= product.discountedPrice.toFixed(2) %>
								</span>
								<span class="discount-badge" style="background-color: #ff0000; color: white; padding: 2px 6px; border-radius: 4px; margin-left: 10px; font-size: 0.8em;">
									<%= product.maxDiscount.toFixed(0) %>% OFF
								</span>
								<div class="offer-type" style="font-size: 12px; color: #666; margin-top: 5px;">
									Offer: <%= product.applicableOfferName || 'N/A' %>
								</div>
							<% } else { %>
								<span>₹<%= product.regularPrice.toFixed(2) %></span>
							<% } %>
						</div>
						
						<!-- Inside the product-info div, add this section -->
<div class="product-category">
    <span>Category: <%= typeof categoryName !== 'undefined' ? categoryName : 'Not Available' %></span>
</div>
						<div class="product-description">
							<p><%= product.description %></p>
						</div>
						
	
						<!-- Color Variants -->
						<div class="variant-options">
							<h4 class="variant-title">Available Colors</h4>
							<div class="color-options">
								<% if (variants && variants.length > 0) { %>
									<% variants.forEach(variant => { %>
										<% if (variant.images && variant.images.length > 0) { %>
											<div class="color-option <%= variant._id.toString() === initialVariant._id.toString() ? 'active' : '' %>"
												 onclick="selectVariant('<%= product._id %>', '<%= variant._id %>', this)">
												<img src="/uploads/product-images/<%= variant.images[0].filename %>" 
													 alt="<%= variant.color %>">
												<span class="color-name"><%= variant.color %></span>
											</div>
										<% } %>
									<% }); %>
								<% } %>
							</div>
						<!-- Size Options -->
						<div class="size-options">
							<h4 class="variant-title">Select Size</h4>
							<div class="size-grid" id="sizeGrid">
								<% variantSizes.forEach(sizeObj => { %>
									<button type="button" 
											class="size-btn <%= sizeObj.quantity === 0 ? 'out-of-stock' : '' %>"
											onclick="selectSize(this, '<%= sizeObj.size %>')"
											<%= sizeObj.quantity === 0 ? 'disabled' : '' %>>
										UK <%= sizeObj.size %>
										<div class="stock-info">
											<%= sizeObj.quantity === 0 ? 'Out of Stock' : `${sizeObj.quantity} left` %>
										</div>
									</button>
								<% }) %>
							</div>
						</div>
	
						<!-- Add to Cart Form -->
						<form id="addToCartForm" onsubmit="return handleAddToCart(event)">
							<input type="hidden" id="selectedSize" name="size" value="">
							<input type="hidden" id="selectedVariant" name="variantId" value="<%= initialVariant._id %>">
							<button type="submit" class="add-cart-btn" id="addToCartBtn" disabled>
								Add to Cart
							</button>
						</form>
					</div>
				</div>
			</div>
		</div>
	</div>
<% } else { %>
	<p>Product not found.</p>
<% } %>
<!--================End Single Product Area =================-->


	<!-- Start related-product Area -->
	<section class="related-product-area section_gap_bottom">
		<div class="container">
			<div class="row justify-content-center">
				<div class="col-lg-6 text-center">
					<div class="section-title">
						<h1>Deals of the Week</h1>
						<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore
							magna aliqua.</p>
					</div>
				</div>
			</div>
			<div class="row">
				<div class="col-lg-9">
					<div class="row">
						<div class="col-lg-4 col-md-4 col-sm-6 mb-20">
							<div class="single-related-product d-flex">
								<a href="#"><img src="img/r1.jpg" alt=""></a>
								<div class="desc">
									<a href="#" class="title">Black lace Heels</a>
									<div class="price">
										<h6>$189.00</h6>
										<h6 class="l-through">$210.00</h6>
									</div>
								</div>
							</div>
						</div>
						<div class="col-lg-4 col-md-4 col-sm-6 mb-20">
							<div class="single-related-product d-flex">
								<a href="#"><img src="img/r2.jpg" alt=""></a>
								<div class="desc">
									<a href="#" class="title">Black lace Heels</a>
									<div class="price">
										<h6>$189.00</h6>
										<h6 class="l-through">$210.00</h6>
									</div>
								</div>
							</div>
						</div>
						<div class="col-lg-4 col-md-4 col-sm-6 mb-20">
							<div class="single-related-product d-flex">
								<a href="#"><img src="img/r3.jpg" alt=""></a>
								<div class="desc">
									<a href="#" class="title">Black lace Heels</a>
									<div class="price">
										<h6>$189.00</h6>
										<h6 class="l-through">$210.00</h6>
									</div>
								</div>
							</div>
						</div>
						<div class="col-lg-4 col-md-4 col-sm-6 mb-20">
							<div class="single-related-product d-flex">
								<a href="#"><img src="img/r5.jpg" alt=""></a>
								<div class="desc">
									<a href="#" class="title">Black lace Heels</a>
									<div class="price">
										<h6>$189.00</h6>
										<h6 class="l-through">$210.00</h6>
									</div>
								</div>
							</div>
						</div>
						<div class="col-lg-4 col-md-4 col-sm-6 mb-20">
							<div class="single-related-product d-flex">
								<a href="#"><img src="img/r6.jpg" alt=""></a>
								<div class="desc">
									<a href="#" class="title">Black lace Heels</a>
									<div class="price">
										<h6>$189.00</h6>
										<h6 class="l-through">$210.00</h6>
									</div>
								</div>
							</div>
						</div>
						<div class="col-lg-4 col-md-4 col-sm-6 mb-20">
							<div class="single-related-product d-flex">
								<a href="#"><img src="img/r7.jpg" alt=""></a>
								<div class="desc">
									<a href="#" class="title">Black lace Heels</a>
									<div class="price">
										<h6>$189.00</h6>
										<h6 class="l-through">$210.00</h6>
									</div>
								</div>
							</div>
						</div>
						<div class="col-lg-4 col-md-4 col-sm-6">
							<div class="single-related-product d-flex">
								<a href="#"><img src="img/r9.jpg" alt=""></a>
								<div class="desc">
									<a href="#" class="title">Black lace Heels</a>
									<div class="price">
										<h6>$189.00</h6>
										<h6 class="l-through">$210.00</h6>
									</div>
								</div>
							</div>
						</div>
						<div class="col-lg-4 col-md-4 col-sm-6">
							<div class="single-related-product d-flex">
								<a href="#"><img src="img/r10.jpg" alt=""></a>
								<div class="desc">
									<a href="#" class="title">Black lace Heels</a>
									<div class="price">
										<h6>$189.00</h6>
										<h6 class="l-through">$210.00</h6>
									</div>
								</div>
							</div>
						</div>
						<div class="col-lg-4 col-md-4 col-sm-6">
							<div class="single-related-product d-flex">
								<a href="#"><img src="img/r11.jpg" alt=""></a>
								<div class="desc">
									<a href="#" class="title">Black lace Heels</a>
									<div class="price">
										<h6>$189.00</h6>
										<h6 class="l-through">$210.00</h6>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="col-lg-3">
					<div class="ctg-right">
						<a href="#" target="_blank">
							<img class="img-fluid d-block mx-auto" src="img/category/c5.jpg" alt="">
						</a>
					</div>
				</div>
			</div>
		</div>
	</section>
	<!-- End related-product Area -->


	<%- include("../../views/partials/user/footer/") %>


	<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/elevatezoom/3.0.8/jquery.elevatezoom.min.js"></script>
	


	<script>
 const zoomContainer = document.getElementById('imageZoomContainer');
    const mainImage = document.getElementById('mainImage');
    const zoomLevelInput = document.getElementById('zoomLevel');

    let isZoomed = false;

    // Set initial zoom level from the range input
    let zoomLevel = parseFloat(zoomLevelInput.value);

    zoomLevelInput.addEventListener('input', (event) => {
        zoomLevel = parseFloat(event.target.value);
        if (isZoomed) {
            mainImage.style.transform = `scale(${zoomLevel})`;
        }
    });

    // Toggle Zoom on Click
    zoomContainer.addEventListener('click', () => {
        isZoomed = !isZoomed;
        if (isZoomed) {
            mainImage.classList.add('zoomed');
            mainImage.style.transform = `scale(${zoomLevel})`;
        } else {
            mainImage.classList.remove('zoomed');
            mainImage.style.transform = 'scale(1)';
            mainImage.style.transformOrigin = 'center center';
        }
    });

    // Mousemove for Panning
    zoomContainer.addEventListener('mousemove', (event) => {
        if (isZoomed) {
            const rect = zoomContainer.getBoundingClientRect();
            const offsetX = ((event.clientX - rect.left) / rect.width) * 100;
            const offsetY = ((event.clientY - rect.top) / rect.height) * 100;

            mainImage.style.transformOrigin = `${offsetX}% ${offsetY}%`;
        }
    });

    // Reset Zoom when Mouse Leaves Container
    zoomContainer.addEventListener('mouseleave', () => {
        if (isZoomed) {
            mainImage.classList.remove('zoomed');
            mainImage.style.transform = 'scale(1)';
            mainImage.style.transformOrigin = 'center center';
            isZoomed = false; // Automatically reset zoom
        }
    });


	function changeMainImage(imagePath, thumbnailElement) {
    // Update the main image source
    const mainImage = document.getElementById('mainImage');
    mainImage.src = imagePath;

    // Remove active class from all thumbnails
    document.querySelectorAll('.thumbnail').forEach(thumb => {
        thumb.classList.remove('active');
    });

    // Add active class to the clicked thumbnail
    thumbnailElement.classList.add('active');
}


		
		// Function to select variant
		function selectVariant(productId, variantId, element) {
			console.log('Selecting variant:', variantId); // Debug log
			
			// Update active state
			document.querySelectorAll('.color-option').forEach(option => {
				option.classList.remove('active');
			});
			element.classList.add('active');
			
			// Update form values
			document.getElementById('selectedVariant').value = variantId;
			document.getElementById('selectedSize').value = '';
			document.getElementById('addToCartBtn').disabled = true;
			
			// Fetch variant details
			fetch(`/product/${productId}/variant/${variantId}`)
    .then(response => response.json())
    .then(data => {
        if (data.images && data.images.length > 0) {
            // Update main image
            const mainImage = document.getElementById('mainImage');
            mainImage.src = data.images[0].fullPath;
            
            // Update thumbnails
            const thumbnailRow = document.querySelector('.thumbnail-row');
            thumbnailRow.innerHTML = data.images.map((image, index) => `
                <div class="thumbnail ${index === 0 ? 'active' : ''}"
                     onclick="changeMainImage('${image.fullPath}', this)">
                    <img src="${image.fullPath}" 
                         alt="Product view ${index + 1}">
                </div>
            `).join('');
        }
        
        // Update sizes
        if (data.sizes) {
            updateSizeOptions(data.sizes);
        }
    })
    .catch(error => {
        console.error('Error fetching variant details:', error);
    });
		}
		
		// Function to update size options
		function updateSizeOptions(sizes) {
			const sizeGrid = document.getElementById('sizeGrid');
			sizeGrid.innerHTML = sizes.map(size => `
				<button type="button" 
						class="size-btn ${size.quantity === 0 ? 'out-of-stock' : ''}"
						onclick="selectSize(this, ${size.size})"
						${size.quantity === 0 ? 'disabled' : ''}>
					UK ${size.size}
					<div class="stock-info">
						${size.quantity === 0 ? 'Out of Stock' : `${size.quantity} left`}
					</div>
				</button>
			`).join('');
		}
		
		// Function to select size
		function selectSize(element, size) {
			// Update active state
			document.querySelectorAll('.size-btn').forEach(btn => {
				btn.classList.remove('active');
			});
			element.classList.add('active');
			
			// Update form value
			document.getElementById('selectedSize').value = size;
			document.getElementById('addToCartBtn').disabled = false;
		}
		
		
		

		function showLoginRequiredAlert() {
    Swal.fire({
        icon: 'warning',
        title: 'Login Required',
        text: 'You need to log in to add items to your cart.',
        showConfirmButton: true,
        confirmButtonText: 'Go to Login',
        confirmButtonColor: '#384aeb',
        showCancelButton: true,
        cancelButtonColor: '#6c757d',
        cancelButtonText: 'Cancel'
    }).then((result) => {
        if (result.isConfirmed) {
            window.location.href = '/login';
        }
    });
}

function handleAddToCart(event) {
    event.preventDefault();
    
    // Use the server-side passed isLoggedIn variable
    const isLoggedIn = "<%= isLoggedIn ? 'true' : 'false' %>";
    
    const size = document.getElementById('selectedSize').value;
    const variantId = document.getElementById('selectedVariant').value;
    const productId = '<%= product._id %>'; 
    
    if (!size) {
        Swal.fire({
            icon: 'warning',
            title: 'Oops...',
            text: 'Please select a size before adding to cart!',
            confirmButtonColor: '#384aeb'
        });
        return false;
    }
    
    // If not logged in, show login prompt
    if (!isLoggedIn) {
        showLoginRequiredAlert();
        return false;
    }
    
    // Removed the color extraction logic
    
    fetch(`/addToCart/${productId}`, {
        method: 'POST',
        credentials: 'same-origin',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        },
        body: JSON.stringify({
            size: size,
            variantId: variantId,
            quantity: 1
        })
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(errorData => {
                // Check for unauthorized error
                if (response.status === 401 || errorData.status === 'unauthorized') {
                    showLoginRequiredAlert();
                    throw new Error('Unauthorized');
                }
                throw errorData;
            });
        }
        return response.json();
    })
    .then(data => {
        if (data.status === 'success') {
            Swal.fire({
                icon: 'success',
                title: 'Added to Cart!',
                text: data.message,
                showConfirmButton: true,
                confirmButtonText: 'Go to Cart',
                confirmButtonColor: '#384aeb',
                showCancelButton: true,
                cancelButtonColor: '#6c757d',
                cancelButtonText: 'Continue Shopping'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/userCart';
                }
            });
        }
    })
    .catch(error => {
        // Only show error if it's not an unauthorized error (which is already handled)
        if (error.message !== 'Unauthorized') {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'There was a problem adding the product to cart.',
                confirmButtonColor: '#384aeb'
            });
        }
    });
    
    return false;
}


		
		// Initialize any necessary elements on page load
		document.addEventListener('DOMContentLoaded', function() {
			// Any initialization code can go here
			console.log('Product page initialized');
		});
</script>






<script>
	document.addEventListener('DOMContentLoaded', function() {
		const searchIcon = document.getElementById('search');
		const searchInputBox = document.getElementById('search_input_box');
		const closeSearch = document.getElementById('close_search');
	
		// Initially hide the search input box
		searchInputBox.style.display = 'none';
		searchInputBox.style.opacity = '0';
		searchInputBox.style.visibility = 'hidden';
	
		// Toggle search input box
		searchIcon.addEventListener('click', function(e) {
			e.preventDefault();
			if (searchInputBox.style.visibility === 'hidden') {
				// Show search box with animation
				searchInputBox.style.display = 'block';
				setTimeout(() => {
					searchInputBox.style.opacity = '1';
					searchInputBox.style.visibility = 'visible';
				}, 10);
			}
		});
	
		// Close search input box
		closeSearch.addEventListener('click', function(e) {
			e.preventDefault();
			searchInputBox.style.opacity = '0';
			
			// Wait for opacity transition before hiding
			setTimeout(() => {
				searchInputBox.style.display = 'none';
				searchInputBox.style.visibility = 'hidden';
			}, 300); // Match this with transition duration
		});
	});
	</script>



























































    <!-- Remove the deals of the week section entirely and replace with this related products section -->
<section class="related-product-area section_gap_bottom">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-6 text-center">
                <div class="section-title">
                    <h1>Related Products</h1>
                    <p>More products from <%= categoryName %></p>
                </div>
            </div>
        </div>
        <div class="row">
            <% if (typeof relatedProducts !== 'undefined' && relatedProducts.length > 0) { %>
                <% relatedProducts.forEach(relatedProduct => { %>
                    <div class="col-lg-3 col-md-6 mb-4">
                        <div class="card h-100 product-card">
                            <% 
                            let productImage = '/images/default-product.jpg';
                            if (relatedProduct.variants && 
                                relatedProduct.variants.length > 0 && 
                                relatedProduct.variants[0].images && 
                                relatedProduct.variants[0].images.length > 0) {
                                productImage = `/uploads/product-images/${relatedProduct.variants[0].images[0].filename}`;
                            }
                            %>
                            <a href="/productDetails?id=<%= relatedProduct._id %>">
                                <img src="<%= productImage %>" class="card-img-top" alt="<%= relatedProduct.productName %>">
                            </a>
                            <div class="card-body">
                                <h5 class="card-title">
                                    <a href="/productDetails?id=<%= relatedProduct._id %>" class="text-dark">
                                        <%= relatedProduct.productName %>
                                    </a>
                                </h5>
                                <div class="price-container">
                                    <% if (relatedProduct.offerPercentage > 0) { %>
                                        <span class="original-price">₹<%= relatedProduct.regularPrice.toFixed(2) %></span>
                                        <span class="discounted-price">₹<%= (relatedProduct.regularPrice * (1 - relatedProduct.offerPercentage/100)).toFixed(2) %></span>
                                        <span class="discount-badge"><%= relatedProduct.offerPercentage %>% OFF</span>
                                    <% } else { %>
                                        <span class="current-price">₹<%= relatedProduct.regularPrice.toFixed(2) %></span>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="col-12 text-center">
                    <p>No related products found</p>
                </div>
            <% } %>
        </div>
    </div>
</section>

<style>
.product-card {
    transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
    border: none;
    border-radius: 8px;
    overflow: hidden;
}

.product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}

.product-card .card-img-top {
    height: 200px;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.product-card:hover .card-img-top {
    transform: scale(1.05);
}

.price-container {
    margin-top: 10px;
}

.original-price {
    text-decoration: line-through;
    color: #999;
    font-size: 0.9em;
    margin-right: 8px;
}

.discounted-price, .current-price {
    color: #384aeb;
    font-weight: bold;
    font-size: 1.1em;
}

.discount-badge {
    background-color: #ff4757;
    color: white;
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 0.8em;
    margin-left: 8px;
}

.card-title {
    font-size: 1em;
    margin-bottom: 10px;
    line-height: 1.4;
}

.card-title a {
    color: inherit;
    text-decoration: none;
}

.card-title a:hover {
    color: #384aeb;
}
</style>

<script>

    // Add this to your getProductDetails function in userController.js
const getProductDetails = async (req, res) => {
    try {
        const productId = req.query.id;
        const product = await Product.findById(productId)
            .populate('category')
            .populate('variants');
        
        if (!product) {
            return res.status(404).render('error', { message: 'Product not found' });
        }

        // Find applicable offers
        const offers = await Offer.find({
            $or: [
                { offerType: 'product', productIds: productId },
                { offerType: 'category', categoryIds: product.category._id }
            ],
            status: 'active',
            expireDate: { $gte: new Date() }
        });

        // Calculate the maximum discount (existing code remains the same)
        let maxDiscount = 0;
        let applicableOfferName = '';
        
        offers.forEach(offer => {
            if (offer.offerType === 'product' && offer.productIds.includes(productId)) {
                maxDiscount = Math.max(maxDiscount, offer.discount);
                applicableOfferName = offer.offerName;
            } else if (offer.offerType === 'category' && offer.categoryIds.includes(product.category._id)) {
                maxDiscount = Math.max(maxDiscount, offer.discount);
                applicableOfferName = offer.offerName;
            }
        });

        // Calculate discounted price
        const discountedPrice = product.regularPrice * (1 - maxDiscount / 100);

        // Fetch related products from the same category
        const relatedProducts = await Product.find({
            category: product.category._id,
            _id: { $ne: product._id }, // Exclude current product
            isBlocked: false
        })
        .populate('category')
        .limit(4) // Show only 4 related products
        .lean();

        // Calculate offers for related products
        const relatedProductsWithOffers = await Promise.all(relatedProducts.map(async (relatedProduct) => {
            const productOffers = await Offer.find({
                $or: [
                    { offerType: 'product', productIds: relatedProduct._id },
                    { offerType: 'category', categoryIds: relatedProduct.category._id }
                ],
                status: 'active',
                expireDate: { $gte: new Date() }
            });

            let maxOfferPercentage = 0;
            productOffers.forEach(offer => {
                maxOfferPercentage = Math.max(maxOfferPercentage, offer.discount);
            });

            return {
                ...relatedProduct,
                offerPercentage: maxOfferPercentage
            };
        }));

        const variants = product.variants.filter(variant => variant.isListed);
        const initialVariant = variants[0];

        const variantSizes = initialVariant.sizes.map(sizeObj => ({
            size: sizeObj.size,
            quantity: sizeObj.quantity
        }));

        res.render('product', {
            product: {
                ...product.toObject(),
                regularPrice: product.regularPrice,
                discountedPrice: discountedPrice,
                maxDiscount,
                applicableOfferName
            },
            variants,
            initialVariant,
            variantSizes,
            categoryName: product.category.name,
            relatedProducts: relatedProductsWithOffers,
            isLoggedIn: !!req.session.user,
        });
    } catch (error) {
        console.error('Error fetching product details:', error);
        res.status(500).render('error', { message: 'Internal Server Error' });
    }
};
</script>