
This is my productSchema.js code:- 
const mongoose = require("mongoose");
const { Schema } = mongoose;

const productSchema = new Schema({
    productName: {
        type: String,
        required: true
    },
    description: {
        type: String,
        default: ''
    },
    category: {
        type: Schema.Types.ObjectId,
        ref: "Category",
        required: true
    },
    regularPrice: {
        type: Number,
        required: true
    },
    
    variants: [{
        color: { type: String, required: true },
        sizes: [{
            size: { type: Number, required: true },
            quantity: { type: Number, required: true }
        }],
        images: [{
            filename: { type: String, required: true },
            contentType: { type: String, default: 'image/jpeg' }
        }],
        isListed: { type: Boolean, default: true },
        mainImage: { type: Boolean, default: false }  
    }],
    
    isBlocked: {
        type: Boolean,
        default: false
    },
   
}, { timestamps: true });

const Product = mongoose.model("Product", productSchema);
module.exports = Product;

 
This is my referralSchema.js code:- 




const mongoose = require('mongoose');




const mongoose = require('mongoose');

const referralSchema = new mongoose.Schema({
    referralCode: {
        type: String,
        required: true,
        unique: true,
    },
    referrer: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true,
    },
    referees: [{
        user: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        },
        joinedAt: {
            type: Date,
            default: Date.now
        },
        rewardStatus: {
            type: String,
            enum: ['Pending', 'Completed', 'Failed'],
            default: 'Pending'
        },
        rewardAmount: {
            type: Number,
            default: 0
        },
        walletTransactionId: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Wallet'
        }
    }],
    status: {
        type: String,
        enum: ['Active', 'Expired', 'Deactivated'],
        default: 'Active'
    },
    hasUsedReferral: {
      type: Boolean,
      default: false
  },
    totalRewards: {
        type: Number,
        default: 0
    },
    createdAt: {
        type: Date,
        default: Date.now
    }
});

module.exports = mongoose.model('Referral', referralSchema);


This is my orderSchema.js code:- 

const mongoose = require('mongoose');
const { Schema } = mongoose;

const returnRequestSchema = new Schema({
    itemId: {
        type: Schema.Types.ObjectId,
        required: true
    },
    reason: {
        type: String,
        required: true
    },
    status: {
        type: String,
        enum: ['pending', 'approved', 'rejected'],
        default: 'pending'
    },
    adminResponse: {
        type: String,
        default: null
    },
    customReason: {
        type: String,
        default: null
    },
    refundAmount: {
        type: Number,
        required: true
    }
}, { timestamps: true });


const orderSchema = new Schema({
    orderId: {
        type: String,
        unique: true,
        default: function() {
           
            const timestamp = Date.now().toString().slice(-10);
            const randomStr = Math.random().toString(36).substr(2, 6).toUpperCase();
            return `ORD-${timestamp}-${randomStr}`;
        }
    },
    userId: {
        type: Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    items: [{
        productId: {
            type: Schema.Types.ObjectId,
            ref: 'Product',
            required: true
        },
        variantId: {
            type: Schema.Types.ObjectId,
            ref: 'Product'
        },
        color: {
            type: String,
            required: true
        },
        size: {
            type: Number,
            required: true
        },
        quantity: {
            type: Number,
            required: true
        },
        price: {
            type: Number,
            required: true
        },
        totalPrice: {
            type: Number,
            required: true
        },
        status: {
            type: String,
            enum: ['placed', 'cancelled', 'returned', 'return_requested', 'return_rejected'],
            default: 'placed'
        },
        returnRequest: returnRequestSchema
    }],
    // Embedded shipping address details
    shippingAddress: {
        name: {
            type: String,
            required: true,
            trim: true
        },
        addressType: {
            type: String,
            enum: ['Home', 'Work', 'Other'],
            required: true
        },
        city: {
            type: String,
            required: true,
            trim: true
        },
        landmark: {
            type: String,
            required: true,
            trim: true
        },
        state: {
            type: String,
            required: true,
            trim: true
        },
        pincode: {
            type: String,
            required: true,
            match: [/^[0-9]{6}$/, 'Please enter a valid 6-digit pincode']
        },
        phone: {
            type: String,
            required: true,
            validate: {
                validator: function(v) {
                    return /^[1-9][0-9]{9}$/.test(v);
                },
                message: props => `${props.value} is not a valid phone number!`
            }
        },
        altPhone: {
            type: String,
            validate: {
                validator: function(v) {
                    return v === '' || /^[1-9][0-9]{9}$/.test(v);
                },
                message: props => `${props.value} is not a valid phone number!`
            }
        }
    },
    paymentMethod: {
        type: String,
        required: true,
        enum: ['COD', 'RazorPay', 'Wallet']  
    },
    walletAmountUsed: {
        type: Number,
        default: 0
    },
    subtotal: {
        type: Number,
        required: true
    },
    shippingCost: {
        type: Number,
        required: true
    },
    discountAmount: {
        type: Number,
        default: 0
    },
    total: {
        type: Number,
        required: true
    },
    couponApplied: {
        code: {
            type: String,
            default: null
        },
        discountPercentage: {
            type: Number,
            default: null
        },
        discountAmount: {
            type: Number,
            default: null
        }
    },
    
    paymentStatus: {
        type: String,
        enum: ['pending', 'paid', 'failed'],
        default: 'pending'
    },
    status: {
        type: String,
        required: true,
        enum: ['pending', 'processing', 'shipped', 'delivered', 'cancelled']
    },
    paymentDetails: {
        razorpay_payment_id: String,
        razorpay_order_id: String,
        razorpay_signature: String
    },

    totalDiscount: {
        type: Number,
        default: 0,
        comment: 'Total discount including product discount and coupon discount'
    }
}, { timestamps: true });

const Order = mongoose.model('Order', orderSchema);
module.exports = Order;

This is my walletSchema.js code:- 

const mongoose = require('mongoose');
const { Schema } = mongoose;

const walletTransactionSchema = new Schema({
    amount: {
        type: Number,
        required: true
    },
    type: {
        type: String,
        enum: ['credit', 'debit'],
        required: true
    },
    description: {
        type: String,
        required: true
    },
    orderId: {
        type: Schema.Types.ObjectId,
        ref: 'Order',
        default: null
    },
    balance: {
        type: Number,
        required: true
    }
}, { timestamps: true });

const walletSchema = new Schema({
    userId: {
        type: Schema.Types.ObjectId,
        ref: 'User',
        required: true,
        unique: true
    },
    balance: {
        type: Number,
        default: 0,
        min: 0
    },
    transactions: [walletTransactionSchema]
});

const Wallet = mongoose.model('Wallet', walletSchema);
module.exports = Wallet;


This is my userRouter.js code:- 

const express=require('express');
const router=express.Router();
const userController= require("../controllers/user/userController");
const userCartController = require('../controllers/user/userCartController');
const userProfileController = require('../controllers/user/userProfileController');
const checkoutController = require('../controllers/user/checkOutController')
const wishlistController = require('../controllers/user/wishlistController')
const { userAuth, adminAuth } = require('../middleware/auth');
const passport = require('passport');



router.get('/',userController.loadHomePage);
router.get('/signup',userController.loadSignup)
router.get('/login',userController.loadLogin);
router.get('/logout',userController.logout)

router.post('/login',userController.login);
router.post('/signup',userController.signUp)
router.post('/verify-otp',userController.verifyOtp);
router.post("/resend-otp",userController.resendOtp);


router.get("/auth/google",passport.authenticate('google',{scope:['profile','email']}));
router.get('/google/callback',passport.authenticate('google',{failureRedirect:'/signup'}),(req,res)=>{

    req.session.user = req.user;
    res.redirect('/')
    
});



This is my userProfileController.js code just for your reference:- 

const User = require('../../models/userSchema'); // User schema
const Address = require('../../models/addressSchema');
const Order = require('../../models/orderSchema');
const mongoose = require('mongoose');
const Product = require('../../models/productSchema');
const bcrypt = require('bcrypt'); 
const Wallet = require('../../models/walletSchema');
const Referral = require('../../models/referralSchema')
const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');
const Razorpay = require('razorpay');
const crypto = require('crypto');


const getUserProfile = async (req, res) => {
    try {
        const user = await User.findById(req.session.user._id);
        const section = req.params.section; 
        
        let data = [];
        if (section === 'orders') {
            data = await Order.find({ userId: user._id });
        } else if (section === 'addresses') {
            data = user.addresses;
        }
        
        // Render the profile page with activeSection and data
        res.render('userProfile', {
            user,
            activeSection: section || 'profile', 
            data
        });
    } catch (err) {
        console.error(err);
        res.redirect('/login');
    }
};


const generateUniqueCode = () => {
    const prefix = 'REF';
    const timestamp = Date.now().toString().slice(-6);
    const random = Math.random().toString(36).substring(2, 5).toUpperCase();
    return `${prefix}-${timestamp}-${random}`;
};


// Controller to get referrals
const getReferrals = async (req, res) => {
    try {
        const user = await User.findById(req.session.user._id);
        
        // Get all referrals for the user
        const referrals = await Referral.find({ referrer: user._id })
            .populate('referees.user', 'name email')
            .sort({ createdAt: -1 });

        // Calculate statistics
        const referralStats = {
            totalReferrals: referrals.reduce((sum, ref) => sum + ref.referees.length, 0),
            pendingRewards: referrals.reduce((sum, ref) => 
                sum + ref.referees
                    .filter(referee => referee.rewardStatus === 'Pending')
                    .reduce((refSum, referee) => refSum + referee.rewardAmount, 0), 0),
            totalEarned: referrals.reduce((sum, ref) => ref.totalRewards + sum, 0)
        };

        // Flatten referees array for display
        const referralHistory = referrals.flatMap(referral => 
            referral.referees.map(referee => ({
                code: referral.referralCode,
                user: referee.user,
                joinedAt: referee.joinedAt,
                rewardStatus: referee.rewardStatus,
                rewardAmount: referee.rewardAmount
            }))
        ).sort((a, b) => b.joinedAt - a.joinedAt);

        res.render('userProfile', {
            user,
            activeSection: 'referrals',
            referrals: referralHistory,
            referralStats,
            activeReferral: referrals.find(r => r.status === 'Active')
        });
    } catch (error) {
        console.error('Error fetching referrals:', error);
        res.status(500).render('error', {
            message: 'Error fetching referral data',
            error: error.message
        });
    }
};

// Controller to generate referral code
const generateReferralCode = async (req, res) => {
    try {
        const user = await User.findById(req.session.user._id);
        
        // Find all referrals for this user
        const userReferrals = await Referral.find({
            referrer: user._id
        });

        // Check if user can generate a new code
        const activeReferral = userReferrals.find(ref => ref.status === 'Active');
        const hasUsedReferrals = userReferrals.some(ref => 
            ref.referees.length > 0 && 
            ref.referees.some(referee => referee.rewardStatus === 'Completed')
        );

        // Allow new code generation if no active code or has successful referrals
        if (!activeReferral || hasUsedReferrals) {
            let isUnique = false;
            let newCode;

            while (!isUnique) {
                newCode = generateUniqueCode();
                const existingCode = await Referral.findOne({ referralCode: newCode });
                if (!existingCode) {
                    isUnique = true;
                }
            }

            // If there's an active code, deactivate it
            if (activeReferral) {
                activeReferral.status = 'Expired';
                await activeReferral.save();
            }

            // Create new referral record
            const newReferral = await Referral.create({
                referralCode: newCode,
                referrer: user._id,
                status: 'Active'
            });

            // Update user's current referral code
            user.referralCode = newCode;
            await user.save();

            res.status(200).json({
                success: true,
                referralCode: newCode,
                message: 'New referral code generated successfully'
            });
        } else {
            res.status(400).json({
                success: false,
                message: 'Cannot generate new code until current code is used'
            });
        }
    } catch (error) {
        console.error('Error generating referral code:', error);
        res.status(500).json({
            success: false,
            message: 'Error generating referral code',
            error: error.message
        });
    }
};



const processReferralReward = async (req, res) => {
    try {
        const { referralCode } = req.body;
        const userId = req.session.user._id;

        const referral = await Referral.findOne({ 
            referralCode,
            status: 'Active'
        });

        if (!referral) {
            return res.status(400).json({
                success: false,
                message: 'Invalid or expired referral code'
            });
        }

        // Check if user has already used any referral code
        const existingReferral = await Referral.findOne({
            'referees.user': userId
        });

        if (existingReferral) {
            return res.status(400).json({
                success: false,
                message: 'You have already used a referral code'
            });
        }

        // Add new referee to the referral
        referral.referees.push({
            user: userId,
            rewardAmount: 50 // Referee reward amount
        });

        // Update referrer's wallet
        const referrerWallet = await Wallet.findOne({ userId: referral.referrer });
        const referrerReward = 25; // Referrer reward amount

        if (referrerWallet) {
            referrerWallet.balance += referrerReward;
            const transaction = {
                amount: referrerReward,
                type: 'credit',
                description: 'Referral reward for new user signup',
                balance: referrerWallet.balance
            };
            referrerWallet.transactions.push(transaction);
            await referrerWallet.save();
        }

        // Update referee's wallet
        const refereeWallet = await Wallet.findOne({ userId });
        if (refereeWallet) {
            refereeWallet.balance += 50; // Referee reward
            refereeWallet.transactions.push({
                amount: 50,
                type: 'credit',
                description: 'Reward for using referral code',
                balance: refereeWallet.balance
            });
            await refereeWallet.save();
        }

        // Update referral statistics
        referral.totalRewards += referrerReward;
        
        // Update reward status
        const refereeIndex = referral.referees.length - 1;
        referral.referees[refereeIndex].rewardStatus = 'Completed';

        await referral.save();

        res.status(200).json({
            success: true,
            message: 'Referral reward processed successfully'
        });
    } catch (error) {
        console.error('Error processing referral reward:', error);
        res.status(500).json({
            success: false,
            message: 'Error processing referral reward',
            error: error.message
        });
    }
};


This is my signup.ejs page code:- 



<link rel="stylesheet" href="css/main.css">

    <title>Sign Up</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            height: 100vh;
            background: linear-gradient(135deg, #bdc3c7, #2c3e50);
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .signup-container {
    display: flex;
    width: 60%;
    max-width: 700px; 
    background-color: white;
    border-radius: 10px;
    box-shadow: 0px 10px 30px rgba(0, 0, 0, 0.2);
    overflow: hidden;
    transform: scale(1);
    transition: transform 0.5s ease;
}

        .signup-container:hover {
            transform: scale(1.05);
        }

        .signup-form {
    padding: 30px; /* Reduced from 40px */
    flex: 1;
}

        .signup-form h2 {
            margin-bottom: 20px;
            color: #333;
            font-size: 2rem;
            opacity: 0;
            animation: fadeIn 1s ease forwards;
        }

        @keyframes fadeIn {
            to {
                opacity: 1;
            }
        }

        .input-group {
    margin-bottom: 15px; /* Reduced from 20px */
}


        .input-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #333;
            opacity: 0;
            animation: fadeIn 1s ease forwards;
            animation-delay: 0.3s;
        }

        .input-group input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 16px;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        .input-group input:focus {
            border-color: #ff6700;
            box-shadow: 0px 0px 10px rgba(255, 103, 0, 0.3);
        }

        .btn-submit {
            width: 100%;
            padding: 10px;
            background-color: #ff6700;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 18px;
            transition: background-color 0.3s ease, transform 0.3s ease;
        }

        .btn-submit:hover {
            background-color: #ff4500;
            transform: translateY(-3px);
        }

        .signup-google {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
            padding: 10px;
            background-color: white;
            color: #555;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-top: 20px;
            cursor: pointer;
            font-size: 18px;
            transition: background-color 0.3s ease, box-shadow 0.3s ease;
        }

        .signup-google img {
            width: 20px;
            height: 20px;
            margin-right: 10px;
        }

        .signup-google:hover {
            background-color: #f5f5f5;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
        }

        .signup-image {
            flex: 0.8;
            overflow: hidden;
            position: relative;
            opacity: 0;
            animation: slideIn 1s ease forwards;
            animation-delay: 0.6s;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 15px;
        }

        .signup-image img {
            width: 100%;
            max-height: 300px;
            object-fit: contain;
            margin-bottom: 20px;
        }

        .login-option {
            text-align: center;
            margin-top: 20px;
        }

        .login-option a {
            text-decoration: none;
            color: #ff6700;
            font-weight: bold;
            transition: color 0.3s ease;
        }

        .login-option a:hover {
            color: #ff4500;
        }

        @keyframes slideIn {
            from {
                transform: translateX(-100%);
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        .error-message {
            color: red;
            font-size: 0.75rem;
            display: none;
        }
    </style>

<style>
    .alert-message {
        background-color: #ff6b6b;
        color: white;
        padding: 12px;
        border-radius: 5px;
        margin-bottom: 20px;
        text-align: center;
        font-size: 14px;
        animation: slideDown 0.3s ease-out;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    @keyframes slideDown {
        from {
            transform: translateY(-20px);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }
</style>
    <style>

    </style>
</head>
<body>
    
    
    <div class="signup-container">
        <div class="signup-image">
            <img src="/img/i added/user-signup-3.jpg" alt="Sign Up Image">
            <div class="login-option">
                <p>Already registered? <a href="/login">Login</a></p>
            </div>
        </div>
        <div class="signup-form">
            <h2>Create an Account</h2>
            <form id="signform" action="/signup" method="POST">
                <div class="input-group">
                    <label for="username">Username</label>
                    <input type="text" id="username" name="name" required>
                    <div id="error1" class="error-message"></div>
                </div>
                <div class="input-group">
                    <label for="email">Email</label>
                    <input type="email" id="email" name="email" required>
                    <div id="error2" class="error-message"></div>
                </div>
                <div class="input-group">
                    <label for="phone">Phone Number</label>
                    <input type="tel" id="phone" name="phone" required pattern="\d{10}" title="Enter a 10-digit phone number">
                    <div id="error3" class="error-message"></div>
                </div>
                <div class="input-group">
                    <label for="password">Password</label>
                    <input type="password" id="password" name="password" required>
                    <div id="error4" class="error-message"></div>
                </div>
                <div class="input-group">
                    <label for="confirmPassword">Confirm Password</label>
                    <input type="password" id="confirmPassword" name="cPassword" required>
                    <div id="error5" class="error-message"></div>
                </div>
                <div class="input-group">
                    <label for="referralCode">Referral Code (Optional)</label>
                    <input type="text" id="referralCode" name="referralCode" placeholder="Enter referral code if you have one">
                    <div id="error6" class="error-message"></div>
                </div>

                <%if(locals.message && message.length>0){%>
                    <div class="alert-message">
                        <%=message%>
                    </div>
                <%}%>

                <button type="submit" class="btn-submit">Sign Up</button>
            </form>
            
            <div class="signup-google">
                <a href="/auth/google" class="btn btn-outline-danger">
                    <img 
                    src="/img/i added/user signup 2.png" 
                    alt="Google Logo"
                    style="width:24px; height: 24px;">
                </a>
                <span> Sign up with Google</span>
            </div>
        </div>
    </div>

    <script>
        const username = document.getElementById("username");
        const email = document.getElementById("email");
        const phone = document.getElementById('phone');
        const password = document.getElementById('password');
        const confirmPassword = document.getElementById('confirmPassword');
        const error1 = document.getElementById('error1');
        const error2 = document.getElementById('error2');
        const error3 = document.getElementById('error3');
        const error4 = document.getElementById('error4');
        const error5 = document.getElementById('error5');
        const error6 = document.getElementById('error6')
        const signform = document.getElementById('signform');

        function nameValidateChecking() {
            const nameval = username.value.trim();
            const namepattern = /^[A-Za-z\s]{3,20}$/;
            if (nameval === "") {
                error1.style.display = "block";
                error1.innerHTML = "Please enter a valid name.";
            } else if (!namepattern.test(nameval)) {
                error1.style.display = "block";
                error1.innerHTML = "Name can only contain alphabets and spaces (3-20 characters).";
            } else {
                error1.style.display = "none";
                error1.innerHTML = "";
            }
        }

        function emailValidateChecking() {
            const emailval = email.value.trim();
            const emailpattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
            if (emailval === "") {
                error2.style.display = "block";
                error2.innerHTML = "Email is required.";
            } else if (!emailpattern.test(emailval)) {
                error2.style.display = "block";
                error2.innerHTML = "Invalid email format.";
            } else {
                error2.style.display = "none";
                error2.innerHTML = "";
            }
        }

        function phoneValidateChecking() {
            const phoneval = phone.value.trim();
            const phonepattern = /^\d{10}$/;
            if (phoneval === '') {
                error3.style.display = "block";
                error3.innerHTML = "Phone number is required.";
            } else if (!phonepattern.test(phoneval)) {
                error3.style.display = "block";
                error3.innerHTML = "Invalid phone number format.";
            } else {
                error3.style.display = "none";
                error3.innerHTML = "";
            }
        }

        function passwordValidateChecking() {
            const passval = password.value.trim();
            if (passval.length < 6) {
                error4.style.display = "block";
                error4.innerHTML = "Password should be at least 6 characters long.";
            } else {
                error4.style.display = "none";
                error4.innerHTML = "";
            }
        }

        function confirmPasswordValidateChecking() {
            const confirmPassval = confirmPassword.value.trim();
            const passval = password.value.trim();
            if (confirmPassval !== passval) {
                error5.style.display = "block";
                error5.innerHTML = "Passwords do not match.";
            } else {
                error5.style.display = "none";
                error5.innerHTML = "";
            }
        }

        function referralCodeValidateChecking() {
    const referralCode = document.getElementById('referralCode').value.trim();
    const error6 = document.getElementById('error6');
    
    if (referralCode !== '' && !/^REF-\d{6}-[A-Z0-9]{3}$/.test(referralCode)) {
        error6.style.display = "block";
        error6.innerHTML = "Invalid referral code format";
    } else {
        error6.style.display = "none";
        error6.innerHTML = "";
    }
}

// Add this event listener
document.getElementById('referralCode').addEventListener("blur", referralCodeValidateChecking);


        username.addEventListener("blur", nameValidateChecking);
        email.addEventListener("blur", emailValidateChecking);
        phone.addEventListener("blur", phoneValidateChecking);
        password.addEventListener("blur", passwordValidateChecking);
        confirmPassword.addEventListener("blur", confirmPasswordValidateChecking);

        signform.addEventListener('submit', function (event) {
            nameValidateChecking();
            emailValidateChecking();
            phoneValidateChecking();
            passwordValidateChecking();
            confirmPasswordValidateChecking();
            referralCodeValidateChecking();
    
    if (error1.innerHTML !== "" || error2.innerHTML !== "" || 
        error3.innerHTML !== "" || error4.innerHTML !== "" || 
        error5.innerHTML !== "" || error6.innerHTML !== "") {
        event.preventDefault();
    }
        });
    </script>
</body>
</html>


This is my userController.js code:- 


const User = require('../../models/userSchema');
const Category= require('../../models/categorySchema');
const Product = require('../../models/productSchema');
const Cart = require('../../models/cartSchema')
const Offer = require('../../models/offerSchema');
const bcrypt = require('bcrypt');
const nodemailer = require('nodemailer');
const session= require("express-session");
const env = require('dotenv').config();
const Wishlist = require('../../models/wishlistSchema')
const Referral = require('../../models/referralSchema');
const Wallet = require('../../models/walletSchema')


function generateOtp() {
    return Math.floor(100000 + Math.random() * 900000).toString();
}


async function sendVerificationEmail(email, otp) {
    try {
        const transporter = nodemailer.createTransport({
            service: 'gmail',
            port: 587,
            secure: false,
            requireTLS: true,
            auth: {
                user: process.env.NODEMAILER_EMAIL,
                pass: process.env.NODEMAILER_PASSWORD
            }
        });

        const info = await transporter.sendMail({
            from: process.env.NODEMAILER_EMAIL,
            to: email,
            subject: "Verify your account",
            text: `Your OTP is ${otp}`,
            html: `<b>Your OTP is ${otp}</b>`
        });

        return info.accepted.length > 0;
    } catch (error) {
        console.error("Error sending email:", error);
        return false;
    }
}


const loadHomePage = async (req, res) => {
    try {
        const user = req.session.user;
        const categories = await Category.find({isListed: true});
        
        // Find active offers
        const activeOffers = await Offer.find({
            status: 'active',
            isListed: true,
            expireDate: { $gte: new Date() }
        });

        let productData = await Product.find({
            isBlocked: false,
            category: {$in: categories.map(category => category._id)}
        }).populate('category');

        // Process offers and calculate best discount for each product
        const productsWithOffers = productData.map(product => {
            // Find product-specific offers
            const productOffers = activeOffers.filter(offer => 
                offer.offerType === 'product' && 
                offer.productIds.some(id => id.toString() === product._id.toString())
            );

            // Find category offers
            const categoryOffers = activeOffers.filter(offer => 
                offer.offerType === 'category' && 
                offer.categoryIds.some(id => id.toString() === product.category._id.toString())
            );

            // Combine and find maximum offer
            const allRelevantOffers = [...productOffers, ...categoryOffers];
            const maxOffer = allRelevantOffers.length > 0 
                ? Math.max(...allRelevantOffers.map(offer => offer.discount))
                : 0;

            // Calculate offer price
            const offerPrice = maxOffer > 0 
                ? product.regularPrice * (1 - maxOffer / 100)
                : null;

            return {
                ...product.toObject(),
                maxOfferPercentage: maxOffer,
                offerPrice: offerPrice ? Math.round(offerPrice) : null
            };
        });

        // Sort by createdAt timestamp
        productsWithOffers.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
        
        // Limit to 8 products
        const limitedProducts = productsWithOffers.slice(0, 8);

        if (user) {
            const userData = await User.findOne({_id: user._id});
            res.render("home", {user: userData, products: limitedProducts});
        } else {
            return res.render('home', {products: limitedProducts});
        }
        
    } catch (error) {
        console.log('Home Page Not Found', error);
        res.status(500).send('Server Error Home Page Not Found');
    }
}


const loadLogin = async (req, res) => {
    try {
        
        if(!req.session.user){
            return res.render('login')
        } else {
            res.redirect('/')
        }

    } catch (error) {
        console.log('Login page not loading: ', error);
        res.render('user-error', { error: 'Login page not loading' }); 
    }
}


const login= async(req,res)=>{
    try{
    
        const {email,password}=req.body;
        console.log(req.body);

        const findUser= await User.findOne({isAdmin:0,email:email});
        console.log('User found',findUser);

        if(!findUser){
            return res.render('login',{message:"User not found"});
        }

        if(findUser.isBlocked){
            return res.render('login',{message:"User is blocked by admin"});
        }

        const passwordMatch= await bcrypt.compare(password,findUser.password);

        if(!passwordMatch){
            return res.render('login',{message:'Incorrect Password'});
        }

        req.session.user= findUser;
        res.redirect('/')
    } catch(error){
        console.error('login error',error);
        res.render('login',{message:'login failed. Please try again later'})
        
    }
}


const logout= async (req,res) => {

    try {
        
        req.session.destroy((err)=>{
            if(err){
                console.log('session destruction error',err.message);
                return res.redirect('/pageNotFound')
            }
            return res.redirect('/login');
        })
    } catch (error) {
        console.log('Logount error',error);
        res.redirect('/user-error')
    }
    
}
 

const loadSignup = async (req, res) => {
    try {
        return res.render('signup');
    } catch (error) {
        console.log('Signup page not loading: ', error);
        res.redirect('/user-error')
    }
}


const signUp = async (req, res) => {
    try {
        const { name, phone, email, password, cPassword, referralCode } = req.body;

        // Password match validation
        if (password !== cPassword) {
            return res.render("signup", { 
                message: "Passwords do not match",
                inputData: req.body
            });
        }

        // Check existing user
        const findUser = await User.findOne({ email });
        if (findUser) {
            return res.render("signup", { 
                message: "An account with this email already exists",
                inputData: req.body
            });
        }

        // Check referral code if provided
        let referrer = null;
        if (referralCode) {
            const referral = await Referral.findOne({ 
                referralCode: referralCode,
                status: 'Active' // Check only if the referral is active
            });

            if (!referral) {
                return res.render("signup", { 
                    message: "Invalid or expired referral code",
                    inputData: req.body
                });
            }
            referrer = referral.referrer;
        }
        
        const otp = generateOtp();
        const emailSent = await sendVerificationEmail(email, otp);

        if (!emailSent) {
            return res.json("email-error");
        }

        req.session.userOtp = otp;
        req.session.userData = { 
            name, 
            phone, 
            email, 
            password,
            referralCode,
            referrerId: referrer ? referrer.toString() : null
        };
        res.render("verify-otp");
        console.log("OTP Sent:", otp);
    } catch (error) {
        console.error("Signup error", error);
        res.redirect("/user-error");
    }
}


const securePassword = async (password) => {
    try {
        return await bcrypt.hash(password, 10);
    } catch (error) {
        console.error("Error securing password:", error);
        throw error;
    }
}


const verifyOtp = async (req, res) => {
    try {
        const { otp } = req.body;

        if (otp === req.session.userOtp) {
            const userData = req.session.userData;
            const passwordHash = await securePassword(userData.password);

            // Create new user
            const newUser = new User({
                name: userData.name,
                email: userData.email,
                phone: userData.phone,
                password: passwordHash
            });
            await newUser.save();

            // Create wallet for new user
            const newUserWallet = new Wallet({
                userId: newUser._id,
                balance: 0
            });
            await newUserWallet.save();

            // Handle referral if code was provided
            if (userData.referrerId && userData.referralCode) {
                const referral = await Referral.findOne({
                    referralCode: userData.referralCode,
                    referrer: userData.referrerId,
                    status: 'Active'
                });

                if (referral) {
                    // Add new referee to the existing referral
                    referral.referees.push({
                        user: newUser._id,
                        rewardAmount: 50,
                        rewardStatus: 'Completed'
                    });

                    referral.totalRewards += 25; // Update total rewards
                    await referral.save();

                    // Add bonus to referrer's wallet (₹25)
                    const referrerWallet = await Wallet.findOne({ userId: userData.referrerId });
                    if (referrerWallet) {
                        referrerWallet.balance += 25;
                        referrerWallet.transactions.push({
                            amount: 25,
                            type: 'credit',
                            description: 'Referral bonus for referring ' + newUser.email,
                            balance: referrerWallet.balance
                        });
                        await referrerWallet.save();
                    }

                    // Add bonus to new user's wallet (₹50)
                    newUserWallet.balance += 50;
                    newUserWallet.transactions.push({
                        amount: 50,
                        type: 'credit',
                        description: 'Welcome bonus for using referral code',
                        balance: newUserWallet.balance
                    });
                    await newUserWallet.save();
                }
            }

            req.session.user = newUser;
            res.json({ success: true, redirectUrl: '/' });
        } else {
            res.status(400).json({ success: false, message: "Invalid OTP, please try again" });
        }
    } catch (error) {
        console.error("Error verifying OTP:", error);
        res.status(500).json({ success: false, message: "An error occurred" });
    }
}


const resendOtp = async (req, res) => {
    try {
        const { email } = req.session.userData;

       
        if (!email) {
            return res.status(400).json({ success: false, message: "Email not found in session" });
        }

        
        const otp = generateOtp();
        req.session.userOtp = otp;

        
        const emailSent = await sendVerificationEmail(email, otp);

        if (emailSent) {
            console.log("Resend OTP:", otp);
            res.status(200).json({ success: true, message: "OTP Resent Successfully" });
        } else {
            res.status(500).json({ success: false, message: "Failed to resend OTP. Please try again" });
        }
    } catch (error) {
        console.error("Error resending OTP:", error);
        res.status(500).json({ success: false, message: "Internal Server Error. Please try again" });
    }
};


