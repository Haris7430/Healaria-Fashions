<%- include("../../views/partials/admin/header/") %>

<style>
  .date-error {
      color: red;
      font-size: 12px;
      margin-top: 4px;
  }
  </style>

<!-- Content wrapper -->
<div class="content-wrapper">
  <div class="container-xxl flex-grow-1 container-p-y">
    
    <!-- Overview Cards -->
    <div class="row mb-4">
      <div class="col-lg-3 col-sm-6 mb-4">
        <div class="card">
          <div class="card-body">
            <div class="d-flex justify-content-between">
              <div class="card-info">
                <p class="card-text">Total Revenue</p>
                <div class="d-flex align-items-end mb-2">
                  <h4 class="card-title mb-0 me-2">₹<span id="totalRevenue">0</span></h4>
                  <small class="text-success" id="revenueGrowth">(+0%)</small>
                </div>
              </div>
              <div class="card-icon">
                <span class="badge bg-label-primary rounded p-2">
                  <i class="ri-money-dollar-circle-line fs-3"></i>
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="col-lg-3 col-sm-6 mb-4">
        <div class="card">
          <div class="card-body">
            <div class="d-flex justify-content-between">
              <div class="card-info">
                <p class="card-text">Total Orders</p>
                <div class="d-flex align-items-end mb-2">
                  <h4 class="card-title mb-0 me-2"><span id="totalOrders">0</span></h4>
                  <small class="text-success" id="orderGrowth">(+0%)</small>
                </div>
              </div>
              <div class="card-icon">
                <span class="badge bg-label-success rounded p-2">
                  <i class="ri-shopping-cart-line fs-3"></i>
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="col-lg-3 col-sm-6 mb-4">
        <div class="card">
          <div class="card-body">
            <div class="d-flex justify-content-between">
              <div class="card-info">
                <p class="card-text">Total Customers</p>
                <div class="d-flex align-items-end mb-2">
                  <h4 class="card-title mb-0 me-2"><span id="totalCustomers">0</span></h4>
                  <small class="text-success" id="customerGrowth">(+0%)</small>
                </div>
              </div>
              <div class="card-icon">
                <span class="badge bg-label-info rounded p-2">
                  <i class="ri-user-line fs-3"></i>
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="col-lg-3 col-sm-6 mb-4">
        <div class="card">
          <div class="card-body">
            <div class="d-flex justify-content-between">
              <div class="card-info">
                <p class="card-text">Total Discounts</p>
                <div class="d-flex align-items-end mb-2">
                  <h4 class="card-title mb-0 me-2">₹<span id="totalDiscounts">0</span></h4>
                </div>
              </div>
              <div class="card-icon">
                <span class="badge bg-label-warning rounded p-2">
                  <i class="ri-price-tag-3-line fs-3"></i>
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- /Overview Cards -->

    <!-- Sales Report -->
<div class="row">
  <div class="col-12">
    <div class="card">
      <div class="card-header">
        <h5 class="card-title mb-0">Sales Chart</h5>
      </div>
      <div class="card-body">
        <div id="salesChart" style="height: 400px;"></div>
      </div>
    </div>
  </div>
</div>

    <!-- Top Products & Categories -->
    <div class="row mt-4">
      <div class="col-md-6">
        <div class="card h-100">
          <div class="card-header">
            <h5 class="card-title mb-0">Top 10 Products</h5>
          </div>
          <div class="card-body">
            <div id="topProductsChart" style="height: 300px;"></div>
          </div>
        </div>
      </div>
      
      <div class="col-md-6">
        <div class="card h-100">
          <div class="card-header">
            <h5 class="card-title mb-0">Top Categories</h5>
          </div>
          <div class="card-body">
            <div id="topCategoriesChart" style="height: 300px;"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Sales Summary Table -->
    <div class="row mt-4">
      <div class="col-12">
        <div class="card">
          <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">Sales Report</h5>
            <div class="d-flex gap-2">
              <select class="form-select form-select-sm" id="salesReportRange">
                <option value="daily">Daily</option>
                <option value="weekly">Weekly</option>
                <option value="monthly">Monthly</option>
                <option value="yearly">Yearly</option>
                <option value="custom">Custom Range</option>
              </select>
              <div class="d-none" id="customDateRange">
                <div class="mb-2">
                    <input type="date" class="form-control form-control-sm" id="startDate">
                    <div class="date-error" id="startDateError"></div>
                </div>
                <div class="mb-2">
                    <input type="date" class="form-control form-control-sm" id="endDate">
                    <div class="date-error" id="endDateError"></div>
                </div>
            </div>
              <button class="btn btn-primary btn-sm" id="generateReport">
                Generate Report
              </button>
              <div class="dropdown">
                <button class="btn btn-outline-primary btn-sm dropdown-toggle" type="button" id="downloadReport" data-bs-toggle="dropdown">
                  Download Report
                </button>
                <ul class="dropdown-menu">
                  <li><a class="dropdown-item" href="#" id="downloadPDF">PDF</a></li>
                  <li><a class="dropdown-item" href="#" id="downloadExcel">Excel</a></li>
                </ul>
              </div>
            </div>
          </div>
          <div class="card-body">
            <div class="table-responsive">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th>Period</th>
                    <th>Orders</th>
                    <th>Gross Sales</th>
                    <th>Discounts</th>
                    <th>Net Sales</th>
                    <th>Growth</th>
                  </tr>
                </thead>
                <tbody id="salesSummaryTable">
                  <!-- Data will be populated dynamically -->
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
      <div id="salesSummaryPagination" class="mt-3"></div>
    </div>

<!-- Required Scripts -->
<!-- <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script> -->
<script src="/js/dashboard.js"></script>

<script>

document.addEventListener('DOMContentLoaded', function() {
    // Initialize all charts
    let salesChart, topProductsChart, topCategoriesChart;
    let currentPage = 1;
    
    

    // Initialize Charts
    function initializeCharts() {
        // Sales Chart Configuration
        const salesChartOptions = {
            series: [{
                name: 'Net Sales',
                data: [],
                type: 'line'
            }, {
                name: 'Orders',
                data: [],
                type: 'bar'
            }],
            chart: {
                height: 400,
                type: 'line',
                zoom: { enabled: true }
            },
            stroke: {
                curve: 'smooth',
                width: [3, 2]
            },
            fill: {
                type: ['solid', 'gradient'],
                opacity: [1, 0.25]
            },
            xaxis: {
                type: 'datetime',
                labels: {
                    format: 'dd MMM yyyy'
                }
            },
            yaxis: [{
                title: {
                    text: 'Net Sales (₹)'
                },
                labels: {
                    formatter: value => `₹${value.toFixed(0)}`
                }
            }, {
                opposite: true,
                title: {
                    text: 'Number of Orders'
                }
            }],
            tooltip: {
                shared: true,
                intersect: false,
                y: [{
                    formatter: value => `₹${value.toFixed(2)}`
                }, {
                    formatter: value => `${value} orders`
                }]
            }
        };
        salesChart = new ApexCharts(document.querySelector("#salesChart"), salesChartOptions);
        salesChart.render();
        
        // Top Products Chart Configuration
        const topProductsOptions = {
            series: [{
                name: 'Sales',
                data: []
            }],
            chart: {
                type: 'bar',
                height: 300
            },
            plotOptions: {
                bar: {
                    horizontal: true,
                    barHeight: '50%'
                }
            },
            xaxis: {
                categories: []
            },
            colors: ['#696cff']
        };
        
        // Top Categories Chart Configuration
        const topCategoriesOptions = {
            series: [],
            chart: {
                type: 'donut',
                height: 300
            },
            labels: [],
            colors: ['#696cff', '#71dd37', '#03c3ec', '#ff3e1d', '#ffab00']
        };

        salesChart = new ApexCharts(document.querySelector("#salesChart"), salesChartOptions);
        topProductsChart = new ApexCharts(document.querySelector("#topProductsChart"), topProductsOptions);
        topCategoriesChart = new ApexCharts(document.querySelector("#topCategoriesChart"), topCategoriesOptions);

        salesChart.render();
        topProductsChart.render();
        topCategoriesChart.render();
    }


    async function updateTopProducts(data) {
    const productNames = data.topProducts.map(p => p.name);
    const productSales = data.topProducts.map(p => p.sales);

    topProductsChart.updateOptions({
        xaxis: {
            categories: productNames
        }
    });
    topProductsChart.updateSeries([{
        name: 'Sales',
        data: productSales
    }]);
}

async function updateTopCategories(data) {
    const categoryNames = data.topCategories.map(c => c.name);
    const categorySales = data.topCategories.map(c => c.sales);

    topCategoriesChart.updateOptions({
        labels: categoryNames
    });
    topCategoriesChart.updateSeries(categorySales);
}


    // Fetch and Update Dashboard Data
    async function updateDashboard() {
    try {
        const response = await fetch('/admin/api/dashboard-data');
        const data = await response.json();
        
        // Update overview cards
        updateOverviewCard('totalRevenue', data.totalRevenue, data.revenueGrowth);
        updateOverviewCard('totalOrders', data.totalOrders, data.orderGrowth);
        updateOverviewCard('totalCustomers', data.totalCustomers, data.customerGrowth);
        updateOverviewCard('totalDiscounts', data.totalDiscounts);

        // Update charts
        updateTopProducts(data);
        updateTopCategories(data);

    } catch (error) {
        console.error('Error updating dashboard:', error);
    }
}

    

    function updateOverviewCard(elementId, value, growth = null) {
        const valueElement = document.getElementById(elementId);
        const growthElement = document.getElementById(elementId + 'Growth');
        
        valueElement.textContent = value.toLocaleString('en-IN');
        
        if (growthElement && growth !== null) {
            const growthClass = growth >= 0 ? 'text-success' : 'text-danger';
            const growthIcon = growth >= 0 ? '↑' : '↓';
            growthElement.className = growthClass;
            growthElement.textContent = `${growthIcon} ${Math.abs(growth)}%`;
        }
    }

    // Handle Sales Report Generation
    function validateDateRange() {
    const startDate = document.getElementById('startDate');
    const endDate = document.getElementById('endDate');
    const startError = document.getElementById('startDateError');
    const endError = document.getElementById('endDateError');
    
    // Reset errors
    startError.textContent = '';
    endError.textContent = '';
    
    if (!startDate.value || !endDate.value) {
        if (!startDate.value) startError.textContent = 'Please select start date';
        if (!endDate.value) endError.textContent = 'Please select end date';
        return false;
    }

    const start = new Date(startDate.value);
    const end = new Date(endDate.value);
    const today = new Date();

    if (start > today) {
        startError.textContent = 'Start date cannot be in the future';
        return false;
    }

    if (end < start) {
        endError.textContent = 'End date must be after start date';
        return false;
    }

    return true;
}

// Update the generateSalesReport function
async function generateSalesReport(page = 1) {
    const range = document.getElementById('salesReportRange').value;
    let url = `/admin/api/sales-report?range=${range}&page=${page}`;

    if (range === 'custom') {
        if (!validateDateRange()) {
            return;
        }
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        url += `&startDate=${startDate}&endDate=${endDate}`;
    }

    try {
        const response = await fetch(url);
        const result = await response.json();

        if (result.error) {
            alert(result.error);
            return;
        }

        // Update sales chart
        const chartData = result.data.map(item => ({
            x: new Date(item._id).getTime(),
            y: parseFloat(item.netSales.toFixed(2))
        }));

        const orderData = result.data.map(item => ({
            x: new Date(item._id).getTime(),
            y: item.ordersCount
        }));

        salesChart.updateSeries([
            {
                name: 'Net Sales',
                data: chartData
            },
            {
                name: 'Orders',
                data: orderData
            }
        ]);

        // Update sales summary table
        updateSalesSummaryTable(result.data);
        
        // Update pagination
        updatePagination(result.pagination);

    } catch (error) {
        console.error('Error generating sales report:', error);
        alert('Error generating sales report');
    }
}



const calculateTotals = (data) => {
    return data.reduce((acc, item) => {
        acc.totalOrders += item.ordersCount;
        acc.totalSales += item.totalSales;
        acc.totalDiscounts += (item.productDiscounts + item.couponDiscounts);
        acc.totalNetSales += item.netSales;
        return acc;
    }, {
        totalOrders: 0,
        totalSales: 0,
        totalDiscounts: 0,
        totalNetSales: 0
    });
};

const calculateGrowth = (current, previous) => {
    if (!previous || previous === 0) return 0;
    const growth = ((current - previous) / previous) * 100;
    return Math.min(Math.max(growth, -100), 100); // Limits growth between -100% and 100%
};

// Update the getSalesReportData function
const getSalesReportData = async (range, startDate, endDate, page = 1, limit = 10) => {
    const dateQuery = constructDateQuery(range, startDate, endDate);
    
    const skip = (page - 1) * limit;
    
    const data = await Order.aggregate([
        { 
            $match: { 
                ...dateQuery,
                status: { $ne: 'cancelled' } 
            } 
        },
        {
            $group: {
                _id: { 
                    $dateToString: { 
                        format: "%Y-%m-%d",
                        date: "$createdAt"
                    } 
                },
                totalSales: { $sum: '$total' },
                ordersCount: { $sum: 1 },
                productDiscounts: { $sum: '$totalDiscount' },
                couponDiscounts: { $sum: { $ifNull: ['$couponApplied.discountAmount', 0] } },
                netSales: {
                    $sum: {
                        $subtract: [
                            '$total',
                            {
                                $add: [
                                    '$totalDiscount',
                                    { $ifNull: ['$couponApplied.discountAmount', 0] }
                                ]
                            }
                        ]
                    }
                }
            }
        },
        { $sort: { _id: -1 } },
        {
            $facet: {
                metadata: [{ $count: "total" }],
                data: [{ $skip: skip }, { $limit: limit }],
                totals: [
                    {
                        $group: {
                            _id: null,
                            totalOrders: { $sum: '$ordersCount' },
                            totalSales: { $sum: '$totalSales' },
                            totalDiscounts: { 
                                $sum: { 
                                    $add: ['$productDiscounts', '$couponDiscounts'] 
                                } 
                            },
                            totalNetSales: { $sum: '$netSales' }
                        }
                    }
                ]
            }
        }
    ]);


    async function getPreviousPeriodData(range, startDate, endDate) {
    const now = new Date();
    let previousStart, previousEnd;

    switch (range) {
        case 'daily':
            previousStart = new Date(now);
            previousStart.setDate(previousStart.getDate() - 1);
            previousEnd = new Date(previousStart);
            break;
        case 'weekly':
            previousStart = new Date(now);
            previousStart.setDate(previousStart.getDate() - 14);
            previousEnd = new Date(now);
            previousEnd.setDate(previousEnd.getDate() - 7);
            break;
        case 'monthly':
            previousStart = new Date(now);
            previousStart.setMonth(previousStart.getMonth() - 2);
            previousEnd = new Date(now);
            previousEnd.setMonth(previousEnd.getMonth() - 1);
            break;
        case 'yearly':
            previousStart = new Date(now);
            previousStart.setFullYear(previousStart.getFullYear() - 2);
            previousEnd = new Date(now);
            previousEnd.setFullYear(previousEnd.getFullYear() - 1);
            break;
        case 'custom':
            const start = new Date(startDate);
            const end = new Date(endDate);
            const duration = end - start;
            previousEnd = new Date(start);
            previousStart = new Date(start);
            previousStart.setTime(previousStart.getTime() - duration);
            break;
    }

    const previousData = await Order.aggregate([
        {
            $match: {
                createdAt: {
                    $gte: previousStart,
                    $lte: previousEnd
                },
                status: { $ne: 'cancelled' }
            }
        },
        {
            $group: {
                _id: null,
                totalOrders: { $sum: 1 },
                totalSales: { $sum: '$total' },
                totalDiscounts: {
                    $sum: {
                        $add: [
                            '$totalDiscount',
                            { $ifNull: ['$couponApplied.discountAmount', 0] }
                        ]
                    }
                },
                totalNetSales: {
                    $sum: {
                        $subtract: [
                            '$total',
                            {
                                $add: [
                                    '$totalDiscount',
                                    { $ifNull: ['$couponApplied.discountAmount', 0] }
                                ]
                            }
                        ]
                    }
                }
            }
        }
    ]);

    return previousData[0] || {
        totalOrders: 0,
        totalSales: 0,
        totalDiscounts: 0,
        totalNetSales: 0
    };
}


    // Get previous period data for growth calculation
    const previousPeriodData = await getPreviousPeriodData(range, startDate, endDate);
    
    const totalRecords = data[0].metadata[0]?.total || 0;
    const totalPages = Math.ceil(totalRecords / limit);
    const totals = data[0].totals[0] || {
        totalOrders: 0,
        totalSales: 0,
        totalDiscounts: 0,
        totalNetSales: 0
    };

    // Calculate growth rates
    const growth = {
        orders: calculateGrowth(totals.totalOrders, previousPeriodData.totalOrders),
        sales: calculateGrowth(totals.totalSales, previousPeriodData.totalSales),
        discounts: calculateGrowth(totals.totalDiscounts, previousPeriodData.totalDiscounts),
        netSales: calculateGrowth(totals.totalNetSales, previousPeriodData.totalNetSales)
    };
    
    return {
        data: data[0].data,
        totals,
        growth,
        pagination: {
            currentPage: page,
            totalPages,
            totalRecords,
            hasNextPage: page < totalPages,
            hasPrevPage: page > 1
        }
    };
};


function constructDateQuery(range, startDate, endDate) {
    const now = new Date();
    let dateQuery = {};
    
    switch (range) {
        case 'daily':
            dateQuery = {
                createdAt: {
                    $gte: new Date(now.setHours(0, 0, 0, 0)),
                    $lt: new Date(now.setHours(23, 59, 59, 999))
                }
            };
            break;
        
    }
    
    return dateQuery;
}

    // Update Sales Summary Table
    function updateSalesSummaryTable(data) {
        const tbody = document.getElementById('salesSummaryTable');
        tbody.innerHTML = '';

        data.forEach(item => {
            const totalDiscounts = item.productDiscounts + item.couponDiscounts;
            const row = document.createElement('tr');
            
            row.innerHTML = `
                <td>${new Date(item._id).toLocaleDateString('en-IN', { 
                    year: 'numeric', 
                    month: 'short', 
                    day: 'numeric' 
                })}</td>
                <td>${item.ordersCount}</td>
                <td>₹${item.totalSales.toLocaleString('en-IN', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                })}</td>
                <td>₹${totalDiscounts.toLocaleString('en-IN', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                })}</td>
                <td>₹${item.netSales.toLocaleString('en-IN', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                })}</td>
                <td class="${item.growth >= 0 ? 'text-success' : 'text-danger'}">
                    ${item.growth >= 0 ? '+' : ''}${item.growth?.toFixed(2) || 0}%
                </td>
            `;
            tbody.appendChild(row);
        });
    }

    // Event listeners
    document.getElementById('salesReportRange').addEventListener('change', function(e) {
        const customRange = document.getElementById('customDateRange');
        customRange.classList.toggle('d-none', e.target.value !== 'custom');
        generateSalesReport();
    });

    function updatePagination(pagination) {
        const container = document.getElementById('salesSummaryPagination');
        container.innerHTML = '';
        
        const paginationHtml = `
            <nav aria-label="Sales summary pagination">
                <ul class="pagination justify-content-center">
                    <li class="page-item ${!pagination.hasPrevPage ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${pagination.currentPage - 1}">Previous</a>
                    </li>
                    ${generatePageNumbers(pagination)}
                    <li class="page-item ${!pagination.hasNextPage ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${pagination.currentPage + 1}">Next</a>
                    </li>
                </ul>
            </nav>
        `;
        
        container.innerHTML = paginationHtml;
        
        // Add pagination event listeners
        container.querySelectorAll('.page-link').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const page = parseInt(e.target.dataset.page);
                if (page && page !== currentPage) {
                    currentPage = page;
                    generateSalesReport(page);
                }
            });
        });
    }

    function generatePageNumbers(pagination) {
        let pages = '';
        const totalPages = pagination.totalPages;
        const currentPage = pagination.currentPage;
        
        for (let i = 1; i <= totalPages; i++) {
            if (
                i === 1 || 
                i === totalPages || 
                (i >= currentPage - 1 && i <= currentPage + 1)
            ) {
                pages += `
                    <li class="page-item ${i === currentPage ? 'active' : ''}">
                        <a class="page-link" href="#" data-page="${i}">${i}</a>
                    </li>
                `;
            } else if (
                i === currentPage - 2 || 
                i === currentPage + 2
            ) {
                pages += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
            }
        }
        return pages;
    }

    // Handle Download Report
    async function downloadReport(format) {
    const range = document.getElementById('salesReportRange').value;
    let url = `/admin/api/download-report/${format}?range=${range}`;

    if (range === 'custom') {
        if (!validateDateRange()) {
            return;
        }
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        url += `&startDate=${startDate}&endDate=${endDate}`;
    }

    try {
        const response = await fetch(url);
        if (!response.ok) {
            const error = await response.json();
            alert(error.message || 'Error downloading report');
            return;
        }
        
        window.location.href = url;
    } catch (error) {
        console.error('Error downloading report:', error);
        alert('Error downloading report');
    }
}

    // Event Listeners
    document.getElementById('salesReportRange').addEventListener('change', function(e) {
        const customRange = document.getElementById('customDateRange');
        customRange.style.display = e.target.value === 'custom' ? 'block' : 'none';
    });

    document.getElementById('generateReport').addEventListener('click', generateSalesReport);
    document.getElementById('downloadPDF').addEventListener('click', () => downloadReport('pdf'));
    document.getElementById('downloadExcel').addEventListener('click', () => downloadReport('excel'));

    // Initialize everything
    initializeCharts();
    updateDashboard();
    generateSalesReport(1);

    // Update dashboard periodically
    setInterval(updateDashboard, 300000); // Every 5 minutes
});
</script>

<%- include("../../views/partials/admin/footer/") %>