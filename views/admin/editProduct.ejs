<%- include("../../views/partials/admin/header/") %>

<!-- Include SweetAlert2 CSS and JS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>

<!-- Content wrapper -->
<div class="content-wrapper">
    <!-- Content -->
    <div class="container-xxl flex-grow-1 container-p-y">
        <div class="row">
            <div class="col-xl-8 col-lg-10 col-md-12 mx-auto">
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Edit Product</h5>
                    </div>
                    <div class="card-body">
                        <form id="editProductForm" action="/admin/editProduct/<%= product._id %>" method="POST">
                            <!-- Product Name -->
                            <div class="mb-4">
                                <label class="form-label" for="productName">Product Name <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bx bx-package"></i></span>
                                    <input type="text" class="form-control" id="productName" name="productName" 
                                        value="<%= product.productName %>" required>
                                </div>
                                <div class="invalid-feedback" id="productNameError"></div>
                            </div>

                            <!-- Description -->
                            <div class="mb-4">
                                <label class="form-label" for="description">Description <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bx bx-detail"></i></span>
                                    <textarea class="form-control" id="description" name="description" rows="4" 
                                        required><%= product.description %></textarea>
                                </div>
                                <div class="invalid-feedback" id="descriptionError"></div>
                            </div>

                            <!-- Category -->
                            <div class="mb-4">
                                <label class="form-label" for="category">Category <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bx bx-category"></i></span>
                                    <select class="form-select" id="category" name="category" required>
                                        <option value="">Select Category</option>
                                        <% categories.forEach(category => { %>
                                            <option value="<%= category._id %>" 
                                                <%= product.category._id.toString() === category._id.toString() ? 'selected' : '' %>>
                                                <%= category.name %>
                                            </option>
                                        <% }); %>
                                    </select>
                                </div>
                                <div class="invalid-feedback" id="categoryError"></div>
                            </div>

                            <!-- Regular Price -->
                            <div class="mb-4">
                                <label class="form-label" for="regularPrice">Regular Price <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text">â‚¹</span>
                                    <input type="number" class="form-control" id="regularPrice" name="regularPrice" 
                                        value="<%= product.regularPrice %>" required min="0" step="0.01">
                                </div>
                                <div class="invalid-feedback" id="regularPriceError"></div>
                            </div>

                            <!-- Buttons -->
                            <div class="mt-4 d-flex gap-2">
                                <button type="submit" class="btn btn-primary">
                                    <i class="bx bx-save me-1"></i> Update Product
                                </button>
                                <a href="/admin/products" class="btn btn-secondary">
                                    <i class="bx bx-x me-1"></i> Cancel
                                </a>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Include footer -->
<%- include("../../views/partials/admin/footer/") %>

<!-- Form validation and submission script -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('editProductForm');
    const inputs = form.querySelectorAll('input, textarea, select');
    
    // Real-time validation
    inputs.forEach(input => {
        input.addEventListener('input', function() {
            validateField(this);
        });

        input.addEventListener('blur', function() {
            validateField(this);
        });
    });

    // Field validation function
    function validateField(field) {
        const errorDiv = document.getElementById(field.id + 'Error');
        let isValid = true;
        let errorMessage = '';

        switch(field.id) {
            case 'productName':
                if (!field.value.trim()) {
                    errorMessage = 'Product name is required';
                    isValid = false;
                } else if (field.value.trim().length < 3) {
                    errorMessage = 'Product name must be at least 3 characters';
                    isValid = false;
                }
                break;

            case 'description':
                if (!field.value.trim()) {
                    errorMessage = 'Description is required';
                    isValid = false;
                } else if (field.value.trim().length < 10) {
                    errorMessage = 'Description must be at least 10 characters';
                    isValid = false;
                }
                break;

            case 'category':
                if (!field.value) {
                    errorMessage = 'Please select a category';
                    isValid = false;
                }
                break;

            case 'regularPrice':
                if (!field.value) {
                    errorMessage = 'Price is required';
                    isValid = false;
                } else if (isNaN(field.value) || Number(field.value) <= 0) {
                    errorMessage = 'Please enter a valid price greater than 0';
                    isValid = false;
                }
                break;
        }

        // Update UI
        if (!isValid) {
            field.classList.add('is-invalid');
            field.classList.remove('is-valid');
            errorDiv.textContent = errorMessage;
            errorDiv.style.display = 'block';
        } else {
            field.classList.remove('is-invalid');
            field.classList.add('is-valid');
            errorDiv.style.display = 'none';
        }

        return isValid;
    }

    // Form submission
    form.addEventListener('submit', async function(event) {
        event.preventDefault();
        
        // Validate all fields
        let isValid = true;
        inputs.forEach(input => {
            if (!validateField(input)) {
                isValid = false;
            }
        });

        if (!isValid) {
            return;
        }

        try {
            const formData = new FormData(form);
            const response = await fetch(form.action, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(Object.fromEntries(formData))
            });

            const result = await response.json();

            if (result.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: result.message,
                    confirmButtonColor: '#3085d6'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/admin/products';
                    }
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: result.error,
                    confirmButtonColor: '#d33'
                });
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'Something went wrong. Please try again.',
                confirmButtonColor: '#d33'
            });
        }
    });
});
</script>

<style>
.card {
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
}

.card:hover {
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
}

.form-control:focus, .form-select:focus {
    border-color: #696cff;
    box-shadow: 0 0 0 0.25rem rgba(105, 108, 255, 0.25);
}

.input-group-text {
    background-color: #f5f5f9;
    border-right: none;
}

.input-group .form-control {
    border-left: none;
}

.input-group .form-control:focus + .input-group-text {
    border-color: #696cff;
}

.invalid-feedback {
    display: none;
    color: #ff3e1d;
    font-size: 0.875rem;
    margin-top: 0.25rem;
}

.btn-primary {
    background-color: #696cff;
    border-color: #696cff;
    box-shadow: 0 2px 4px rgba(105, 108, 255, 0.4);
}

.btn-primary:hover {
    background-color: #5f61e6;
    border-color: #5f61e6;
    transform: translateY(-1px);
}

.btn-secondary {
    box-shadow: 0 2px 4px rgba(67, 89, 113, 0.2);
}

.btn-secondary:hover {
    transform: translateY(-1px);
}
</style>