<%- include("../partials/admin/header/") %>


<style>
    .table td {
        vertical-align: middle;
    }
    .btn {
        margin: 0;
    }
    .dropdown-menu {
        min-width: 120px;
    }
    .actions-dropdown {
        cursor: pointer;
    }
</style>

<!-- Content wrapper -->
<div class="content-wrapper">
    <!-- Content -->
    <div class="container-xxl flex-grow-1 container-p-y">
        <!-- Offer List Table -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Offers Management</h5>
                <div class="dropdown">
                    <button class="btn btn-primary dropdown-toggle" type="button" id="createOfferDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        Create New Offer
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="createOfferDropdown">
                        <li><a class="dropdown-item" href="/admin/offers/create?type=product">Product Offer</a></li>
                        <li><a class="dropdown-item" href="/admin/offers/create?type=category">Category Offer</a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body">
                <!-- Search Bar -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <input type="text" id="searchInput" class="form-control" placeholder="Search offers...">
                    </div>
                </div>
                
                <!-- Offers Table -->
                <div class="table-responsive" id="offersTableContainer">
                    <table class="table table-striped" id="offersTable">
                        <thead>
                            <tr>
                                <th>Offer Name</th>
                                <th>Offer Type</th>
                                <th>Discount (%)</th>
                                <th>Expiry Date</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="offersTableBody">
                            <% offers.forEach(offer => { %>
                                <tr id="offer-<%= offer._id %>">
                                    <td><%= offer.offerName %></td>
                                    <td><%= offer.offerType %></td>
                                    <td><%= offer.discount %>%</td>
                                    <td><%= offer.expireDate.toLocaleDateString() %></td>
                                    <td>
                                        <span class="badge <%= 
                                            offer.status === 'active' && offer.isListed ? 'bg-success' : 
                                            offer.status === 'inactive' || !offer.isListed ? 'bg-warning' : 'bg-danger' 
                                        %>">
                                            <%= 
                                                offer.status === 'active' && offer.isListed ? 'Active' : 
                                                offer.status === 'inactive' || !offer.isListed ? 'Inactive' : 'Error' 
                                            %>
                                        </span>
                                    </td>
                                    <td>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle actions-dropdown" 
                                                    type="button" 
                                                    data-bs-toggle="dropdown" 
                                                    aria-expanded="false">
                                                Actions
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li>
                                                    <a class="dropdown-item" href="/admin/offers/edit/<%= offer._id %>">
                                                        <i class="bx bx-edit-alt me-1"></i> Edit
                                                    </a>
                                                </li>
                                                <li>
                                                    <a class="dropdown-item toggle-status" href="#" 
                                                       data-id="<%= offer._id %>" 
                                                       data-current-status="<%= offer.status %>">
                                                        <i class="bx <%= offer.status === 'active' ? 'bx-block' : 'bx-check-circle' %> me-1"></i> 
                                                        <%= offer.status === 'active' ? 'Deactivate' : 'Activate' %>
                                                    </a>
                                                </li>
                                                <li>
                                                    <hr class="dropdown-divider">
                                                </li>
                                                <li>
                                                    <a class="dropdown-item text-danger delete-offer" href="#" 
                                                       data-id="<%= offer._id %>">
                                                        <i class="bx bx-trash me-1"></i> Delete
                                                    </a>
                                                </li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div id="pagination" class="d-flex justify-content-center my-4">
                    <% if (totalPages > 1) { %>
                        <% if (currentPage > 1) { %>
                            <button class="btn btn-secondary page-link" data-page="<%= currentPage - 1 %>">Previous</button>
                        <% } else { %>
                            <button class="btn btn-secondary" disabled>Previous</button>
                        <% } %>
                        
                        <span id="page-info" class="mx-3">Page <%= currentPage %> of <%= totalPages %></span>
                        
                        <% if (currentPage < totalPages) { %>
                            <button class="btn btn-secondary page-link" data-page="<%= currentPage + 1 %>">Next</button>
                        <% } else { %>
                            <button class="btn btn-secondary" disabled>Next</button>
                        <% } %>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
</div>

<%- include("../partials/admin/footer/") %>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function () {
    // Axios instance with default configuration
    const axiosInstance = axios.create({
        baseURL: '/admin/offers',
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        }
    });

    // Search Functionality
    const searchInput = document.getElementById('searchInput');
    searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const rows = document.querySelectorAll('#offersTableBody tr');
        
        rows.forEach(row => {
            const cells = row.getElementsByTagName('td');
            const shouldShow = Array.from(cells).some(cell => 
                cell.textContent.toLowerCase().includes(searchTerm)
            );
            row.style.display = shouldShow ? '' : 'none';
        });
    });

    // Pagination Handling
    document.getElementById('pagination')?.addEventListener('click', async (e) => {
        if (e.target.classList.contains('page-link')) {
            const page = e.target.dataset.page;
            try {
                const response = await axiosInstance.get(`?page=${page}`);
                
                // Update table body 
                const tableBodyHTML = response.data.offers.map(offer => `
                    <tr id="offer-${offer._id}">
                        <td>${offer.offerName}</td>
                        <td>${offer.offerType}</td>
                        <td>${offer.discount}%</td>
                        <td>${new Date(offer.expireDate).toLocaleDateString()}</td>
                        <td>
    <span class="badge ${
        offer.status === 'active' && offer.isListed ? 'bg-success' : 
        offer.status === 'inactive' || !offer.isListed ? 'bg-warning' : 'bg-danger'
    }">
        ${
            offer.status === 'active' && offer.isListed ? 'Active' : 
            offer.status === 'inactive' || !offer.isListed ? 'Inactive' : 'Error'
        }
    </span>
</td>
                        <td>
                            <div class="dropdown">
                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle actions-dropdown" 
                                        type="button" 
                                        data-bs-toggle="dropdown" 
                                        aria-expanded="false">
                                    Actions
                                </button>
                                <ul class="dropdown-menu">
                                    <li>
                                        <a class="dropdown-item" href="/admin/offers/edit/${offer._id}">
                                            <i class="bx bx-edit-alt me-1"></i> Edit
                                        </a>
                                    </li>
                                    <li>
                                        <a class="dropdown-item toggle-status" href="#" 
                                           data-id="${offer._id}" 
                                           data-current-status="${offer.status}">
                                            <i class="bx ${offer.status === 'active' ? 'bx-block' : 'bx-check-circle'} me-1"></i> 
                                            ${offer.status === 'active' ? 'Deactivate' : 'Activate'}
                                        </a>
                                    </li>
                                    <li>
                                        <hr class="dropdown-divider">
                                    </li>
                                    <li>
                                        <a class="dropdown-item text-danger delete-offer" href="#" 
                                           data-id="${offer._id}">
                                            <i class="bx bx-trash me-1"></i> Delete
                                        </a>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                `).join('');

                document.getElementById('offersTableBody').innerHTML = tableBodyHTML;
                
                // Update pagination
                const paginationHTML = `
                    ${response.data.currentPage > 1 ? 
                        `<button class="btn btn-secondary page-link" data-page="${response.data.currentPage - 1}">Previous</button>` : 
                        `<button class="btn btn-secondary" disabled>Previous</button>`
                    }
                    <span id="page-info" class="mx-3">Page ${response.data.currentPage} of ${response.data.totalPages}</span>
                    ${response.data.currentPage < response.data.totalPages ? 
                        `<button class="btn btn-secondary page-link" data-page="${response.data.currentPage + 1}">Next</button>` : 
                        `<button class="btn btn-secondary" disabled>Next</button>`
                    }
                `;
                document.getElementById('pagination').innerHTML = paginationHTML;
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Pagination Error',
                    text: 'Failed to load page. Please try again.'
                });
            }
        }
    });

    // Delete Offer Functionality
    document.getElementById('offersTableBody').addEventListener('click', async (e) => {
    const deleteOfferLink = e.target.closest('.delete-offer');
    if (deleteOfferLink) {
        e.preventDefault();
        const offerId = deleteOfferLink.dataset.id;

        try {
            // First show confirmation SweetAlert
            const confirmResult = await Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            });

            // If user confirms deletion
            if (confirmResult.isConfirmed) {
                // Show loading state
                Swal.fire({
                    title: 'Deleting...',
                    text: 'Please wait',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    willOpen: () => {
                        Swal.showLoading();
                    }
                });

                const response = await fetch(`/admin/offers/delete/${offerId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                const data = await response.json();

                if (data.success) {
                    // Remove the row from the table
                    const row = document.getElementById(`offer-${offerId}`);
                    if (row) {
                        row.remove();
                    }

                    // Show success message
                    await Swal.fire({
                        icon: 'success',
                        title: 'Deleted!',
                        text: 'The offer has been deleted successfully.',
                        timer: 1500,
                        showConfirmButton: false
                    });

                    // Optional: Refresh the page if needed
                    // window.location.reload();
                } else {
                    throw new Error(data.message || 'Failed to delete offer');
                }
            }
        } catch (error) {
            console.error('Delete error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Delete Error',
                text: error.message || 'Failed to delete offer. Please try again.'
            });
        }
    }
});

    // Toggle Offer Status Functionality
  
document.getElementById('offersTableBody').addEventListener('click', async (e) => {
    if (e.target.closest('.toggle-status')) {
        e.preventDefault();
        const offerElement = e.target.closest('.toggle-status');
        const offerId = offerElement.dataset.id;
        const currentStatus = offerElement.dataset.currentStatus;

        try {
            const response = await fetch(`/admin/offers/toggle-status/${offerId}`, {
                method: 'PATCH',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();

            if (data.success) {
                // Update status in the UI
                const statusBadge = document.querySelector(`#offer-${offerId} .badge`);
                const statusToggleLink = offerElement;
                
                // Determine the new status based on response
                const newStatus = data.status;
                const badgeClass = newStatus === 'active' ? 'bg-success' : 'bg-warning';
                
                statusBadge.classList.remove('bg-success', 'bg-danger', 'bg-warning');
                statusBadge.classList.add(badgeClass);
                statusBadge.textContent = newStatus.charAt(0).toUpperCase() + newStatus.slice(1);
                
                // Update toggle link
                statusToggleLink.dataset.currentStatus = newStatus;
                statusToggleLink.innerHTML = newStatus === 'active' 
                    ? `<i class="bx bx-block me-1"></i> Deactivate` 
                    : `<i class="bx bx-check-circle me-1"></i> Activate`;

                Swal.fire({
                    icon: 'success',
                    title: 'Status Updated',
                    text: `Offer has been ${newStatus}d.`,
                    showConfirmButton: false,
                    timer: 1500
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.message || 'Failed to update offer status.'
                });
            }
        } catch (error) {
            console.error('Toggle status error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Status Update Error',
                text: 'Failed to update offer status'
            });
        }
    }
});
});
</script>