<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Summary - <%= order._id %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/main.css">
</head>
<body>
    <div class="container my-5">
        <div class="row">
            <div class="col-12">
                <h1 class="mb-4">Order Summary</h1>
                <div class="row">
                    <div class="col-md-4">
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5>Shipping Information</h5>
                            </div>
                            <div class="card-body">
                                <address>
                                    <strong><%= order.shippingAddress.name %></strong><br>
                                    <%= order.shippingAddress.addressType %><br>
                                    Phone: <%= order.shippingAddress.phone %><br>
                                    Landmark: <%= order.shippingAddress.landmark %><br>
                                    <%= order.shippingAddress.city %>, <%= order.shippingAddress.state %> - <%= order.shippingAddress.pincode %>
                                </address>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5>Payment Details</h5>
                            </div>
                            <div class="card-body">
                                <p><strong>Payment Method:</strong> <%= order.paymentMethod.toUpperCase() %></p>
                                <p><strong>Payment Status:</strong> 
                                    <span class="badge bg-<%= order.paymentStatus === 'paid' ? 'success' : 
                                                            order.paymentStatus === 'pending' ? 'warning' : 'danger' %>">
                                        <%= order.paymentStatus.charAt(0).toUpperCase() + order.paymentStatus.slice(1) %>
                                    </span>
                                </p>
                                <% if (order.paymentStatus === 'failed' && order.paymentMethod === 'RazorPay') { %>
                                    <button class="btn btn-primary mt-2" id="retry-payment">
                                        Try Payment Again
                                    </button>
                                <% } %>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5>Order Details</h5>
                            </div>
                            <div class="card-body">
                                <p><strong>Order Number:</strong> #<%= order.orderId %></p>
                                <p><strong>Order Date:</strong> <%= new Date(order.createdAt).toLocaleString() %></p>
                                <p><strong>Order Status:</strong> 
                                    <span class="badge bg-<%= 
                                        order.status === 'pending' ? 'warning' : 
                                        order.status === 'processing' ? 'info' :
                                        order.status === 'shipped' ? 'primary' :
                                        order.status === 'delivered' ? 'success' : 'danger' %>">
                                        <%= order.status.charAt(0).toUpperCase() + order.status.slice(1) %>
                                    </span>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h5>Order Items</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th>Product</th>
                                        <th>Product Name</th>
                                        <th>Color</th>
                                        <th>Size</th>
                                        <th>Category</th>
                                        <th>Quantity</th>
                                        <th>Price</th>
                                        <th>Total Price</th>
                                        <th>Coupon Savings</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% orderItems.forEach(item => { %>
                                        <tr> <td>
                                            <a href="/productDetails?id=<%= item.productId._id %>" class="product-link" 
                                               data-product-id="<%= item.productId._id %>">
                                                <img
                                                    src="/uploads/product-images/<%= 
                                                        item.product.variants.find(v => 
                                                            v.color === item.color && 
                                                            v.images && v.images.length > 0
                                                        )?.images[0]?.filename || 'placeholder.jpg' 
                                                    %>"
                                                    alt="<%= item.product.productName %>"
                                                    class="img-thumbnail product-image"
                                                    style="width: 50px; height: 50px; object-fit: cover;"
                                                    data-product-id="<%= item.productId._id %>"
                                                />
                                            </a>
                                        </td>
                                        <td>
                                            <a href="/productDetails?id=<%= item.productId._id %>" class="product-link"
                                               data-product-id="<%= item.productId._id %>">
                                                <%= item.product.productName %>
                                            </a>
                                        </td>
                                            <td><%= item.color %></td>
                                            <td><%= item.size %></td>
                                            <td><%= item.product.category?.name || 'Uncategorized' %></td>
                                            <td><%= item.quantity %></td>
                                            <td>₹<%= item.price %></td>
                                            <td>₹<%= item.totalPrice %></td>

                                            <td>
                                                <% if (order.couponApplied && order.couponApplied.discountAmount) { 
                                                    const orderSubtotal = order.items.reduce((sum, item) => sum + item.totalPrice, 0);
                                                    const itemDiscountProportion = item.totalPrice / orderSubtotal;
                                                    const itemCouponDiscount = order.couponApplied.discountAmount * itemDiscountProportion;
                                                %>
                                                    ₹<%= itemCouponDiscount.toFixed(2) %>
                                                <% } else { %>
                                                    <span class="text-muted">No coupon applied</span>
                                                <% } %>
                                            </td>

                                             <td>
                <span class="badge bg-<%= 
                    item.status === 'placed' ? 'primary' :
                    item.status === 'cancelled' ? 'danger' :
                    item.status === 'return_requested' ? 'warning' :
                    item.status === 'returned' ? 'info' : 'success'
                %>">
                    <%= item.status ? (item.status.charAt(0).toUpperCase() + item.status.slice(1)) : 'Unknown' %>
                </span>
            </td>
            <td>
                <% if (item.status === 'placed' && order.status === 'delivered') { %>
                    <button 
                        class="btn btn-sm btn-warning return-order-item"
                        data-order-id="<%= order._id %>"
                        data-item-id="<%= item._id %>"
                    >
                        Return
                    </button>
                <% } else if (item.status === 'return_requested') { %>
                    <span class="badge bg-info">Return Requested</span>
                <% } else if (item.status === 'returned') { %>
                    <span class="badge bg-success">Returned</span>
                <% } else if (item.status === 'placed' && order.status !== 'delivered') { %>
                    <button 
                        class="btn btn-sm btn-danger cancel-order-item"
                        data-order-id="<%= order._id %>"
                        data-item-id="<%= item._id %>"
                    >
                        Cancel
                    </button>
                <% } %>
            </td>
                                        </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <div class="card mt-3">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6 offset-md-6">
                                <div class="d-flex justify-content-between">
                                    <span>Subtotal:</span>
                                    <span>₹<%= order.subtotal %></span>
                                </div>
                                <% if (order.couponApplied && order.couponApplied.discountAmount) { %>
                                <div class="d-flex justify-content-between">
                                    <span>Coupon Discount:</span>
                                    <span>-₹<%= order.couponApplied.discountAmount %></span>
                                </div>
                                <% } %>
                                <div class="d-flex justify-content-between">
                                    <span>Shipping:</span>
                                    <span>₹50</span>
                                </div>
                                <div class="d-flex justify-content-between fw-bold">
                                    <span>Total:</span>
                                    <span>₹<%= 
                                        (order.subtotal - 
                                        (order.couponApplied ? order.couponApplied.discountAmount : 0) + 
                                        50).toFixed(2) 
                                    %></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                
                <div class="mt-3 d-flex justify-content-between">
                    <a href="/profile/orders" class="btn btn-secondary">Back to Orders</a>
                    <% if (order.status === 'delivered') { %>
                        <button id="downloadPDF" class="btn btn-primary">Download Order Summary</button>
                    <% } %>
                    <% if (order.status !== 'cancelled' && order.status !== 'delivered') { %>
                        <button id="cancel-entire-order" class="btn btn-danger">Cancel Entire Order</button>
                    <% } %>
                </div>
            </div>
        </div>
    </div>


    <div class="modal fade" id="returnModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Return Request</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="returnForm">
                        <input type="hidden" id="returnItemId" name="itemId">
                        <div class="mb-3">
                            <label class="form-label">Return Reason</label>
                            <select class="form-select" id="returnReason" name="reason" required>
                                <option value="">Select a reason</option>
                                <option value="wrong_size">Wrong Size</option>
                                <option value="damaged">Product Damaged</option>
                                <option value="quality_issue">Quality Issue</option>
                                <option value="not_as_described">Not as Described</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                        <div class="mb-3 d-none" id="customReasonDiv">
                            <label class="form-label">Please specify your reason</label>
                            <textarea class="form-control" id="customReason" name="customReason" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="submitReturn">Submit Return Request</button>
                </div>
            </div>
        </div>
    </div>

</body>


<!-- Add these scripts before your closing </body> tag -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>



<script>
   document.addEventListener('DOMContentLoaded', () => {
    const cancelButtons = document.querySelectorAll('.cancel-order-item');
    const cancelEntireOrderButton = document.getElementById('cancel-entire-order');
    
    const returnButtons = document.querySelectorAll('.return-order-item');
    const returnModal = new bootstrap.Modal(document.getElementById('returnModal'));
    const returnReasonSelect = document.getElementById('returnReason');
    const customReasonDiv = document.getElementById('customReasonDiv');
    const submitReturnBtn = document.getElementById('submitReturn');
    let currentItemId = null;
    let currentOrderId = null;

    cancelButtons.forEach(button => {
        button.addEventListener('click', async () => {
            const orderId = button.getAttribute('data-order-id');
            const itemId = button.getAttribute('data-item-id');
            
            try {
                const response = await fetch(`/order/${orderId}/cancel-item/${itemId}`, {
                    method: 'POST'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Order Item Cancelled',
                        text: 'The order item has been successfully cancelled and product quantity restored.',
                        showConfirmButton: false,
                        timer: 2000
                    }).then(() => {
                        // Reload the page to reflect changes
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: result.message || 'Unable to cancel the order item. Please try again.'
                    });
                }
            } catch (error) {
                console.error('Cancel Order Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Network Error',
                    text: 'Unable to connect to the server. Please check your internet connection.'
                });
            }
        });
    });
    
        // Add event listener for cancelling entire order
        if (cancelEntireOrderButton) {
            cancelEntireOrderButton.addEventListener('click', async () => {
                const orderId = '<%= order._id %>';
                
                try {
                    const response = await fetch(`/order/${orderId}/cancel-order`, {
                        method: 'POST'
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Order Cancelled',
                            text: 'The entire order has been successfully cancelled.'
                        }).then(() => {
                            // Reload the page to reflect changes
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: result.message
                        });
                    }
                } catch (error) {
                    console.error('Cancel Entire Order Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to cancel entire order'
                    });
                }
            });
        }


        returnReasonSelect.addEventListener('change', (e) => {
        if (e.target.value === 'other') {
            customReasonDiv.classList.remove('d-none');
        } else {
            customReasonDiv.classList.add('d-none');
        }
    });

    returnButtons.forEach(button => {
        button.addEventListener('click', () => {
            currentItemId = button.getAttribute('data-item-id');
            currentOrderId = button.getAttribute('data-order-id');
            document.getElementById('returnItemId').value = currentItemId;
            returnModal.show();
        });
    });

    

    submitReturnBtn.addEventListener('click', async () => {
    const reason = returnReasonSelect.value;
    const customReason = document.getElementById('customReason').value;

    if (!reason) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Please select a return reason'
        });
        return;
    }

    if (reason === 'other' && !customReason.trim()) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Please specify your return reason'
        });
        return;
    }

    try {
        const response = await fetch(`/order/${currentOrderId}/return-item/${currentItemId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                // Add CSRF token if you're using it
                // 'CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
            },
            body: JSON.stringify({
                reason: reason,
                customReason: reason === 'other' ? customReason : undefined
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();

        if (result.success) {
            returnModal.hide();
            Swal.fire({
                icon: 'success',
                title: 'Return Requested',
                text: 'Your return request has been submitted successfully.',
                showConfirmButton: false,
                timer: 2000
            }).then(() => {
                window.location.reload();
            });
        } else {
            throw new Error(result.message || 'Failed to submit return request');
        }
    } catch (error) {
        console.error('Return Request Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to submit return request'
        });
    }
});



 // Add click handler for product images and names
 document.querySelectorAll('.product-link, .product-image').forEach(element => {
            element.addEventListener('click', (e) => {
                if (!e.target.closest('.pdf-view')) {
                    const productId = e.currentTarget.getAttribute('data-product-id');
                    window.location.href = `/productDetails?id=${productId}`;
                }
            });
        });



        document.getElementById('retry-payment')?.addEventListener('click', async () => {
    try {
        const orderId = '<%= order._id %>';
        const response = await fetch(`/order/${orderId}/retry-payment`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const data = await response.json();
        if (!data.success) {
            throw new Error(data.message);
        }

        const options = {
            key: '<%= process.env.RAZORPAY_KEY_ID %>',
            amount: data.amount,
            currency: data.currency,
            name: 'Your Store Name',
            description: 'Order Payment',
            order_id: data.orderId,
            handler: async function (response) {
                try {
                    const verifyResponse = await fetch('/verify-payment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            orderId: orderId,
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_signature: response.razorpay_signature
                        })
                    });

                    const verifyData = await verifyResponse.json();
                    if (verifyData.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Payment Successful',
                            text: 'Your payment has been processed successfully!'
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        throw new Error(verifyData.message);
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Verification Failed',
                        text: error.message
                    });
                }
            },
            prefill: {
                name: '<%= order.shippingAddress.name %>',
                contact: '<%= order.shippingAddress.phone %>'
            },
            theme: {
                color: '#3399cc'
            }
        };

        const rzp = new Razorpay(options);
        rzp.open();

    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to initiate payment'
        });
    }
});



 // Add PDF download functionality
 document.getElementById('downloadPDF')?.addEventListener('click', async () => {
    try {
        const orderId = '<%= order._id %>';
        window.location.href = `/order/${orderId}/download-pdf`;
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to download PDF'
        });
    }
});


});
    </script>

</html>