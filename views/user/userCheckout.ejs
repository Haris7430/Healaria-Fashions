

<%- include("../../views/partials/user/header/") %>


<style>
/* Coupon Section Styles */
.coupon-section {
    position: relative;
    margin: 2rem 0;
}

.coupon-wrapper {
    display: flex;
    flex-wrap: nowrap;
    gap: 20px;
    overflow-x: auto;
    padding: 10px 0;
}

.coupon-wrapper .col-md-4 {
    flex: 0 0 300px; 
    min-width: 300px;
    margin-bottom: 0;
}

/* When there are only one or two coupons */
@media (min-width: 280) {
    .coupon-wrapper:only-child,
    .coupon-wrapper:nth-last-child(2) {
        justify-content: flex-start;
    }
    
    /* For single coupon */
    .coupon-wrapper:only-child .col-md-4 {
        flex: 0 0 400px;
        max-width: 400px;
    }
    
    /* For two coupons */
    .coupon-wrapper:nth-last-child(2) .col-md-4 {
        flex: 0 0 calc(50% - 10px);
        max-width: calc(50% - 10px);
    }
}

/* Responsive adjustments */
@media (max-width: 410px) {
    .coupon-wrapper .col-md-4 {
        flex: 0 0 100%;
        max-width: 100%;
    }
}

/* Coupon Remove Button Alignment */
.coupon-action-wrapper {
    display: flex;
    justify-content: flex-end;
    margin-bottom: 1rem;
}

#removeCouponBtn {
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
    margin-left: auto;
}

/* Coupon Card Styles */
.coupon-card {
    height: 100%;
    margin-bottom: 0; /* Remove bottom margin */
}

.coupon-card .card-body {
    padding: 1.25rem;
    display: flex;
    flex-direction: column;
    height: 100%;
}

/* Coupon Header Section */
.coupon-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
}

.coupon-code {
    font-weight: 600;
    font-size: 1.1rem;
    color: #384aeb;
}

.discount-badge {
    background: rgba(56, 74, 235, 0.1);
    color: #384aeb;
    padding: 0.25rem 0.75rem;
    border-radius: 4px;
    font-size: 0.875rem;
    font-weight: 500;
}

/* Product List Item Styles */
.product-list-item {
    display: flex;
    flex-direction: column;
    padding: 1rem 0;
    border-bottom: 1px solid #eee;
}

.product-info {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
}

.product-details {
    flex-grow: 1;
}

.product-pricing {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
}

/* Savings Display */
.savings-row {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    margin-top: 0.5rem;
    padding: 0.25rem 0.5rem;
    background-color: rgba(40, 167, 69, 0.1);
    border-radius: 4px;
    width: fit-content;
    margin-left: auto;
}

.savings-amount {
    color: #28a745;
    font-size: 0.875rem;
    font-weight: 500;
}

/* Order Summary Section */
.order-summary {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: 8px;
    margin-top: 1.5rem;
}

.order-summary-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 0;
}

.coupon-discount-row {
    color: #28a745;
    font-weight: 500;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .product-info {
        flex-direction: column;
    }
    
    .product-pricing {
        align-items: flex-start;
        margin-top: 1rem;
    }
    
    .savings-row {
        margin-left: 0;
    }
}
</style>

<style>
  .last {
    color: #384aeb;
    outline: #000;
  }

  .card {
    border: 1px solid #ddd;
    border-radius: 12px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    margin-top: 20px;
  }

  .card-body {
    padding: 1.5rem;
  }

  .card-title {
    margin-bottom: 1rem;
    color: #333;
    font-weight: 600;
    font-size: 1.2rem;
  }

  .card-text {
    margin-bottom: 0.75rem;
    color: #666;
    line-height: 1.6;
  }

  .badge {
    padding: 0.5em 1em;
    font-size: 0.875em;
    border-radius: 20px;
    background-color: #384aeb;
    color: white;
    margin-bottom: 1rem;
  }

  .btn-outline-primary {
    color: #384aeb;
    border-color: #384aeb;
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
    border-radius: 5px;
    transition: all 0.3s;
  }

  .btn-outline-primary:hover {
    color: #fff;
    background-color: #384aeb;
    border-color: #384aeb;
  }

  #addressDetails {
    transition: all 0.3s ease;
  }

  .address-card {
    background: #fff;
    border: 1px solid #e8e8e8;
    padding: 20px;
    margin-top: 20px;
    border-radius: 10px;
  }

  .address-info {
    margin-bottom: 10px;
    font-size: 1rem;
  }

  .address-label {
    font-weight: 600;
    color: #444;
    margin-right: 8px;
  }

  .add-address-btn {
    color: #000 !important;
    text-decoration: none !important;
    font-weight: 500;
    outline-width: 32;
  }

  select.form-control {
    height: 50px;
    border-radius: 8px;
    border: 1px solid #ddd;
    padding: 0 15px;
    font-size: 1rem;
  }

  .address-details-card {
    background: #f8f9fa;
    border-radius: 12px;
    padding: 20px;
    margin-top: 15px;
  }

  .contact-info {
    display: flex;
    gap: 20px;
    margin-bottom: 15px;
  }

  .divider {
    height: 1px;
    background: #e0e0e0;
    margin: 15px 0;
  }
</style>


<style>
.payment_item.disabled {
    opacity: 0.6;
    cursor: not-allowed;
}

.payment_item.disabled input[type="radio"] {
    cursor: not-allowed;
}

.payment_item.disabled label {
    cursor: not-allowed;
}
</style>

<!-- Start Banner Area -->
<section class="banner-area organic-breadcrumb">
  <div class="container">
    <div class="breadcrumb-banner d-flex flex-wrap align-items-center justify-content-end">
      <div class="col-first">
        <h1>Checkout</h1>
        <nav class="d-flex align-items-center">
          <a href="/">Home<span class="lnr lnr-arrow-right"></span></a>
          <a href="#">Checkout</a>
        </nav>
      </div>
    </div>
  </div>
</section>
<!-- End Banner Area -->

<!--================Checkout Area =================-->
<section class="checkout_area section_gap">
  <div class="container">
    <div class="billing_details">
      <div class="row">
        <div class="col-lg-8">
          <div class="coupon_section mt-4 mb-4">
            <h3>Available Coupons</h3>
            
            <div class="row" id="availableCouponsContainer">
              <!-- Coupons will be dynamically populated here -->
               
            </div>
            
          
            <div id="couponMessage" class="text-danger mt-2"></div>
          </div>

          <div class="coupon-action-wrapper">
            <button type="button" class="btn btn-sm btn-outline-danger" id="removeCouponBtn" style="display: none;">
                Remove Coupon
            </button>
        </div>

        <div class="col-lg-8">
            <h3>Shipping Address</h3>
            <div class="mb-4">
                <select class="form-control" id="addressSelect" onchange="displayAddressDetails(this.value)">
                    <option value="">Select an existing address</option>
                    <% addresses.forEach(function(address) { %>
                    <option value="<%= address._id %>">
                        <%= address.name %> - <%= address.landmark %>, <%= address.city %>
                    </option>
                    <% }); %>
                </select>
                </div>
            </div>
            <br>
        
                <!-- Move address details here, under the dropdown -->
                <div id="addressDetails" class="mt-3" style="display: none;">
                    <div class="address-details-card border rounded p-3">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <span class="badge bg-primary" id="addressType"></span>
                                <h5 class="card-title mb-3" id="addressName"></h5>
        
                                <div class="contact-info mb-2">
                                    <div>
                                        <span class="address-label fw-bold">Phone:</span>
                                        <span id="addressPhone"></span>
                                    </div>
                                    <div>
                                        <span class="address-label fw-bold">Alt Phone:</span>
                                        <span id="addressAltPhone"></span>
                                    </div>
                                </div>
        
                                <div class="divider border-bottom mb-2"></div>
        
                                <div class="address-info mb-1">
                                    <span class="address-label fw-bold">Landmark:</span>
                                    <span id="addressLandmark"></span>
                                </div>
        
                                <div class="address-info mb-1">
                                    <span class="address-label fw-bold">City:</span>
                                    <span id="addressCity"></span>
                                </div>
        
                                <div class="address-info mb-1">
                                    <span class="address-label fw-bold">State:</span>
                                    <span id="addressState"></span>
                                </div>
        
                                <div class="address-info">
                                    <span class="address-label fw-bold">Pincode:</span>
                                    <span id="addressPincode"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            <br> <br>
      

          <!-- Add New Address Button -->
          <div class="mb-4">
            <button type="button" class="primary-btn">
                <a href="/profile/add-address?from=checkout" class="add-address-btn">Add New Address</a>
            </button>
          </div>
        </div>

        <div class="col-lg-4">
          <div class="order_box">
            <h2>Your Order</h2>
            <ul class="list">
              <li><a href="#">Product <span>Total</span></a></li>
              <% cartItems.forEach(function(item) { %>
                <li data-product-id="<%= item.productId._id %>" class="product-list-item">
                  <div class="product-info">
                      <% if (item.variantImage) { %>
                      <img src="/uploads/product-images/<%= item.variantImage %>" alt="<%= item.productName %>"
                          style="width: 50px; height: 50px; object-fit: cover;">
                      <% } %>
                      <div class="product-details">
                          <span><%= item.productName %></span>
                          <small>(Color: <%= item.variantColor %>, Size: <%= item.variantSize %>)</small>
                          <span class="quantity">Qty: <%= item.quantity %></span>
                      </div>
                      <div class="product-pricing">
                          <span class="price">₹<%= (item.price * item.quantity).toFixed(2) %></span>
                          <div class="savings-row" style="display: none;">
                              <span class="savings-amount"></span>
                          </div>
                      </div>
                  </div>
              </li>
                <% }); %>
            </ul>

            

            <ul class="list list_2">
              <li><a href="#">Subtotal <span id="subtotalDisplay">₹<%= subtotal.toFixed(2) %></span></a></li>
              <li id="couponDiscountRow" style="display: none;">
                <a href="#">Coupon Discount <span id="couponDiscountDisplay">-₹0.00</span></a>
              </li>

              <li><a href="#">Shipping <span>₹<%= shippingCost.toFixed(2) %></span></a></li>
              <li><a href="#">Total <span id="totalDisplay">₹<%= total.toFixed(2) %></span></a></li>
            </ul>

            <!-- Payment Options -->
            <div class="payment_item">
                <div class="radion_btn">
                    <input type="radio" id="cod" name="payment_method" value="COD" 
                           <% if (total > 1000) { %>disabled<% } %>>
                    <label for="cod">Cash on Delivery</label>
                    <div class="check"></div>
                </div>
                <p id="codMessage">
                    <% if (total > 1000) { %>
                        Cash on Delivery is not available for orders above ₹1,000. Please choose another payment method.
                    <% } else { %>
                        Pay when you receive your order.
                    <% } %>
                </p>
            </div>
            <div class="payment_item">
              <div class="radion_btn">
                <input type="radio" id="razorpay" name="payment_method" value="RazorPay">
                <label for="razorpay">RazorPay</label>
                <div class="check"></div>
              </div>
              <p>Pay via RazorPay; you can pay with your credit card if you don't have a Razorpay account.</p>
            </div>

            <div class="payment_item" id="walletPaymentOption">
              <div class="radion_btn">
                  <input type="radio" id="wallet" name="payment_method" value="Wallet">
                  <label for="wallet">Pay with Wallet</label>
                  <div class="check"></div>
              </div>
              <p>Available Balance: ₹<span id="walletBalance">0.00</span></p>
          </div>

            <div class="creat_account">
              <input type="checkbox" id="terms" name="selector">
              <label for="terms">I've read and accept the </label>
              <a href="#">terms & conditions*</a>
            </div>
            <button type="button" class="primary-btn" onclick="placeOrder()">Place Order</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
<!--================End Checkout Area =================-->


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.carousel.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.theme.default.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<!-- Add this before closing body tag -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>


<script>
  
  // Global variables to manage coupon state
  let selectedCoupon = null;
let subtotal = "<%= subtotal %>";
let originalTotal = "<%= total %>";
const originalPrices = new Map();

// Fetch and display available coupons
async function fetchAvailableCoupons() {
    const availableCouponsContainer = document.getElementById('availableCouponsContainer');
    
    try {
        const response = await fetch(`/checkout/available-coupons?subtotal=${subtotal}`);
        const data = await response.json();

        availableCouponsContainer.innerHTML = '';

        if (data.success && data.coupons.length > 0) {
        const couponWrapper = document.createElement('div');
        couponWrapper.className = data.coupons.length > 3 ? 
            'coupon-carousel owl-carousel owl-theme' : 
            'coupon-wrapper'; 

            data.coupons.forEach(coupon => {
                const couponColumn = document.createElement('div');
                couponColumn.className = data.coupons.length > 3 ? 'item' : 'col-md-4 mb-3';

                couponColumn.innerHTML = `
                    <div class="card coupon-card" data-coupon-code="${coupon.code}">
                        <div class="card-body">
                            <div class="coupon-header">
                                <span class="coupon-code">${coupon.code}</span>
                                <span class="discount-badge">${coupon.discountPercentage}% OFF</span>
                            </div>
                            <p class="card-text">${coupon.title}</p>
                            <div class="coupon-details">
                                <p class="mb-1 text-muted">${coupon.description}</p>
                                <p class="mb-1 text-muted">Min. Purchase: ₹${coupon.minPurchaseLimit}</p>
                                <p class="mb-1 text-muted">Max. Discount: ₹${coupon.maxDiscountAmount || 'No limit'}</p>
                                <p class="mb-0 text-muted">Valid till: ${new Date(coupon.expiryDate).toLocaleDateString()}</p>
                            </div>
                            <button class="btn btn-outline-primary apply-coupon-btn mt-3" 
                                    onclick="selectCoupon('${coupon.code}')">
                                Apply Coupon
                            </button>
                        </div>
                    </div>
                `;

                couponWrapper.appendChild(couponColumn);
            });

            availableCouponsContainer.appendChild(couponWrapper);

            if (data.coupons.length > 3) {
                $(couponWrapper).owlCarousel({
                    loop: false,
                    margin: 15,
                    nav: true,
                    responsive: {
                        0: { items: 1 },
                        600: { items: 2 },
                        1000: { items: 3 }
                    }
                });
            }
        } else {
            availableCouponsContainer.innerHTML = `
                <div class="col-12">
                    <div class="alert alert-info">No coupons available</div>
                </div>
            `;
        }
    } catch (error) {
        console.error('Error fetching coupons:', error);
        availableCouponsContainer.innerHTML = `
            <div class="col-12">
                <div class="alert alert-danger">Failed to load coupons</div>
            </div>
        `;
    }
}
    
    // Select and validate coupon
    async function selectCoupon(couponCode) {
    try {
        if (selectedCoupon) {
            await removeCoupon();
        }

        const response = await axios.post('/checkout/validate-coupon', {
            couponCode,
            subtotal: parseFloat(subtotal)
        });

        if (response.data.success) {
            const { data } = response;
            selectedCoupon = {
                code: data.coupon.code,
                discountAmount: data.coupon.discountAmount
            };

            // Update UI with discount information
            updateCouponUI(data.coupon);
            
            // Update product prices with discounts
            updateProductPricing(data.coupon.productDiscounts);

            // Show success message
            await Swal.fire({
                icon: 'success',
                title: 'Coupon Applied!',
                text: `Discount of ₹${data.coupon.discountAmount.toFixed(2)} applied successfully`,
                timer: 2000
            });
        }
    } catch (error) {
        console.error('Error applying coupon:', error);
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.response?.data?.message || 'Failed to apply coupon',
            timer: 3000
        });
    }
}
  
  
// Function to update UI after coupon application
function updateCouponUI(couponData) {
    const couponDiscountRow = document.getElementById('couponDiscountRow');
    const couponDiscountDisplay = document.getElementById('couponDiscountDisplay');
    const totalDisplay = document.getElementById('totalDisplay');
    const removeCouponBtn = document.getElementById('removeCouponBtn');

    // Update discount display
    couponDiscountRow.style.display = 'block';
    couponDiscountDisplay.textContent = `-₹${couponData.discountAmount.toFixed(2)}`;

    // Update total amount
    const newTotal = parseFloat(subtotal) - couponData.discountAmount;
    totalDisplay.textContent = `₹${newTotal.toFixed(2)}`;

    // Show remove coupon button
    removeCouponBtn.style.display = 'block';

    // Update coupon cards
    const couponCards = document.querySelectorAll('.coupon-card');
    couponCards.forEach(card => {
        const isSelected = card.dataset.couponCode === couponData.code;
        const applyBtn = card.querySelector('.apply-coupon-btn');
        
        if (isSelected) {
            card.classList.add('border-success');
            applyBtn.textContent = 'Applied';
            applyBtn.disabled = true;
        } else {
            card.classList.remove('border-success');
            applyBtn.disabled = true;
        }
    });
}


    
function updateProductPricing(productDiscounts) {
    const productItems = document.querySelectorAll('.product-list-item');
    
    productItems.forEach(item => {
        const productId = item.getAttribute('data-product-id');
        const discountInfo = productDiscounts.find(d => d.productId === productId);
        
        if (discountInfo) {
            const priceElement = item.querySelector('.price');
            const savingsRow = item.querySelector('.savings-row');
            const savingsAmount = item.querySelector('.savings-amount');

            if (!originalPrices.has(productId)) {
                originalPrices.set(productId, parseFloat(priceElement.textContent.replace('₹', '')));
            }

            // Round the amounts
            const finalPrice = Math.round(discountInfo.finalPrice);
            const discountAmount = Math.round(discountInfo.discountAmount);

            priceElement.textContent = `₹${finalPrice}`;
            savingsAmount.textContent = `You save: ₹${discountAmount}`;
            savingsRow.style.display = 'flex';
        }
    });
}


function createSaveAmountSpan(item) {
    const saveSpan = document.createElement('span');
    saveSpan.className = 'save-amount text-success d-block mt-1';
    item.querySelector('.last').appendChild(saveSpan);
    return saveSpan;
}


    
    // Remove applied coupon
    async function removeCoupon() {
    if (!selectedCoupon) return;

    // Reset UI elements
    document.getElementById('couponDiscountRow').style.display = 'none';
    document.getElementById('couponDiscountDisplay').textContent = '-₹0.00';
    document.getElementById('totalDisplay').textContent = `₹${originalTotal}`;
    document.getElementById('removeCouponBtn').style.display = 'none';

    // Reset product prices
    const productItems = document.querySelectorAll('.product-list-item');
    productItems.forEach(item => {
        const productId = item.getAttribute('data-product-id');
        const originalPrice = originalPrices.get(productId);
        
        if (originalPrice) {
            const priceElement = item.querySelector('.price');
            const savingsRow = item.querySelector('.savings-row');
            
            priceElement.textContent = `₹${originalPrice.toFixed(2)}`;
            savingsRow.style.display = 'none';
        }
    });

    // Reset coupon cards
    const couponCards = document.querySelectorAll('.coupon-card');
    couponCards.forEach(card => {
        card.classList.remove('border-success');
        const applyBtn = card.querySelector('.apply-coupon-btn');
        applyBtn.disabled = false;
        applyBtn.textContent = 'Apply Coupon';
    });

    selectedCoupon = null;
    originalPrices.clear();
}
    
    // Initialize page
    document.addEventListener('DOMContentLoaded', () => {
    fetchAvailableCoupons();
    
    const removeCouponBtn = document.getElementById('removeCouponBtn');
    if (removeCouponBtn) {
        removeCouponBtn.style.display = 'none';
    }
});



    
  
  // Address display function
  async function displayAddressDetails(addressId) {
      const addressDetails = document.getElementById('addressDetails');
      if (!addressId) {
          addressDetails.style.display = 'none';
          return;
      }
  
      try {
          const response = await fetch(`/profile/get-address/${addressId}`);
          const data = await response.json();
  
          if (data.success) {
              const address = data.address;
              
              // Update all address fields
              document.getElementById('addressType').textContent = address.addressType;
              document.getElementById('addressName').textContent = address.name;
              document.getElementById('addressPhone').textContent = address.phone;
              document.getElementById('addressAltPhone').textContent = address.altPhone || 'Not provided';
              document.getElementById('addressLandmark').textContent = address.landmark;
              document.getElementById('addressCity').textContent = address.city;
              document.getElementById('addressState').textContent = address.state;
              document.getElementById('addressPincode').textContent = address.pincode;
  
              addressDetails.style.display = 'block';
          } else {
              console.error('Error fetching address details');
              addressDetails.style.display = 'none';
          }
      } catch (error) {
          console.error('Error:', error);
          addressDetails.style.display = 'none';
      }
  }


  async function checkWalletBalance() {
    try {
        const response = await fetch('/checkout/wallet-balance');
        const data = await response.json();
        
        if (data.success) {
            const walletBalance = parseFloat(data.balance);
            const total = parseFloat(document.getElementById('totalDisplay').textContent.replace('₹', ''));
            
            document.getElementById('walletBalance').textContent = walletBalance.toFixed(2);
            
            const walletPaymentOption = document.getElementById('walletPaymentOption');
            const walletRadio = document.getElementById('wallet');
            
            if (walletBalance < total) {
                walletRadio.disabled = true;
                walletPaymentOption.classList.add('disabled');
                walletPaymentOption.title = 'Insufficient wallet balance';
            } else {
                walletRadio.disabled = false;
                walletPaymentOption.classList.remove('disabled');
                walletPaymentOption.title = '';
            }
        }
    } catch (error) {
        console.error('Error checking wallet balance:', error);
    }
}
  
  // Place order function
  async function placeOrder() {
    if (!document.getElementById('terms').checked) {
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Please accept the terms and conditions',
        });
        return;
    }

    const addressId = document.getElementById('addressSelect').value;
    if (!addressId) {
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Please select a delivery address',
        });
        return;
    }

    
    const quantityValidation = await fetch('/checkout/validate-quantities', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        });

        const validationData = await quantityValidation.json();
        if (!validationData.success) {
            if (validationData.invalidItems && validationData.invalidItems.length > 0) {
                let errorMessage = 'Some items in your cart are no longer available in the requested quantity:\n\n';
                validationData.invalidItems.forEach(item => {
                    errorMessage += `${item.productName} (${item.color}, Size ${item.size}):\n`;
                    errorMessage += `Requested: ${item.requestedQuantity}, Available: ${item.availableQuantity}\n\n`;
                });
                
                Swal.fire({
                    icon: 'error',
                    title: 'Insufficient Stock',
                    html: errorMessage.replace(/\n/g, '<br>'),
                    confirmButtonText: 'Update Cart'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/userCart';
                    }
                });
                return;
            }
            throw new Error('Failed to validate product quantities');
        }
        

    // Get selected address details
    let selectedAddress;
    try {
        const addressResponse = await fetch(`/profile/get-address/${addressId}`);
        const addressData = await addressResponse.json();
        if (addressData.success) {
            selectedAddress = addressData.address;
        } else {
            throw new Error('Failed to fetch address details');
        }
    } catch (error) {
        console.error('Error fetching address:', error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Failed to fetch address details',
        });
        return;
    }

    const paymentMethod = document.querySelector('input[name="payment_method"]:checked')?.value;
    if (paymentMethod === 'Wallet') {
        // Show confirmation dialog for wallet payment
        const result = await Swal.fire({
            title: 'Confirm Wallet Payment',
            text: 'Are you sure you want to pay using your wallet balance?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: 'Yes, proceed',
            cancelButtonText: 'Cancel'
        });

        if (!result.isConfirmed) {
            return;
        }
    }
   
   
    if (!paymentMethod) {
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Please select a payment method',
        });
        return;
    }

    try {
        Swal.fire({
            title: 'Processing Order',
            text: 'Please wait...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        const orderData = {
            addressId,
            paymentMethod,
            couponCode: selectedCoupon?.code
        };

        const response = await fetch('/checkout/place-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(orderData),
        });

        const data = await response.json();
        if (data.success) {
    if (paymentMethod === 'COD' || paymentMethod === 'Wallet') {
        window.location.href = `/orders/${data.orderId}`;
    }  
    
    else if (paymentMethod === 'RazorPay') {
                const options = {
                    key: 'rzp_test_kGARsyFFRtqEHR',
                    amount: data.total * 100,
                    currency: 'INR',
                    name: 'Your Store Name',
                    description: 'Order Payment',
                    order_id: data.razorpayOrderId,
                    handler: async function (response) {
                        try {
                            const verifyResponse = await fetch('/verify-payment', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    orderId: data.orderId,
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature
                                })
                            });

                            const verifyData = await verifyResponse.json();
                            if (verifyData.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Payment Successful',
                                    text: 'Your order has been placed successfully!',
                                    showConfirmButton: false,
                                    timer: 2000
                                }).then(() => {
                                    window.location.href = `/orders/${data.orderId}`;
                                });
                            } else {
                                throw new Error('Payment verification failed');
                            }
                        } catch (error) {
                            await handlePaymentFailure(data.orderId);
                        }
                    },
                    modal: {
                        ondismiss: async function() {
                            await handlePaymentFailure(data.orderId);
                        }
                    },
                    prefill: {
                        name: '<%= user.name %>',
                        email: '<%= user.email %>',
                        contact: selectedAddress.phone
                    },
                    theme: {
                        color: '#384aeb'
                    }
                };

                const rzp = new Razorpay(options);
                rzp.open();
            }
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to place order'
        });
    }
}

// Update the handlePaymentFailure function in userCheckout.ejs
async function handlePaymentFailure(orderId) {
    try {
        const response = await fetch('/verify-payment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                orderId,
                paymentCancelled: true,
                status: 'pending' // Changed from 'cancelled' to 'pending'
            })
        });

        const data = await response.json();
        if (data.success) {
            Swal.fire({
                icon: 'warning',
                title: 'Payment Failed',
                text: 'Your order is pending. Please complete the payment.',
                showConfirmButton: true
            }).then(() => {
                window.location.href = `/orders/${orderId}`;
            });
        }
    } catch (error) {
        console.error('Error handling payment failure:', error);
        window.location.href = `/orders/${orderId}`;
    }
}


  
  // Initialize page
  document.addEventListener('DOMContentLoaded', () => {
      // Fetch available coupons
      fetchAvailableCoupons();
    checkWalletBalance();
    
    // Add event listener for total amount changes
    const observer = new MutationObserver(checkWalletBalance);
    observer.observe(document.getElementById('totalDisplay'), {
        characterData: true,
        childList: true,
        subtree: true
    });
  
      // Add event listener for coupon removal
      const removeCouponBtn = document.getElementById('removeCouponBtn');
      if (removeCouponBtn) {
          removeCouponBtn.addEventListener('click', removeCoupon);
      }
  });

  function updateCODAvailability(total) {
    const codInput = document.getElementById('cod');
    const codMessage = document.getElementById('codMessage');
    const codLimit = 1000;

    if (total > codLimit) {
        codInput.disabled = true;
        codMessage.textContent = 'Cash on Delivery is not available for orders above ₹1,000. Please choose another payment method.';
        
        // If COD was selected, unselect it
        if (codInput.checked) {
            codInput.checked = false;
        }
    } else {
        codInput.disabled = false;
        codMessage.textContent = 'Pay when you receive your order.';
    }
}

// Add observer for total changes
document.addEventListener('DOMContentLoaded', () => {
    const totalDisplay = document.getElementById('totalDisplay');
    
    // Initial check
    const initialTotal = parseFloat(totalDisplay.textContent.replace('₹', ''));
    updateCODAvailability(initialTotal);

    // Observer for future changes
    const observer = new MutationObserver(() => {
        const newTotal = parseFloat(totalDisplay.textContent.replace('₹', ''));
        updateCODAvailability(newTotal);
    });

    observer.observe(totalDisplay, {
        characterData: true,
        childList: true,
        subtree: true
    });
});
  </script>

<%- include("../../views/partials/user/footer/") %>