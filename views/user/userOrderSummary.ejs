
<style>
    .retry-payment-btn {
        background-color: #28a745;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 10px;
        transition: background-color 0.3s ease;
    }

    .retry-payment-btn:hover {
        background-color: #218838;
    }

    .payment-status {
        text-transform: uppercase;
        font-weight: bold;
    }

    .payment-status:contains('failed') {
        color: #dc3545;
    }

    .payment-status:contains('paid') {
        color: #28a745;
    }

    .payment-status:contains('pending') {
        color: #ffc107;
    }
</style>



<style>

/* General Styles */
body {
    background-color: #f7f8fc;
    font-family: Arial, sans-serif;
}

.order-summary-container {
    max-width: 600px;
    margin: 30px auto;
    background-color: #fff;
    border-radius: 15px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    padding: 25px;
}

.order-header {
    text-align: center;
    border-bottom: 2px solid #eee;
    padding-bottom: 15px;
    margin-bottom: 20px;
}

.order-id {
    color: #007bff;
    font-weight: bold;
    font-size: 20px;
}

.order-date {
    font-size: 14px;
    color: #6c757d;
}

.status-badge {
    display: inline-block;
    padding: 5px 15px;
    border-radius: 20px;
    font-size: 13px;
    font-weight: 600;
    text-transform: uppercase;
    margin-top: 10px;
}

.status-pending {
    background-color: #fff3cd;
    color: #856404;
}

.status-failed {
    background-color: #f8d7da;
    color: #721c24;
}

.status-processing {
    background-color: #cce5ff;
    color: #004085;
}

.status-shipped {
    background-color: #d4edda;
    color: #155724;
}

.status-delivered {
    background-color: #28a745;
    color: #fff;
}

.order-items {
    margin-bottom: 20px;
}

.item-card {
    display: flex;
    align-items: center;
    padding: 15px;
    border-bottom: 1px solid #eee;
}

.item-card:last-child {
    border-bottom: none;
}

.item-image-container img {
    transition: transform 0.3s ease;
    cursor: pointer;
}

.item-image-container img:hover {
    transform: scale(1.05);
}

.item-image {
    width: 60px;
    height: 60px;
    border-radius: 8px;
    object-fit: cover;
    margin-right: 15px;
}

.item-details {
    flex-grow: 1;
}

.item-name {
    font-weight: bold;
    font-size: 16px;
}

.item-quantity {
    font-size: 14px;
    color: #6c757d;
}

.item-price {
    font-weight: bold;
    color: #28a745;
}

.address-section,
.payment-info {
    background-color: #f8f9fa;
    border-radius: 12px;
    padding: 20px;
    margin-bottom: 20px;
}

.total-section {
    padding-top: 15px;
    border-top: 2px solid #eee;
}

.total-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
    font-size: 16px;
}

.total-row.final {
    font-size: 18px;
    font-weight: 700;
    color: #007bff;
}

.action-buttons {
    text-align: center;
    margin-top: 20px;
}

.primary-btn {
    display: inline-block;
    background-color: #007bff;
    color: #fff;
    padding: 10px 20px;
    border-radius: 25px;
    font-weight: 600;
    text-decoration: none;
    margin: 5px;
    transition: 0.3s;
}

.primary-btn:hover {
    background-color: #0056b3;
}
</style>


<style>
    /* Add these styles for the payment status badge */
    .status-failed {
        background-color: #dc3545;
        color: white;
        padding: 5px 10px;
        border-radius: 4px;
        font-size: 14px;
    }
    
    #retryPayment {
        background-color: #28a745;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }
    
    #retryPayment:hover {
        background-color: #218838;
    }
    </style>
    

<!-- Order Summary Section -->
<div class="order-summary-container">
    <!-- Order Header -->
    <div class="order-header">
        <h3>Order Summary</h3>
        <p>Order ID: <span class="order-id"><%= order.orderId %></span></p>
        <p class="order-date">Placed on <%= new Date(order.createdAt).toLocaleDateString() %></p>
        <span class="status-badge status-<%= order.status.toLowerCase() %>"><%= order.status %></span>
    </div>

    <!-- Order Items -->
<% orderItems.forEach(item => { %>
    <div class="order-item" style="display: flex; align-items: center; margin-bottom: 20px; border-bottom: 1px solid #eee; padding-bottom: 15px;">
        <div class="item-image-container" style="width: 150px; margin-right: 20px;">
            <a href="/product/<%= item.productId._id %>" style="text-decoration: none;">
                <% if (item.product.productImages && item.product.productImages.length > 0) { %>
                    <img src="/uploads/product-images/<%= item.product.productImages[0] %>" alt="Product Image" style="width: 100%; height: 150px; object-fit: cover; border-radius: 8px;">
                <% } else if (item.product.variantImages && item.product.variantImages.length > 0) { %>
                    <img src="/uploads/product-images/<%= item.product.variantImages[0].filename %>" alt="Variant Image" style="width: 100%; height: 150px; object-fit: cover; border-radius: 8px;">
                <% } else { %>
                    <p>No image available</p>
                <% } %>
            </a>
        </div>
        <div class="item-details" style="flex-grow: 1;">
            <h5 style="margin-bottom: 10px;"><%= item.product.productName %></h5>
            <div style="display: flex; justify-content: space-between;">
                <div>
                    <p><strong>Color:</strong> <%= item.color %></p>
                    <p><strong>Size:</strong> <%= item.size %></p>
                    <p><strong>Quantity:</strong> <%= item.quantity %></p>
                </div>
                <div style="text-align: right;">
                    <p><strong>Price:</strong> ₹<%= item.price %></p>
                    <p><strong>Total:</strong> ₹<%= (item.price * item.quantity).toFixed(2) %></p>
                </div>
            </div>
        </div>
    </div>
<% }) %>
    
    <!-- Shipping Address -->
    <div class="address-section">
        <h5>Shipping Address</h5>
        <p><strong><%= order.shippingAddress.name %></strong></p>
        <p><%= order.shippingAddress.landmark %></p>
        <p><%= order.shippingAddress.city %>, <%= order.shippingAddress.state %> - <%= order.shippingAddress.pincode %></p>
        <p>Phone: <%= order.shippingAddress.phone %></p>
    </div>

    <!-- Payment Information -->
    <div class="payment-info">
        <h5>Payment Information</h5>
        <p><strong>Method:</strong> 
            <% if (order.paymentMethod === 'COD') { %>
                Cash on Delivery
            <% } else if (order.paymentMethod === 'RazorPay') { %>
                Razorpay Online Payment
            <% } else if (order.paymentMethod === 'Wallet') { %>
                Wallet Payment
            <% } %>
        </p>
        <p><strong>Status:</strong> <span class="payment-status"><%= order.paymentStatus %></span></p>
        <% if (order.walletAmountUsed > 0) { %>
            <p><strong>Wallet Amount Used:</strong> ₹<%= order.walletAmountUsed.toFixed(2) %></p>
        <% } %>
        
        <% if (order.paymentStatus === 'failed' && order.paymentMethod === 'RazorPay') { %>
            <button onclick="retryPayment()" class="retry-payment-btn">
                Try Payment Again
            </button>
        <% } %>
    </div>

   <!-- Order Total -->
<div class="total-section">
    <div class="total-row">
        <span>Subtotal:</span>
        <span>₹<%= order.subtotal.toFixed(2) %></span>
    </div>
    <div class="total-row">
        <span>Shipping:</span>
        <span>₹50.00</span><!-- Fixed shipping cost -->
    </div>
    <% if (order.couponApplied && order.couponApplied.code) { %>
    <div class="total-row">
        <span>Coupon Applied:</span>
        <span><%= order.couponApplied.code %> (<%= order.couponApplied.discountPercentage %>% off)</span>
    </div>
    <% } %>
    <% if (order.discountAmount > 0) { %>
    <div class="total-row">
        <span>Coupon Discount:</span>
        <span>-₹<%= order.discountAmount.toFixed(2) %></span>
    </div>
    <% } %>
    <div class="total-row final">
        <span>Total:</span>
        <span>₹<%= (order.subtotal + 50 - (order.discountAmount || 0)).toFixed(2) %></span>
    </div>
</div>
    <!-- Action Buttons -->
    <div class="action-buttons">
        <a href="/profile/orders" class="primary-btn">View All Orders</a>
        <a href="/shop-page" class="primary-btn">Continue Shopping</a>
    </div>
</div>


<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    async function retryPayment() {
        try {
            const orderId = '<%= order._id %>';
            const amount = "<%= order.total %>";
            
            // Initialize payment
            const response = await fetch('/checkout/initiate-payment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    orderId: orderId,
                    amount: amount
                })
            });
    
            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.message);
            }
    
            // Configure Razorpay options
            const options = {
                key: '<%= process.env.RAZORPAY_KEY_ID %>', // This should be passed from your backend
                amount: amount * 100, // Amount in paise
                currency: 'INR',
                name: 'Your Store Name',
                description: 'Order Payment',
                order_id: data.razorpayOrderId,
                handler: async function (response) {
                    try {
                        // Verify payment
                        const verifyResponse = await fetch('/verify-payment', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                orderId: orderId,
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_signature: response.razorpay_signature
                            })
                        });
    
                        const verifyData = await verifyResponse.json();
    
                        if (verifyData.success) {
                            Swal.fire({
                                title: 'Success!',
                                text: 'Payment completed successfully',
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                window.location.reload();
                            });
                        } else {
                            throw new Error(verifyData.message);
                        }
                    } catch (error) {
                        Swal.fire({
                            title: 'Error!',
                            text: error.message || 'Payment verification failed',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                },
                prefill: {
                    name: '<%= order.shippingAddress.name %>',
                    contact: '<%= order.shippingAddress.phone %>'
                },
                theme: {
                    color: '#3399cc'
                },
                modal: {
                    ondismiss: function() {
                        Swal.fire({
                            title: 'Payment Cancelled',
                            text: 'You cancelled the payment process',
                            icon: 'info',
                            confirmButtonText: 'OK'
                        });
                    }
                }
            };
    
            // Initialize Razorpay
            const razorpayInstance = new Razorpay(options);
            razorpayInstance.open();
    
        } catch (error) {
            Swal.fire({
                title: 'Error!',
                text: error.message || 'Failed to initiate payment',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    }
    </script>
