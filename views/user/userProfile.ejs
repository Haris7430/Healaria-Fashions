<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Account - <%= user.username %></title>

    <!-- Stylesheets -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">

    <link rel="stylesheet" href="css/main.css">

    <style>
        /* General Styles */
        body {
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
        }
    
        .banner {
    background-image: linear-gradient(rgba(11, 0, 109, 0.3), rgba(255, 251, 3, 0.3)), 
                      url('https://personal.asuswebstorage.com/wp-content/uploads/2021/12/hc_bnr_bg.jpg');
    background-size: cover;
    background-position: center;
    height: 200px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    margin-bottom: 2rem;
}

.banner h1 {
    font-size: 3rem;
    text-align: center;
    -webkit-text-stroke: 2px transparent; /* Default transparent for the outline */
    background: linear-gradient(to right, #ff0000, #718b09);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    text-shadow: 
        2px 2px 5px rgba(172, 143, 246, 0.5), 
        -2px -2px 5px rgba(43, 141, 118, 0.944);
}

    
        .breadcrumb {
            padding: 1rem 2rem;
            background: white;
            border-bottom: 1px solid #eee;
        }
    
        .breadcrumb a {
            color: #0066cc;
            text-decoration: none;
        }
    
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
        }
    
        /* Profile Grid Layout */
        .profile-grid {
            display: grid;
            grid-template-columns: 250px 1fr;
            gap: 2rem;
            margin: 2rem 0;
        }
    
        /* Sidebar Styles */
        .sidebar {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
    
        .sidebar-menu {
            list-style: none;
            padding: 0;
        }
    
        .sidebar-menu li {
            margin-bottom: 0.5rem;
        }
    
        .sidebar-menu a {
            display: block;
            padding: 0.75rem 1rem;
            color: #333;
            text-decoration: none;
            border-radius: 4px;
            transition: background-color 0.2s;
        }
    
        .sidebar-menu a:hover, .sidebar-menu a.active {
            background-color: #0066cc;
            color: white;
        }
    
        /* Main Content Area */
        .main-content {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            min-height: 400px;
        }
    
        /* Address and Order Item Styles */
        .address-item, .order-item {
            border: 1px solid #eee;
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 4px;
        }
    
        .add-address-btn {
            display: inline-block;
            padding: 10px 20px;
            color: white;
            background-color: #0066cc;
            border-radius: 5px;
            text-decoration: none;
            margin-top: 15px;
        }




        .error-message {
    color: red;
    font-size: 0.8rem;
    margin-top: 5px;
}

.is-invalid {
    border-color: red !important;
    box-shadow: 0 0 0 0.2rem rgba(255, 0, 0, 0.25) !important;
}
    
        /* Address Form Container */
        .address-form {
            max-width: 600px;
            margin: 2rem auto;
            padding: 2rem;
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
    
        .section-title {
            text-align: center;
            margin-bottom: 1.5rem;
            font-size: 1.8rem;
            color: #333;
            font-weight: 600;
        }
    
        /* Form Group Styling */
        .form-group {
            margin-bottom: 1.5rem;
        }
    
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #555;
            font-size: 1rem;
        }
    
        .form-input {
            width: 100%;
            padding: 12px 15px;
            font-size: 1rem;
            border: 1px solid #ccc;
            border-radius: 5px;
            transition: border-color 0.2s;
        }
    
        .form-input:focus {
            border-color: #0066cc;
            outline: none;
        }
    
        /* Resizable Textarea */
        .resizable-textarea {
            resize: vertical;
            min-height: 80px;
            max-height: 150px;
        }
    
        /* Submit Button */
        .submit-btn {
            display: block;
            width: 100%;
            padding: 12px 0;
            background-color: #0066cc;
            color: #fff;
            font-size: 1.1rem;
            font-weight: 600;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
    
        .submit-btn:hover {
            background-color: #004a99;
        }

        /* Overall container for the addresses */
.addresses-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
    padding: 20px;
}

/* Individual address card container */
.address-card {
    background-color: #f9f9f9;
    border: 1px solid #ddd;
    border-radius: 10px;
    padding: 15px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

/* Hover effect for each address card */
.address-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
}

/* Header style */
.address-header h4 {
    margin-bottom: 10px;
    font-size: 1.2em;
    color: #333;
}

/* Details section */
.address-details p {
    font-size: 1em;
    margin: 5px 0;
    color: #555;
}

/* Action buttons */
.address-actions {
    margin-top: 15px;
    display: flex;
    justify-content: space-between;
}

.edit-btn, .delete-btn {
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    padding: 8px 15px;
    cursor: pointer;
    font-size: 0.9em;
    transition: background-color 0.3s ease;
}

.edit-btn:hover, .delete-btn:hover {
    background-color: #0056b3;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .addresses-container {
        grid-template-columns: 1fr;
    }
}



/* Modal Styles */
.modal {
    transition: all 0.3s ease-in-out;
}

.modal-content {
    transform: scale(0.7);
    opacity: 0;
    transition: all 0.3s ease-in-out;
}

.modal.show .modal-content {
    transform: scale(1);
    opacity: 1;
}

.close-modal:hover {
    color: #f00;
}

/* Form Styles */
.modal .form-group {
    margin-bottom: 1rem;
}

.modal .form-input {
    transition: border-color 0.3s ease;
}

.modal .form-input:focus {
    border-color: #007bff;
    box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
}
    </style>





<style>
    

    /* order Table Styles */
.custom-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    margin-bottom: 1rem;
    background-color: white;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    overflow: hidden;
}

.custom-table thead {
    background-color: #f8f9fa;
    border-bottom: 2px solid #dee2e6;
}

.custom-table th {
    padding: 12px 15px;
    text-align: left;
    font-weight: 600;
    color: #333;
    text-transform: uppercase;
    font-size: 0.9rem;
    border-bottom: 2px solid #dee2e6;
}

.custom-table td {
    padding: 12px 15px;
    vertical-align: middle;
    border-bottom: 1px solid #e9ecef;
    color: #555;
}

.custom-table tbody tr:hover {
    background-color: #f1f3f5;
    transition: background-color 0.3s ease;
}

/* Status Badge Styles */
.status-badge {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.8rem;
    font-weight: 500;
    text-transform: capitalize;
}

.badge-warning {
    background-color: #ffc107;
    color: #212529;
}

.badge-info {
    background-color: #17a2b8;
    color: white;
}

.badge-primary {
    background-color: #007bff;
    color: white;
}

.badge-success {
    background-color: #28a745;
    color: white;
}

.badge-danger {
    background-color: #dc3545;
    color: white;
}

/* Action Button Styles */
.btn-action {
    display: inline-block;
    padding: 6px 12px;
    background-color: #007bff;
    color: white;
    text-decoration: none;
    border-radius: 4px;
    transition: background-color 0.3s ease;
}

.btn-action:hover {
    background-color: #0056b3;
}

/* Pagination Styles */
.pagination-container {
    display: flex;
    justify-content: center;
    margin-top: 1.5rem;
}

.pagination {
    display: flex;
    list-style: none;
    padding: 0;
}

.pagination .page-item {
    margin: 0 2px;
}

.pagination .page-link {
    color: #007bff;
    background-color: white;
    border: 1px solid #dee2e6;
    padding: 8px 12px;
    text-decoration: none;
    transition: all 0.3s ease;
}

.pagination .page-item.active .page-link {
    background-color: #007bff;
    color: white;
    border-color: #007bff;
}

.pagination .page-link:hover {
    background-color: #f8f9fa;
}
</style>





<style>

    /* Profile Styles */
.profile-section,
.edit-profile-section,
.change-password-section {
    max-width: 800px;
    margin: 2rem auto;
    padding: 2rem;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.profile-info {
    margin: 2rem 0;
}

.info-group {
    display: flex;
    margin-bottom: 1rem;
    padding: 0.5rem 0;
    border-bottom: 1px solid #eee;
}

.info-group label {
    width: 150px;
    font-weight: bold;
    color: #666;
}

.profile-actions {
    display: flex;
    gap: 1rem;
    margin-top: 2rem;
}

.profile-form,
.password-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.form-group label {
    font-weight: 500;
    color: #666;
}

.form-group input {
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
}

.btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.3s;
}

.btn-primary {
    background-color: #007bff;
    color: white;
}

.btn-secondary {
    background-color: #6c757d;
    color: white;
}

.btn:hover {
    opacity: 0.9;
}

</style>





<style>
    .order-id-column {
        width: 250px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>
    
</head>



<body>
    <div class="banner">
        <h1>My Account</h1>
    </div>

    <div class="breadcrumb">
        <a href="/">Home</a> > My Account
    </div>

    <div class="container">
        <div class="profile-grid">
            <!-- Sidebar -->
            <div class="sidebar">
                <ul class="sidebar-menu">
                    <li><a href="/userProfile" class="<%= activeSection === 'profile' ? 'active' : '' %>">Dashboard</a></li>
                    <li><a href="/profile/addresses" class="<%= activeSection === 'addresses' ? 'active' : '' %>">Addresses</a></li>
                    <li><a href="/profile/add-address" class="<%= activeSection === 'add-address' ? 'active' : '' %>">Add New Address</a></li>
                    <li><a href="/profile/orders" class="<%= activeSection === 'order-details' ? 'active' : '' %>">Order Details</a></li>
                    <li><a href="/profile/wallet" class="<%= activeSection === 'wallet' ? 'active' : '' %>">My Wallet</a></li>
                    <li><a href="/wishlist" class="<%= activeSection === 'wishlist' ? 'active' : '' %>">My Wishlist</a></li>
                    <li><a href="/logout">Sign Out</a></li>
                </ul>
            </div>

            <!-- Main Content Area -->
            <div class="main-content">

                <!-- Profile Section -->
<% if (activeSection === 'profile') { %>
    <div class="profile-section">
        <h2>Profile Dashboard</h2>
        <div class="profile-info">
            <div class="info-group">
                <label>Name:</label>
                <span><%= user.name %></span>
            </div>
            <div class="info-group">
                <label>Email:</label>
                <span><%= user.email %></span>
            </div>
            <div class="info-group">
                <label>Phone:</label>
                <span><%= user.phone || 'Not provided' %></span>
            </div>
            <div class="info-group">
                <label>Member Since:</label>
                <span><%= new Date(user.createdOn).toLocaleDateString() %></span>
            </div>
        </div>
        <div class="profile-actions">
            <button onclick="window.location.href='/edit-profile'" class="btn btn-primary">
                Edit Profile
            </button>
            <button onclick="window.location.href='/change-password'" class="btn btn-secondary">
                Change Password
            </button>
        </div>
    </div>
    <% } %>
    

    <!-- Edit Profile Section -->
    <% if (activeSection === 'edit-profile') { %>
        <div class="edit-profile-section">
            <h2>Edit Profile</h2>
            <form id="editProfileForm" class="profile-form">
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" id="name" name="name" value="<%= user.name %>" required>
                </div>
                <div class="form-group">
                    <label for="phone">Phone</label>
                    <input type="tel" id="phone" name="phone" value="<%= user.phone || '' %>">
                </div>
                <button type="submit" class="btn btn-primary">Save Changes</button>
            </form>
        </div>
        <% } %>

    
    <!-- Change Password Section -->
    <% if (activeSection === 'forgot-password') { %>
        <div class="change-password-section">
            <h2>Change Password</h2>
            <form id="changePasswordForm" class="password-form">
                <div class="form-group position-relative">
                    <label for="currentPassword">Current Password</label>
                    <div class="input-group">
                        <input type="password" id="currentPassword" name="currentPassword" class="form-control" required>
                        <span class="input-group-text toggle-password" data-target="currentPassword">
                            <i class="fas fa-eye-slash"></i>
                        </span>
                    </div>
                </div>
                <div class="form-group position-relative">
                    <label for="newPassword">New Password</label>
                    <div class="input-group">
                        <input type="password" id="newPassword" name="newPassword" class="form-control" required>
                        <span class="input-group-text toggle-password" data-target="newPassword">
                            <i class="fas fa-eye-slash"></i>
                        </span>
                    </div>
                </div>
                <div class="form-group position-relative">
                    <label for="confirmPassword">Confirm New Password</label>
                    <div class="input-group">
                        <input type="password" id="confirmPassword" name="confirmPassword" class="form-control" required>
                        <span class="input-group-text toggle-password" data-target="confirmPassword">
                            <i class="fas fa-eye-slash"></i>
                        </span>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary">Change Password</button>
            </form>
        </div>
    <% } %>



               <!-- Orders Section -->
               <% if (activeSection === 'orders') { %>
                <div class="orders-section">
                    
                    
                    <% if (orders && orders.length > 0) { %>
                        <div class="table-responsive">
                            <table class="custom-table">
                                <thead>
                                    <tr>
                                        <th class="order-id-column">Order Number</th>
                                        <th>Date</th>
                                        <th>Total Amount</th>
                                        <th>Payment Method</th>
                                        <th>Order Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% orders.forEach(order => { %>
                                        <tr>
                                            <td>
                                                <span 
                                                    title="<%= order.orderId %>" 
                                                    style="cursor: help;"
                                                >
                                                    <%= order.orderId %>
                                                </span>
                                            </td>
                                            <td><%= new Date(order.createdAt).toLocaleDateString() %></td>
                                            <td>₹<%= order.total.toFixed(2) %></td>
                                            <td><%= order.paymentMethod.toUpperCase() %></td>
                                            <td>
                                                <span class="status-badge 
                                                    <%= order.status === 'pending' ? 'badge-warning' : 
                                                        order.status === 'processing' ? 'badge-info' :
                                                        order.status === 'shipped' ? 'badge-primary' :
                                                        order.status === 'delivered' ? 'badge-success' : 'badge-danger' %>">
                                                    <%= order.status.charAt(0).toUpperCase() + order.status.slice(1) %>
                                                </span>
                                            </td>
                                            <td>
                                                <a href="/order/<%= order._id %>" class="btn-action view-details">
                                                    View Details
                                                </a>
                                            </td>
                                        </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>

                        <div class="pagination-container">
                            <nav aria-label="Order navigation">
                                <ul class="pagination">
                                    <% if (currentPage > 1) { %>
                                        <li class="page-item">
                                            <a class="page-link" href="/profile/orders?page=<%= currentPage - 1 %>" aria-label="Previous">
                                                <span aria-hidden="true">&laquo;</span>
                                            </a>
                                        </li>
                                    <% } %>
                    
                                    <% 
                                    // Calculate start and end page numbers
                                    let startPage = Math.max(1, currentPage - 2);
                                    let endPage = Math.min(totalPages, currentPage + 2);
                                    
                                    // Adjust start and end pages to always show 5 page numbers if possible
                                    if (endPage - startPage + 1 < 5) {
                                        if (currentPage <= 3) {
                                            endPage = Math.min(5, totalPages);
                                        } else {
                                            startPage = Math.max(1, totalPages - 4);
                                        }
                                    }
                                    %>
                    
                                    <% for (let i = startPage; i <= endPage; i++) { %>
                                        <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                                            <a class="page-link" href="/profile/orders?page=<%= i %>"><%= i %></a>
                                        </li>
                                    <% } %>
                    
                                    <% if (currentPage < totalPages) { %>
                                        <li class="page-item">
                                            <a class="page-link" href="/profile/orders?page=<%= currentPage + 1 %>" aria-label="Next">
                                                <span aria-hidden="true">&raquo;</span>
                                            </a>
                                        </li>
                                    <% } %>
                                </ul>
                            </nav>
                        </div>
            
                        
                        
                    <% } else { %>
                        <div class="no-orders-container">
                            <h4>No orders found</h4>
                            <p>You haven't placed any orders yet.</p>
                            <a href="/shop" class="btn-primary">Start Shopping</a>
                        </div>
                    <% } %>
                </div>
            <% } %>





                <!-- Addresses Section -->
                <% if (activeSection === 'addresses') { %>
                    <h2>Your Addresses</h2>
                    <% if (address && Array.isArray(address.address) && address.address.length > 0) { %>
                        <div class="addresses-container">
                            <% address.address.forEach(function(addr) { %>
                                <div class="address-card" data-id="<%= addr._id %>">
                                    <div class="address-header">
                                        <h4><%= addr.addressType %> Address</h4>
                                    </div>
                                    <div class="address-details">
                                        <p><strong>Name:</strong> <%= addr.name %></p>
                                        <p><strong>City:</strong> <%= addr.city %></p>
                                        <p><strong>State:</strong> <%= addr.state %></p>
                                        <p><strong>Pincode:</strong> <%= addr.pincode %></p>
                                        <p><strong>Phone:</strong> <%= addr.phone %></p>
                                        <p><strong>Alt Phone:</strong> <%= addr.altPhone %></p>
                                    </div>
                                    <div class="address-actions">
                                        <button onclick="handleEditAddress('<%= addr._id %>')" class="btn btn-primary btn-sm edit-btn">
                                            Edit
                                        </button>
                                        <button class="delete-address-btn delete-btn" data-id="<%= addr._id %>">Delete</button>
                                    </div>
                                </div>
                            <% }) %>
                        </div>
                    <% } else { %>
                        <p>No addresses found.</p>
                    <% } %>
                    <a href="/profile/add-address" class="add-address-btn">Add New Address</a>

                <% } %>
                

                <!-- Add Address Section -->
                <% if (activeSection === 'add-address') { %>
                    <h2 class="section-title">Add New Address</h2>
                    <form action="/profile/add-address" method="POST" class="address-form">
                        <div class="form-group">
                            <label for="name">Full Name *</label>
                            <input type="text" name="name" id="name" class="form-input" >
                        </div>
                        
                        <div class="form-group">
                            <label for="phone">Phone Number *</label>
                            <input type="tel" name="phone" id="phone" class="form-input" pattern="[0-9]{10}" >
                        </div>
                        
                        <div class="form-group">
                            <label for="altPhone">Alternate Phone</label>
                            <input type="tel" name="altPhone" id="altPhone" class="form-input" pattern="[0-9]{10}">
                        </div>
                        
                        <div class="form-group">
                            <label for="addressType">Address Type *</label>
                            <select name="addressType" id="addressType" class="form-input" >
                                <option value="">Select Type</option>
                                <option value="Home">Home</option>
                                <option value="Work">Work</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="landmark">Landmark *</label>
                            <input type="text" name="landmark" id="landmark" class="form-input" >
                        </div>
                        
                        <div class="form-group">
                            <label for="city">City *</label>
                            <input type="text" name="city" id="city" class="form-input" >
                        </div>
                        
                        <div class="form-group">
                            <label for="state">State *</label>
                            <input type="text" name="state" id="state" class="form-input" >
                        </div>
                        
                        <div class="form-group">
                            <label for="pincode">Pincode *</label>
                            <input type="text" name="pincode" id="pincode" class="form-input" pattern="[0-9]{6}" >
                        </div>
                        
                        <button type="submit" class="submit-btn">Add Address</button>
                    </form>
                <% } %>


                <!-- Account Details Section -->
                <% if (activeSection === 'account-details') { %>
                    <h2>Account Details</h2>
                    <p>Change your personal information here.</p>
                <% } %>




                <% if (activeSection === 'wallet') { %>
                    <div class="wallet-section">
                        <div class="wallet-balance">
                            <h2>Wallet Balance</h2>
                            <div class="balance-amount">
                                ₹<%= wallet.balance.toFixed(2) %>
                            </div>
                        </div>
                
                        <div class="transaction-history">
                            <h3>Transaction History</h3>
                            <div class="table-responsive">
                                <table class="custom-table">
                                    <thead>
                                        <tr>
                                            <th>Date</th>
                                            <th>Description</th>
                                            <th>Type</th>
                                            <th>Amount</th>
                                            <th>Balance</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% transactions.forEach(transaction => { %>
                                            <tr>
                                                <td><%= new Date(transaction.createdAt).toLocaleDateString('en-IN', { 
                                                    year: 'numeric', 
                                                    month: 'short', 
                                                    day: 'numeric',
                                                    hour: '2-digit',
                                                    minute: '2-digit'
                                                }) %></td>
                                                <td><%= transaction.description %></td>
                                                <td>
                                                    <span class="status-badge badge-<%= transaction.type === 'credit' ? 'success' : 'danger' %>">
                                                        <%= transaction.type %>
                                                    </span>
                                                </td>
                                                <td class="<%= transaction.type === 'credit' ? 'text-success' : 'text-danger' %>">
                                                    <%= transaction.type === 'credit' ? '+' : '-' %>₹<%= transaction.amount.toFixed(2) %>
                                                </td>
                                                <td>₹<%= transaction.balance.toFixed(2) %></td>
                                            </tr>
                                        <% }); %>
                                    </tbody>
                                </table>
                            </div>
                
                            <!-- Pagination -->
                            <% if (totalPages > 1) { %>
                                <div class="pagination-container">
                                    <ul class="pagination">
                                        <% for(let i = 1; i <= totalPages; i++) { %>
                                            <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                                                <a class="page-link" href="/profile/wallet?page=<%= i %>"><%= i %></a>
                                            </li>
                                        <% } %>
                                    </ul>
                                </div>
                            <% } %>
                        </div>
                    </div>
                
                    <style>
                        .wallet-section {
                            padding: 2rem;
                        }
                
                        .wallet-balance {
                            background: linear-gradient(135deg, #0066cc, #0044aa);
                            color: white;
                            padding: 2rem;
                            border-radius: 10px;
                            margin-bottom: 2rem;
                            text-align: center;
                        }
                
                        .balance-amount {
                            font-size: 2.5rem;
                            font-weight: bold;
                            margin-top: 1rem;
                        }
                
                        .transaction-history {
                            background: white;
                            padding: 1rem;
                            border-radius: 10px;
                        }
                
                        .text-success {
                            color: #28a745;
                        }
                
                        .text-danger {
                            color: #dc3545;
                        }
                    </style>
                <% } %>

                

                <% if (activeSection === 'wishlist') { %>
                    <div class="wishlist-section">
                        <h2>My Wishlist</h2>
                        <% if (wishlist && wishlist.items && wishlist.items.length > 0) { %>
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Product</th>
                                            <th>Price</th>
                                            <th>Variants</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% wishlist.items.forEach(item => { %>
                                            <tr class="wishlist-item">
                                                <td class="product-info">
                                                    <div class="d-flex align-items-center">
                                                        <div class="product-image-carousel" style="width: 100px;">
                                                            <div id="carousel-<%= item.productId._id %>" class="carousel slide" data-bs-ride="carousel">
                                                                <div class="carousel-inner">
                                                                    <% item.productId.variants.forEach((variant, variantIndex) => { %>
                                                                        <% variant.images.forEach((image, imageIndex) => { %>
                                                                            <div class="carousel-item <%= variantIndex === 0 && imageIndex === 0 ? 'active' : '' %>">
                                                                                <img src="/uploads/product-images/<%= image.filename %>" 
                                                                                     class="d-block w-100" 
                                                                                     alt="<%= item.productId.productName %>"
                                                                                     data-color="<%= variant.color %>">
                                                                            </div>
                                                                        <% }) %>
                                                                    <% }) %>
                                                                </div>
                                                                <button class="carousel-control-prev" type="button" data-bs-target="#carousel-<%= item.productId._id %>" data-bs-slide="prev">
                                                                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                                                </button>
                                                                <button class="carousel-control-next" type="button" data-bs-target="#carousel-<%= item.productId._id %>" data-bs-slide="next">
                                                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                                                </button>
                                                            </div>
                                                        </div>
                                                        <div class="ms-3">
                                                            <h5><%= item.productId.productName %></h5>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td class="price-info">
                                                    <% if (item.productId.offerPercentage > 0) { %>
                                                        <div>
                                                            <span class="text-danger">₹<%= Math.round(item.productId.regularPrice * (1 - item.productId.offerPercentage/100)) %></span>
                                                            <br>
                                                            <small class="text-muted text-decoration-line-through">₹<%= item.productId.regularPrice %></small>
                                                            <span class="badge bg-danger"><%= item.productId.offerPercentage %>% OFF</span>
                                                        </div>
                                                    <% } else { %>
                                                        <span>₹<%= item.productId.regularPrice %></span>
                                                    <% } %>
                                                </td>
                                                <td class="variant-info">
                                                    <select class="form-select size-select" data-product-id="<%= item.productId._id %>">
                                                        <option value="">Select Variant</option>
                                                        <% item.productId.variants.forEach(variant => { %>
                                                            <optgroup label="<%= variant.color %>">
                                                                <% variant.sizes.forEach(size => { %>
                                                                    <option value="<%= size.size %>" 
                                                                            data-color="<%= variant.color %>"
                                                                            data-variant-id="<%= variant._id %>"
                                                                            <%= (item.selectedVariant && 
                                                                                item.selectedVariant.size === size.size && 
                                                                                item.selectedVariant.color === variant.color) ? 'selected' : '' %>
                                                                            <%= size.quantity === 0 ? 'disabled' : '' %>>
                                                                        Size <%= size.size %> 
                                                                        (<%= size.quantity > 0 ? `${size.quantity} in stock` : 'Out of Stock' %>)
                                                                    </option>
                                                                <% }) %>
                                                            </optgroup>
                                                        <% }) %>
                                                    </select>
                                                </td>
                                                <td class="actions">
                                                    <div class="btn-group">
                                                        <button class="btn btn-primary btn-sm add-to-cart-from-wishlist" 
                                                                data-id="<%= item.productId._id %>">
                                                            <i class="fas fa-shopping-cart"></i>
                                                        </button>
                                                        <button class="btn btn-danger btn-sm remove-from-wishlist" 
                                                                data-id="<%= item.productId._id %>">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        <% }) %>
                                    </tbody>
                                </table>
                            </div>
            <div class="wishlist-actions mt-4">
                <button class="btn btn-success add-all-to-cart">Add All to Cart</button>
                <button class="btn btn-danger clear-wishlist">Clear Wishlist</button>
                <a href="/shop-page" class="btn btn-primary">Continue Shopping</a>
            </div>
        <% } else { %>
            <div class="empty-wishlist text-center">
                <i class="fas fa-heart-broken fa-3x mb-3"></i>
                <h4>Your wishlist is empty</h4>
                <p>Add items that you like to your wishlist</p>
                <a href="/shop-page" class="btn btn-primary mt-3">Continue Shopping</a>
            </div>
        <% } %>
    </div>

    <style>
        .wishlist-section {
            padding: 20px;
        }
        .product-image-carousel {
            width: 100px;
            height: 100px;
            overflow: hidden;
        }
        .product-image-carousel img {
            object-fit: cover;
            height: 100px;
        }
        .variant-info select {
            max-width: 200px;
        }
        .actions .btn-group {
            gap: 5px;
        }
        .table > :not(caption) > * > * {
            vertical-align: middle;
        }
    </style>
<% } %>

                
            </div>
        </div>
        <!-- Edit Address Modal -->

    </div>





<!-- Edit Address Modal -->
<div class="modal fade" id="editAddressModal" tabindex="-1" aria-labelledby="editAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="edit-form">
                    <div class="mb-3">
                        <label for="edit-name" class="form-label">Name*</label>
                        <input type="text" class="form-control" id="edit-name" >
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Address Type*</label>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="edit-addressType" value="Home" >
                            <label class="form-check-label">Home</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="edit-addressType" value="Work" >
                            <label class="form-check-label">Work</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="edit-addressType" value="Other" >
                            <label class="form-check-label">Other</label>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="edit-phone" class="form-label">Phone*</label>
                        <input type="tel" class="form-control" id="edit-phone" >
                    </div>

                    <div class="mb-3">
                        <label for="edit-alt-phone" class="form-label">Alternative Phone</label>
                        <input type="tel" class="form-control" id="edit-alt-phone">
                    </div>

                    <div class="mb-3">
                        <label for="edit-landmark" class="form-label">Landmark*</label>
                        <input type="text" class="form-control" id="edit-landmark" >
                    </div>

                    <div class="mb-3">
                        <label for="edit-city" class="form-label">City*</label>
                        <input type="text" class="form-control" id="edit-city" >
                    </div>

                    <div class="mb-3">
                        <label for="edit-state" class="form-label">State*</label>
                        <input type="text" class="form-control" id="edit-state" >
                    </div>

                    <div class="mb-3">
                        <label for="edit-pincode" class="form-label">Pincode*</label>
                        <input type="text" class="form-control" id="edit-pincode" >
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>


    <!-- Footer -->
    



</body>



<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"></script>


<script>

document.getElementById('editProfileForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const nameInput = document.getElementById('name');
    const phoneInput = document.getElementById('phone');
    
    // Client-side validation
    const nameRegex = /^[A-Za-z\s]{2,50}$/;
    const phoneRegex = /^[6-9]\d{9}$/;

    let isValid = true;
    
    // Name validation
    if (!nameRegex.test(nameInput.value.trim())) {
        isValid = false;
        Swal.fire({
            icon: 'error',
            title: 'Invalid Name',
            text: 'Name must be 2-50 characters and contain only letters'
        });
        nameInput.classList.add('is-invalid');
        return;
    } else {
        nameInput.classList.remove('is-invalid');
    }

    // Phone validation (optional)
    if (phoneInput.value.trim() && !phoneRegex.test(phoneInput.value.trim())) {
        isValid = false;
        Swal.fire({
            icon: 'error',
            title: 'Invalid Phone Number',
            text: 'Phone number must be 10 digits and start with 6-9'
        });
        phoneInput.classList.add('is-invalid');
        return;
    } else {
        phoneInput.classList.remove('is-invalid');
    }

    // Proceed with form submission
    const formData = new FormData(e.target);
    
    try {
        const response = await fetch('/update-profile', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(Object.fromEntries(formData)),
        });
        const data = await response.json();
        
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Profile updated successfully',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                window.location.href = '/dashboard';
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: data.message || 'Failed to update profile'
            });
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'Something went wrong while updating profile'
        });
    }
});



document.getElementById('changePasswordForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const currentPasswordInput = document.getElementById('currentPassword');
    const newPasswordInput = document.getElementById('newPassword');
    const confirmPasswordInput = document.getElementById('confirmPassword');

    // Password validation regex
    const passwordRegex = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$/;

    // Validate current password
    if (!currentPasswordInput.value.trim()) {
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'Current password is required'
        });
        currentPasswordInput.classList.add('is-invalid');
        return;
    }

    // Validate new password
    if (!passwordRegex.test(newPasswordInput.value)) {
        Swal.fire({
            icon: 'error',
            title: 'Invalid Password',
            text: 'Password must be at least 8 characters, include letters, numbers, and special characters'
        });
        newPasswordInput.classList.add('is-invalid');
        return;
    }

    // Confirm password match
    if (newPasswordInput.value !== confirmPasswordInput.value) {
        Swal.fire({
            icon: 'error',
            title: 'Password Mismatch',
            text: 'New passwords do not match'
        });
        confirmPasswordInput.classList.add('is-invalid');
        return;
    }

    // Prevent reusing current password
    if (currentPasswordInput.value === newPasswordInput.value) {
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'New password cannot be the same as current password'
        });
        newPasswordInput.classList.add('is-invalid');
        return;
    }

    // Proceed with form submission
    const formData = new FormData(e.target);
    
    try {
        const response = await fetch('/change-password', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(Object.fromEntries(formData)),
        });
        const data = await response.json();
        
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Password changed successfully',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                window.location.href = '/dashboard';
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: data.message || 'Failed to change password'
            });
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'Something went wrong while changing password'
        });
    }
});

    
    
    // addAddressForm
    document.addEventListener('DOMContentLoaded', () => {
    const addAddressForm = document.querySelector('.address-form');
    
    if (addAddressForm) {

        const urlParams = new URLSearchParams(window.location.search);
        const fromCheckout = urlParams.get('from') === 'checkout';

        // Validation functions
        const validators = {
            name: (value) => {
                const nameRegex = /^[A-Za-z\s]{2,50}$/;
                return nameRegex.test(value.trim());
            },
            phone: (value) => {
                const phoneRegex = /^[6-9]\d{9}$/;
                return phoneRegex.test(value);
            },
            altPhone: (value) => {
                // Optional field, but if filled, must be valid
                return !value || /^[6-9]\d{9}$/.test(value);
            },
            landmark: (value) => {
                return value.trim().length >= 3 && value.trim().length <= 100;
            },
            city: (value) => {
                const cityRegex = /^[A-Za-z\s]{2,50}$/;
                return cityRegex.test(value.trim());
            },
            state: (value) => {
                const stateRegex = /^[A-Za-z\s]{2,50}$/;
                return stateRegex.test(value.trim());
            },
            pincode: (value) => {
                const pincodeRegex = /^\d{6}$/;
                return pincodeRegex.test(value);
            }
        };

        // Error messages for each field
        const errorMessages = {
            name: 'Name must be 2-50 letters and contain only alphabets',
            phone: 'Phone number must be 10 digits starting with 6-9',
            altPhone: 'Alternative phone number must be 10 digits starting with 6-9',
            landmark: 'Landmark must be 3-100 characters',
            city: 'City must be 2-50 letters and contain only alphabets',
            state: 'State must be 2-50 letters and contain only alphabets',
            pincode: 'Pincode must be 6 digits'
        };

        // Function to create or update error message
        const createErrorMessage = (input, message) => {
            // Remove existing error message if any
            const existingError = input.parentNode.querySelector('.error-message');
            if (existingError) {
                existingError.remove();
            }

            // Create error message element
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error-message text-danger small mt-1';
            errorDiv.textContent = message;

            // Insert error message after the input
            input.parentNode.insertBefore(errorDiv, input.nextSibling);
        };

        // Real-time validation
        const validateField = (input, validator) => {
            const value = input.value.trim();
            const isValid = validator(value);
            const fieldId = input.id;
            
            if (!isValid) {
                input.classList.add('is-invalid');
                input.classList.remove('is-valid');
                
                // Add error message
                if (errorMessages[fieldId]) {
                    createErrorMessage(input, errorMessages[fieldId]);
                }
            } else {
                input.classList.remove('is-invalid');
                input.classList.add('is-valid');
                
                // Remove error message
                const existingError = input.parentNode.querySelector('.error-message');
                if (existingError) {
                    existingError.remove();
                }
            }
            
            return isValid;
        };

        // Add real-time validation listeners
        const fields = [
            { id: 'name', validator: validators.name },
            { id: 'phone', validator: validators.phone },
            { id: 'altPhone', validator: validators.altPhone },
            { id: 'landmark', validator: validators.landmark },
            { id: 'city', validator: validators.city },
            { id: 'state', validator: validators.state },
            { id: 'pincode', validator: validators.pincode }
        ];

        fields.forEach(field => {
            const input = document.getElementById(field.id);
            if (input) {
                input.addEventListener('input', () => validateField(input, field.validator));
                input.addEventListener('blur', () => {
                    if (!input.value.trim()) {
                        input.classList.add('is-invalid');
                        createErrorMessage(input, `${input.labels[0].textContent} is required`);
                    } else {
                        validateField(input, field.validator);
                    }
                });
            }
        });

         addAddressForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            // Validate all fields
            let isFormValid = true;
            fields.forEach(field => {
                const input = document.getElementById(field.id);
                if (input) {
                    if (!input.value.trim()) {
                        input.classList.add('is-invalid');
                        createErrorMessage(input, `${input.labels[0].textContent} is required`);
                        isFormValid = false;
                    } else if (!validateField(input, field.validator)) {
                        isFormValid = false;
                    }
                }
            });

            // Address type validation
            const addressType = document.getElementById('addressType');
            if (!addressType.value) {
                addressType.classList.add('is-invalid');
                createErrorMessage(addressType, 'Please select an address type');
                isFormValid = false;
            } else {
                addressType.classList.remove('is-invalid');
                const existingError = addressType.parentNode.querySelector('.error-message');
                if (existingError) {
                    existingError.remove();
                }
            }

            if (!isFormValid) {
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Error',
                    text: 'Please fill in all required fields correctly'
                });
                return;
            }

            // Gather form data
            const formData = {
                name: document.getElementById('name').value.trim(),
                phone: document.getElementById('phone').value,
                altPhone: document.getElementById('altPhone').value || '',
                addressType: addressType.value,
                landmark: document.getElementById('landmark').value.trim(),
                city: document.getElementById('city').value.trim(),
                state: document.getElementById('state').value.trim(),
                pincode: document.getElementById('pincode').value
            };

            try {
                const response = await fetch('/profile/add-address', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const result = await response.json();

                if (result.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Address added successfully',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        // Redirect based on where the user came from
                        if (fromCheckout) {
                            window.location.href = '/checkout';
                        } else {
                            window.location.href = '/profile/addresses';
                        }
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: result.message || 'Failed to add address'
                    });
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'Something went wrong while adding the address'
                });
            }
        });
    }
});




   // Updated delete address functionality with SweetAlert2
document.addEventListener('DOMContentLoaded', function () {
    const deleteButtons = document.querySelectorAll('.delete-address-btn');

    deleteButtons.forEach(function(button) {
        button.addEventListener('click', function() {
            const addressId = this.getAttribute('data-id');
            
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Send delete request
                    fetch(`/profile/delete-address/${addressId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Remove the address card from UI
                            this.closest('.address-card').remove();
                            
                            Swal.fire(
                                'Deleted!',
                                'Your address has been deleted.',
                                'success'
                            );
                        } else {
                            Swal.fire(
                                'Error!',
                                data.message || 'Failed to delete address',
                                'error'
                            );
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire(
                            'Error!',
                            'Something went wrong while deleting the address.',
                            'error'
                        );
                    });
                }
            });
        });
    });
});

    



/// Function to handle edit button click
async function handleEditAddress(addressId) {
    try {
        if (!addressId) {
            throw new Error('Invalid address ID');
        }

        const addressCard = document.querySelector(`.address-card[data-id="${addressId}"]`);
        if (!addressCard) {
            throw new Error('Address card not found');
        }

        const response = await fetch(`/profile/get-address/${addressId}`, {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            credentials: 'same-origin'
        });

        if (!response.ok) {
            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('application/json')) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Error fetching address');
            } else {
                throw new Error('Server returned an invalid response');
            }
        }

        const data = await response.json();
        
        if (!data.success || !data.address) {
            throw new Error(data.message || 'Address data not found');
        }

        // Populate the edit form with address data
        const address = data.address;
        document.getElementById('edit-name').value = address.name || '';
        document.getElementById('edit-phone').value = address.phone || '';
        document.getElementById('edit-alt-phone').value = address.altPhone || '';
        document.getElementById('edit-landmark').value = address.landmark || '';
        document.getElementById('edit-city').value = address.city || '';
        document.getElementById('edit-state').value = address.state || '';
        document.getElementById('edit-pincode').value = address.pincode || '';
        
        // Set address type radio button - Note the capitalized value
        const addressTypeRadio = document.querySelector(`input[name="edit-addressType"][value="${address.addressType}"]`);
        if (addressTypeRadio) {
            addressTypeRadio.checked = true;
        }

        // Store addressId for update
        document.getElementById('edit-form').setAttribute('data-address-id', addressId);
        
        // Show modal using Bootstrap 5
        const editModal = new bootstrap.Modal(document.getElementById('editAddressModal'));
        editModal.show();

    } catch (error) {
        console.error('Error in handleEditAddress:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to fetch address details',
            confirmButtonColor: '#3085d6'
        });
    }
}

// edit Form submission handler
document.addEventListener('DOMContentLoaded', function() {
    const editForm = document.getElementById('edit-form');
    
    if (editForm) {
        // Function to create or update error message
        const createErrorMessage = (input, message) => {
            // Remove existing error message if any
            const existingError = input.parentNode.querySelector('.error-message');
            if (existingError) {
                existingError.remove();
            }

            // Create error message element
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error-message text-danger small mt-1';
            errorDiv.textContent = message;

            // Insert error message after the input
            input.parentNode.insertBefore(errorDiv, input.nextSibling);
        };

        // Updated validators with more flexible landmark validation
        const validators = {
            name: (value) => {
                const nameRegex = /^[A-Za-z\s]{2,50}$/;
                return nameRegex.test(value.trim());
            },
            phone: (value) => /^[6-9]\d{9}$/.test(value),
            altPhone: (value) => !value || /^[6-9]\d{9}$/.test(value),
            landmark: (value) => {
                // Allow letters, numbers, spaces, and commas
                // Minimum length 3, maximum 150 characters
                const landmarkRegex = /^[A-Za-z0-9\s,]{3,150}$/;
                return landmarkRegex.test(value.trim());
            },
            city: (value) => /^[A-Za-z\s]{2,50}$/.test(value.trim()),
            state: (value) => /^[A-Za-z\s]{2,50}$/.test(value.trim()),
            pincode: (value) => /^\d{6}$/.test(value)
        };

        // Error messages for each field
        const errorMessages = {
            name: 'Name must be 2-50 letters and contain only alphabets',
            phone: 'Phone number must be 10 digits starting with 6-9',
            altPhone: 'Alternative phone number must be 10 digits starting with 6-9',
            landmark: 'Landmark must be 3-150 characters, using letters, numbers, spaces, and commas',
            city: 'City must be 2-50 letters and contain only alphabets',
            state: 'State must be 2-50 letters and contain only alphabets',
            pincode: 'Pincode must be 6 digits'
        };

        // Enhanced validation function
        const validateField = (input, validator) => {
            const value = input.value.trim();
            const fieldId = input.id.replace('edit-', '');
            const isValid = validator(value);
            
            if (!isValid) {
                input.classList.add('is-invalid');
                input.classList.remove('is-valid');
                
                // Add error message
                if (errorMessages[fieldId]) {
                    createErrorMessage(input, errorMessages[fieldId]);
                }
            } else {
                input.classList.remove('is-invalid');
                input.classList.add('is-valid');
                
                // Remove error message
                const existingError = input.parentNode.querySelector('.error-message');
                if (existingError) {
                    existingError.remove();
                }
            }
            
            return isValid;
        };

        // Add validation listeners to edit form fields
        const editFields = [
            { id: 'edit-name', validator: validators.name },
            { id: 'edit-phone', validator: validators.phone },
            { id: 'edit-alt-phone', validator: validators.altPhone },
            { id: 'edit-landmark', validator: validators.landmark },
            { id: 'edit-city', validator: validators.city },
            { id: 'edit-state', validator: validators.state },
            { id: 'edit-pincode', validator: validators.pincode }
        ];

        editFields.forEach(field => {
            const input = document.getElementById(field.id);
            if (input) {
                input.addEventListener('input', () => validateField(input, field.validator));
                input.addEventListener('blur', () => {
                    if (!input.value.trim()) {
                        input.classList.add('is-invalid');
                        createErrorMessage(input, `${input.labels[0].textContent} is required`);
                    } else {
                        validateField(input, field.validator);
                    }
                });
            }
        });

        editForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const addressId = this.getAttribute('data-address-id');
            if (!addressId) {
                Swal.fire('Error', 'Address ID not found', 'error');
                return;
            }

            // Validate all fields
            let isFormValid = true;
            editFields.forEach(field => {
                const input = document.getElementById(field.id);
                if (input) {
                    // Check if field is empty
                    if (!input.value.trim()) {
                        input.classList.add('is-invalid');
                        createErrorMessage(input, `${input.labels[0].textContent} is required`);
                        isFormValid = false;
                    } else if (!validateField(input, field.validator)) {
                        isFormValid = false;
                    }
                }
            });

            // Address type radio validation
            const addressTypeRadios = document.querySelectorAll('input[name="edit-addressType"]');
            const selectedAddressType = document.querySelector('input[name="edit-addressType"]:checked');
            if (!selectedAddressType) {
                addressTypeRadios.forEach(radio => {
                    radio.classList.add('is-invalid');
                    // Add error message to the parent div
                    const parentDiv = radio.closest('.mb-3');
                    if (parentDiv) {
                        createErrorMessage(parentDiv, 'Please select an address type');
                    }
                });
                isFormValid = false;
            } else {
                addressTypeRadios.forEach(radio => {
                    radio.classList.remove('is-invalid');
                    // Remove any existing error messages
                    const parentDiv = radio.closest('.mb-3');
                    if (parentDiv) {
                        const existingError = parentDiv.querySelector('.error-message');
                        if (existingError) {
                            existingError.remove();
                        }
                    }
                });
            }

            if (!isFormValid) {
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Error',
                    text: 'Please correct the highlighted fields'
                });
                return;
            }

            // Gather form data
            const formData = {
                name: document.getElementById('edit-name').value.trim(),
                addressType: selectedAddressType.value,
                phone: document.getElementById('edit-phone').value,
                altPhone: document.getElementById('edit-alt-phone').value || '',
                landmark: document.getElementById('edit-landmark').value.trim(),
                city: document.getElementById('edit-city').value.trim(),
                state: document.getElementById('edit-state').value.trim(),
                pincode: document.getElementById('edit-pincode').value
            };

            try {
                const response = await fetch(`/profile/edit-address/${addressId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const data = await response.json();

                if (data.success) {
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editAddressModal'));
                    modal.hide();

                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Address updated successfully',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: data.message || 'Failed to update address'
                    });
                }
            } catch (error) {
                console.error('Error updating address:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'Something went wrong while updating the address'
                });
            }
        });
    }
});



</script>



<script>
    // change password eye icone visble and disable
    document.addEventListener('DOMContentLoaded', () => {
        const togglePasswordButtons = document.querySelectorAll('.toggle-password');
        
        togglePasswordButtons.forEach(button => {
            button.addEventListener('click', () => {
                const targetId = button.getAttribute('data-target');
                const passwordInput = document.getElementById(targetId);
                const icon = button.querySelector('i');
                
                if (passwordInput.type === 'password') {
                    passwordInput.type = 'text';
                    icon.classList.remove('fa-eye-slash');
                    icon.classList.add('fa-eye');
                } else {
                    passwordInput.type = 'password';
                    icon.classList.remove('fa-eye');
                    icon.classList.add('fa-eye-slash');
                }
            });
        });
    });
</script>







<script>
    document.addEventListener('DOMContentLoaded', function() {

         // Handle variant selection
    // Update the variant selection handler in your script
document.querySelectorAll('.size-select').forEach(select => {
    select.addEventListener('change', async function() {
        const productId = this.getAttribute('data-product-id');
        const selectedOption = this.options[this.selectedIndex];
        
        if (!this.value) {
            return; // Do nothing if "Select Variant" is chosen
        }

        const selectedVariant = {
            size: parseInt(this.value),
            color: selectedOption.getAttribute('data-color')
        };

        try {
            const response = await fetch(`/update-wishlist-variant/${productId}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content
                },
                body: JSON.stringify({ selectedVariant })
            });

            // First check if response is JSON
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                throw new Error('Server returned non-JSON response');
            }

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.message || 'Failed to update variant');
            }

            // Update carousel image
            updateCarouselImage(this, selectedVariant.color);

            Swal.fire({
                title: 'Success!',
                text: 'Variant updated successfully',
                icon: 'success',
                timer: 1500,
                showConfirmButton: false
            });
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                title: 'Error!',
                text: error.message || 'Failed to update variant',
                icon: 'error'
            });
        }
    });
});

    // Add to cart from wishlist
    document.querySelectorAll('.add-to-cart-from-wishlist').forEach(button => {
    button.addEventListener('click', async function() {
        const productId = this.dataset.id;
        const row = this.closest('.wishlist-item');
        const select = row.querySelector('.size-select');
        const selectedOption = select.options[select.selectedIndex];
        
        if (!select.value) {
            Swal.fire('Error', 'Please select a size and color', 'warning');
            return;
        }

        const variantData = {
            productId,
            size: parseInt(select.value),
            color: selectedOption.getAttribute('data-color'),
            variantId: selectedOption.getAttribute('data-variant-id'),
            quantity: 1
        };

        try {
            // First check if item already exists in cart
            const checkResponse = await fetch(`/check-cart-item`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content
                },
                body: JSON.stringify(variantData)
            });

            const checkData = await checkResponse.json();

            if (checkData.exists) {
                Swal.fire('Info', `This product with selected color ${variantData.color} and size ${variantData.size} already exists in your cart`, 'info');
                return;
            }

            // If not exists, proceed to add to cart
            const addResponse = await fetch('/addToCart/' + productId, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content
                },
                body: JSON.stringify(variantData)
            });

            if (!addResponse.ok) {
                const errorData = await addResponse.json();
                throw new Error(errorData.message || 'Failed to add to cart');
            }

            Swal.fire({
                title: 'Success!',
                text: 'Product added to cart',
                icon: 'success',
                showCancelButton: true,
                confirmButtonText: 'Go to Cart',
                cancelButtonText: 'Continue Shopping'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/userCart';
                }
            });
        } catch (error) {
            Swal.fire('Error', error.message, 'error');
        }
    });
});


        // Remove from wishlist
        document.querySelectorAll('.remove-from-wishlist').forEach(button => {
            button.addEventListener('click', async function() {
                const productId = this.getAttribute('data-id');
                try {
                    const response = await fetch(`/remove-from-wishlist/${productId}`, {
                        method: 'DELETE',
                        headers: {
                            'CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content
                        }
                    });
                    
                    if (response.ok) {
                        this.closest('.wishlist-item').remove();
                        Swal.fire('Removed!', 'Item removed from wishlist', 'success');
                    }
                } catch (error) {
                    Swal.fire('Error!', 'Failed to remove item', 'error');
                }
            });
        });

        // Clear wishlist
        document.querySelector('.clear-wishlist')?.addEventListener('click', async function() {
            try {
                const response = await fetch('/clear-wishlist', {
                    method: 'DELETE',
                    headers: {
                        'CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content
                    }
                });
                
                if (response.ok) {
                    location.reload();
                }
            } catch (error) {
                Swal.fire('Error!', 'Failed to clear wishlist', 'error');
            }
        });

        // Add all to cart
        // Add all to cart handler
document.querySelector('.add-all-to-cart')?.addEventListener('click', async function() {
    try {
        const response = await fetch('/wishlist/add-all-to-cart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content
            }
        });
        
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.message || 'Failed to add items to cart');
        }

        Swal.fire({
            title: 'Success!',
            text: data.message,
            icon: 'success',
            showCancelButton: true,
            confirmButtonText: 'Go to Cart',
            cancelButtonText: 'Continue Shopping'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '/userCart';
            }
        });
    } catch (error) {
        Swal.fire({
            title: 'Error!',
            text: error.message,
            icon: 'error'
        });
    }
});

    // Helper function to update carousel image
    function updateCarouselImage(select, selectedColor) {
        const carousel = select.closest('tr').querySelector('.carousel');
        const items = carousel.querySelectorAll('.carousel-item');
        
        items.forEach(item => {
            const img = item.querySelector('img');
            if (img.getAttribute('data-color') === selectedColor) {
                item.classList.add('active');
            } else {
                item.classList.remove('active');
            }
        });
    }
});
</script>





</html>
